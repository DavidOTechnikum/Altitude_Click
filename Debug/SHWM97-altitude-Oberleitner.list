
SHWM97-altitude-Oberleitner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800d0e8  0800d0e8  0001d0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d73c  0800d73c  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d744  0800d744  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d744  0800d744  0001d744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d748  0800d748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4cc  20000264  0800d9b0  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e730  0800d9b0  0002e730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024934  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005156  00000000  00000000  00044c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d08  00000000  00000000  00049d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001674  00000000  00000000  0004ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262ce  00000000  00000000  0004d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c74  00000000  00000000  000733b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da0d7  00000000  00000000  00098026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ae0  00000000  00000000  00172100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0cc 	.word	0x0800d0cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	0800d0cc 	.word	0x0800d0cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of data_queue */
  data_queueHandle = osMessageQueueNew (16, sizeof(message), &data_queue_attributes);
 8000f68:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <MX_FREERTOS_Init+0xb4>)
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f006 fada 	bl	8007526 <osMessageQueueNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a29      	ldr	r2, [pc, #164]	; (800101c <MX_FREERTOS_Init+0xb8>)
 8000f76:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */

  if (data_queueHandle == NULL) {
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_FREERTOS_Init+0xb8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d104      	bne.n	8000f8a <MX_FREERTOS_Init+0x26>
	  printf("data_queue not created\n");
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <MX_FREERTOS_Init+0xbc>)
 8000f82:	f009 feb7 	bl	800acf4 <puts>
	  Error_Handler();
 8000f86:	f000 fb17 	bl	80015b8 <Error_Handler>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of alt_mon_task */
  alt_mon_taskHandle = osThreadNew(altitude_monitor_task_func, NULL, &alt_mon_task_attributes);
 8000f8a:	4a26      	ldr	r2, [pc, #152]	; (8001024 <MX_FREERTOS_Init+0xc0>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4826      	ldr	r0, [pc, #152]	; (8001028 <MX_FREERTOS_Init+0xc4>)
 8000f90:	f006 fa1c 	bl	80073cc <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a25      	ldr	r2, [pc, #148]	; (800102c <MX_FREERTOS_Init+0xc8>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* creation of data_task */
  data_taskHandle = osThreadNew(data_task_func, NULL, &data_task_attributes);
 8000f9a:	4a25      	ldr	r2, [pc, #148]	; (8001030 <MX_FREERTOS_Init+0xcc>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4825      	ldr	r0, [pc, #148]	; (8001034 <MX_FREERTOS_Init+0xd0>)
 8000fa0:	f006 fa14 	bl	80073cc <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a24      	ldr	r2, [pc, #144]	; (8001038 <MX_FREERTOS_Init+0xd4>)
 8000fa8:	6013      	str	r3, [r2, #0]

  /* creation of wifi_mon_task */
  wifi_mon_taskHandle = osThreadNew(wifi_monitor_task_func, NULL, &wifi_mon_task_attributes);
 8000faa:	4a24      	ldr	r2, [pc, #144]	; (800103c <MX_FREERTOS_Init+0xd8>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4824      	ldr	r0, [pc, #144]	; (8001040 <MX_FREERTOS_Init+0xdc>)
 8000fb0:	f006 fa0c 	bl	80073cc <osThreadNew>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <MX_FREERTOS_Init+0xe0>)
 8000fb8:	6013      	str	r3, [r2, #0]

  /* creation of sender_task */
  sender_taskHandle = osThreadNew(sender_task_func, NULL, &sender_task_attributes);
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_FREERTOS_Init+0xe4>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4823      	ldr	r0, [pc, #140]	; (800104c <MX_FREERTOS_Init+0xe8>)
 8000fc0:	f006 fa04 	bl	80073cc <osThreadNew>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <MX_FREERTOS_Init+0xec>)
 8000fc8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  if (alt_mon_taskHandle == NULL) {
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_FREERTOS_Init+0xc8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d104      	bne.n	8000fdc <MX_FREERTOS_Init+0x78>
  	printf("altitude monitoring task not created\n");
 8000fd2:	4820      	ldr	r0, [pc, #128]	; (8001054 <MX_FREERTOS_Init+0xf0>)
 8000fd4:	f009 fe8e 	bl	800acf4 <puts>
  	Error_Handler();
 8000fd8:	f000 faee 	bl	80015b8 <Error_Handler>
  }

  if (data_taskHandle == NULL) {
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_FREERTOS_Init+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d104      	bne.n	8000fee <MX_FREERTOS_Init+0x8a>
  	printf("data task not created\n");
 8000fe4:	481c      	ldr	r0, [pc, #112]	; (8001058 <MX_FREERTOS_Init+0xf4>)
 8000fe6:	f009 fe85 	bl	800acf4 <puts>
  	Error_Handler();
 8000fea:	f000 fae5 	bl	80015b8 <Error_Handler>
  }

  if (wifi_mon_taskHandle == NULL) {
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_FREERTOS_Init+0xe0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d104      	bne.n	8001000 <MX_FREERTOS_Init+0x9c>
  	printf("wifi monitoring task not created\n");
 8000ff6:	4819      	ldr	r0, [pc, #100]	; (800105c <MX_FREERTOS_Init+0xf8>)
 8000ff8:	f009 fe7c 	bl	800acf4 <puts>
  	Error_Handler();
 8000ffc:	f000 fadc 	bl	80015b8 <Error_Handler>
  }

  if (sender_taskHandle == NULL) {
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_FREERTOS_Init+0xec>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d104      	bne.n	8001012 <MX_FREERTOS_Init+0xae>
  	printf("sender task not created\n");
 8001008:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_FREERTOS_Init+0xfc>)
 800100a:	f009 fe73 	bl	800acf4 <puts>
  	Error_Handler();
 800100e:	f000 fad3 	bl	80015b8 <Error_Handler>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	0800d36c 	.word	0x0800d36c
 800101c:	20007294 	.word	0x20007294
 8001020:	0800d12c 	.word	0x0800d12c
 8001024:	0800d2dc 	.word	0x0800d2dc
 8001028:	08001065 	.word	0x08001065
 800102c:	20000284 	.word	0x20000284
 8001030:	0800d300 	.word	0x0800d300
 8001034:	080010d5 	.word	0x080010d5
 8001038:	200041b0 	.word	0x200041b0
 800103c:	0800d324 	.word	0x0800d324
 8001040:	080011b9 	.word	0x080011b9
 8001044:	200051fc 	.word	0x200051fc
 8001048:	0800d348 	.word	0x0800d348
 800104c:	08001235 	.word	0x08001235
 8001050:	20006248 	.word	0x20006248
 8001054:	0800d144 	.word	0x0800d144
 8001058:	0800d16c 	.word	0x0800d16c
 800105c:	0800d184 	.word	0x0800d184
 8001060:	0800d1a8 	.word	0x0800d1a8

08001064 <altitude_monitor_task_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_altitude_monitor_task_func */
void altitude_monitor_task_func(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af04      	add	r7, sp, #16
 800106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN altitude_monitor_task_func */
	uint8_t sysmod = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */

	for (;;) {
		if (sysmod == 0) {
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d111      	bne.n	800109a <altitude_monitor_task_func+0x36>
			printf("setup \n");
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <altitude_monitor_task_func+0x64>)
 8001078:	f009 fe3c 	bl	800acf4 <puts>

			if (calibration(&hi2c1) != HAL_OK) {
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <altitude_monitor_task_func+0x68>)
 800107e:	f000 fe9f 	bl	8001dc0 <calibration>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d11b      	bne.n	80010c0 <altitude_monitor_task_func+0x5c>
				continue;
			}
			if (altitude_read(&hi2c1, data_queueHandle) != HAL_OK) {
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <altitude_monitor_task_func+0x6c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	480f      	ldr	r0, [pc, #60]	; (80010cc <altitude_monitor_task_func+0x68>)
 8001090:	f000 ff6e 	bl	8001f70 <altitude_read>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <altitude_monitor_task_func+0x60>
				continue;
			}
		}
		// check altitude click status (0 = not active)
		osDelay(ALT_DELAY);
 800109a:	f242 7010 	movw	r0, #10000	; 0x2710
 800109e:	f006 fa27 	bl	80074f0 <osDelay>
		HAL_I2C_Mem_Read(&hi2c1, 0xC0, 0x11, 1, &sysmod, 1, HAL_MAX_DELAY);
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f107 030f 	add.w	r3, r7, #15
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2211      	movs	r2, #17
 80010b6:	21c0      	movs	r1, #192	; 0xc0
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <altitude_monitor_task_func+0x68>)
 80010ba:	f001 ff7f 	bl	8002fbc <HAL_I2C_Mem_Read>
 80010be:	e7d7      	b.n	8001070 <altitude_monitor_task_func+0xc>
				continue;
 80010c0:	bf00      	nop
 80010c2:	e7d5      	b.n	8001070 <altitude_monitor_task_func+0xc>
				continue;
 80010c4:	bf00      	nop
		if (sysmod == 0) {
 80010c6:	e7d3      	b.n	8001070 <altitude_monitor_task_func+0xc>
 80010c8:	0800d1c0 	.word	0x0800d1c0
 80010cc:	20007298 	.word	0x20007298
 80010d0:	20007294 	.word	0x20007294

080010d4 <data_task_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_data_task_func */
void data_task_func(void *argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN data_task_func */
	uint8_t low_byte, high_byte, higher_byte;
	uint8_t temp_msb, temp_lsb;
	uint8_t sysmod = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	72bb      	strb	r3, [r7, #10]
	float pressure = 0;
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
	float temp = 0;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]

	/* Infinite loop */
	while (wifi_on == false) {
 80010ec:	e003      	b.n	80010f6 <data_task_func+0x22>
		osDelay(DATA_DELAY);
 80010ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80010f2:	f006 f9fd 	bl	80074f0 <osDelay>
	while (wifi_on == false) {
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <data_task_func+0xcc>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f083 0301 	eor.w	r3, r3, #1
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f4      	bne.n	80010ee <data_task_func+0x1a>
	}
	for (;;) {
		osDelay(POLLING_DELAY);
 8001104:	f241 3088 	movw	r0, #5000	; 0x1388
 8001108:	f006 f9f2 	bl	80074f0 <osDelay>
		HAL_I2C_Mem_Read(&hi2c1, 0xC0, 0x11, 1, &sysmod, 1, HAL_MAX_DELAY);
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	2301      	movs	r3, #1
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	f107 030a 	add.w	r3, r7, #10
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2211      	movs	r2, #17
 8001120:	21c0      	movs	r1, #192	; 0xc0
 8001122:	4820      	ldr	r0, [pc, #128]	; (80011a4 <data_task_func+0xd0>)
 8001124:	f001 ff4a 	bl	8002fbc <HAL_I2C_Mem_Read>
		if (sysmod == 1) {
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d1ea      	bne.n	8001104 <data_task_func+0x30>

			if (read_data(&hi2c1, &low_byte, &high_byte, &higher_byte,
 800112e:	f107 000d 	add.w	r0, r7, #13
 8001132:	f107 020e 	add.w	r2, r7, #14
 8001136:	f107 010f 	add.w	r1, r7, #15
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	f107 030b 	add.w	r3, r7, #11
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4603      	mov	r3, r0
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <data_task_func+0xd0>)
 800114a:	f000 fdcf 	bl	8001cec <read_data>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d110      	bne.n	8001176 <data_task_func+0xa2>
					&temp_lsb, &temp_msb) == HAL_OK) {
				pressure = calculate_pressure(low_byte, high_byte, higher_byte);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	7bb9      	ldrb	r1, [r7, #14]
 8001158:	7b7a      	ldrb	r2, [r7, #13]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fd09 	bl	8001b72 <calculate_pressure>
 8001160:	ed87 0a05 	vstr	s0, [r7, #20]
				temp = calculate_temperature(temp_lsb, temp_msb);
 8001164:	7afb      	ldrb	r3, [r7, #11]
 8001166:	7b3a      	ldrb	r2, [r7, #12]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fd53 	bl	8001c16 <calculate_temperature>
 8001170:	ed87 0a04 	vstr	s0, [r7, #16]
 8001174:	e003      	b.n	800117e <data_task_func+0xaa>
			} else {
				pressure = ERROR_VALUE;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <data_task_func+0xd4>)
 8001178:	617b      	str	r3, [r7, #20]
				temp = ERROR_VALUE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <data_task_func+0xd4>)
 800117c:	613b      	str	r3, [r7, #16]
			}

			data_in_queue("TP", temp, data_queueHandle);
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <data_task_func+0xd8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	ed97 0a04 	vldr	s0, [r7, #16]
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <data_task_func+0xdc>)
 800118a:	f000 ff47 	bl	800201c <data_in_queue>
			data_in_queue("P", pressure, data_queueHandle);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <data_task_func+0xd8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	ed97 0a05 	vldr	s0, [r7, #20]
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <data_task_func+0xe0>)
 800119a:	f000 ff3f 	bl	800201c <data_in_queue>
		osDelay(POLLING_DELAY);
 800119e:	e7b1      	b.n	8001104 <data_task_func+0x30>
 80011a0:	20000280 	.word	0x20000280
 80011a4:	20007298 	.word	0x20007298
 80011a8:	c5505000 	.word	0xc5505000
 80011ac:	20007294 	.word	0x20007294
 80011b0:	0800d1c8 	.word	0x0800d1c8
 80011b4:	0800d1cc 	.word	0x0800d1cc

080011b8 <wifi_monitor_task_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifi_monitor_task_func */
void wifi_monitor_task_func(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifi_monitor_task_func */
	bool success_check = false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
  /* Infinite loop */
	// Next line: delete '//' for troubleshooting
	//wifi_on = true;
	for (;;) {
		wifi_on = wifi_init();
 80011c4:	f001 f90c 	bl	80023e0 <wifi_init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <wifi_monitor_task_func+0x70>)
 80011ce:	701a      	strb	r2, [r3, #0]
		if (!wifi_on) {
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <wifi_monitor_task_func+0x70>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d122      	bne.n	8001224 <wifi_monitor_task_func+0x6c>
			continue;
		}

		for (;;) {
			i = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
			do {
				success_check = wifi_init_stage_and_TCP_check(
 80011e2:	4812      	ldr	r0, [pc, #72]	; (800122c <wifi_monitor_task_func+0x74>)
 80011e4:	f001 f8d0 	bl	8002388 <wifi_init_stage_and_TCP_check>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73bb      	strb	r3, [r7, #14]
						obtain_tcp_connection);
				i++;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	3301      	adds	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
			} while (!success_check && i < RETRY);
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <wifi_monitor_task_func+0x4c>
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b09      	cmp	r3, #9
 8001202:	d9ee      	bls.n	80011e2 <wifi_monitor_task_func+0x2a>
			if (no_tcp_connection || i == RETRY) {
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <wifi_monitor_task_func+0x78>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <wifi_monitor_task_func+0x5a>
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d103      	bne.n	800121a <wifi_monitor_task_func+0x62>
				no_tcp_connection = false;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <wifi_monitor_task_func+0x78>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
				break;
 8001218:	e005      	b.n	8001226 <wifi_monitor_task_func+0x6e>
			}
			osDelay(2 * WIFI_DELAY);
 800121a:	f242 7010 	movw	r0, #10000	; 0x2710
 800121e:	f006 f967 	bl	80074f0 <osDelay>
			i = 0;
 8001222:	e7dc      	b.n	80011de <wifi_monitor_task_func+0x26>
			continue;
 8001224:	bf00      	nop
		wifi_on = wifi_init();
 8001226:	e7cd      	b.n	80011c4 <wifi_monitor_task_func+0xc>
 8001228:	20000280 	.word	0x20000280
 800122c:	20000000 	.word	0x20000000
 8001230:	20000281 	.word	0x20000281

08001234 <sender_task_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sender_task_func */
void sender_task_func(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	; 0x30
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	char sendmsg[MESSAGE_LEN];
	HAL_StatusTypeDef TCP_success;
	uint8_t i;
	/* Infinite loop */
	for (;;) {
		if (wifi_on == true) {
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <sender_task_func+0x78>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d02d      	beq.n	80012a0 <sender_task_func+0x6c>
			if (osMessageQueueGet(data_queueHandle, &received, NULL,
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <sender_task_func+0x7c>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	2200      	movs	r2, #0
 8001252:	f006 fa3b 	bl	80076cc <osMessageQueueGet>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ef      	bne.n	800123c <sender_task_func+0x8>
					osWaitForever) == osOK) {
				build_message(received, sendmsg);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	461a      	mov	r2, r3
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	e893 0003 	ldmia.w	r3, {r0, r1}
 800126a:	f001 f971 	bl	8002550 <build_message>

				i = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			do {
				TCP_success = send_TCP_command(sendmsg);
 8001274:	f107 0308 	add.w	r3, r7, #8
 8001278:	4618      	mov	r0, r3
 800127a:	f001 f805 	bl	8002288 <send_TCP_command>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				i++;
 8001284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001288:	3301      	adds	r3, #1
 800128a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (TCP_success != HAL_OK && i < RETRY/2);
 800128e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0d2      	beq.n	800123c <sender_task_func+0x8>
 8001296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129a:	2b04      	cmp	r3, #4
 800129c:	d9ea      	bls.n	8001274 <sender_task_func+0x40>
 800129e:	e7cd      	b.n	800123c <sender_task_func+0x8>

			}
		} else {
			osDelay(WIFI_WAIT);
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f006 f924 	bl	80074f0 <osDelay>
		if (wifi_on == true) {
 80012a8:	e7c8      	b.n	800123c <sender_task_func+0x8>
 80012aa:	bf00      	nop
 80012ac:	20000280 	.word	0x20000280
 80012b0:	20007294 	.word	0x20007294

080012b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_GPIO_Init+0x98>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a1f      	ldr	r2, [pc, #124]	; (800134c <MX_GPIO_Init+0x98>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_GPIO_Init+0x98>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_GPIO_Init+0x98>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <MX_GPIO_Init+0x98>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_GPIO_Init+0x98>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_GPIO_Init+0x98>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a13      	ldr	r2, [pc, #76]	; (800134c <MX_GPIO_Init+0x98>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_GPIO_Init+0x98>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port, WIFI_CS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <MX_GPIO_Init+0x9c>)
 8001318:	f001 fc88 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2108      	movs	r1, #8
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <MX_GPIO_Init+0x9c>)
 8001322:	f001 fc83 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin|LD3_Pin;
 8001326:	2309      	movs	r3, #9
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_GPIO_Init+0x9c>)
 800133e:	f001 fb0b 	bl	8002958 <HAL_GPIO_Init>

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400

08001354 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_I2C1_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_I2C1_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x7c>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_I2C1_Init+0x74>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138e:	480e      	ldr	r0, [pc, #56]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001390:	f001 fc64 	bl	8002c5c <HAL_I2C_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800139a:	f000 f90d 	bl	80015b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <MX_I2C1_Init+0x74>)
 80013a2:	f002 ff63 	bl	800426c <HAL_I2CEx_ConfigAnalogFilter>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 f904 	bl	80015b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_I2C1_Init+0x74>)
 80013b4:	f002 ffa5 	bl	8004302 <HAL_I2CEx_ConfigDigitalFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 f8fb 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20007298 	.word	0x20007298
 80013cc:	40005400 	.word	0x40005400
 80013d0:	00707cbb 	.word	0x00707cbb

080013d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09e      	sub	sp, #120	; 0x78
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2254      	movs	r2, #84	; 0x54
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f009 fd91 	bl	800af1c <memset>
  if(i2cHandle->Instance==I2C1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a26      	ldr	r2, [pc, #152]	; (8001498 <HAL_I2C_MspInit+0xc4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d145      	bne.n	8001490 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001408:	2300      	movs	r3, #0
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fea1 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800141c:	f000 f8cc 	bl	80015b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_I2C_MspInit+0xc8>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_I2C_MspInit+0xc8>)
 8001426:	f043 0302 	orr.w	r3, r3, #2
 800142a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_I2C_MspInit+0xc8>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001438:	23c0      	movs	r3, #192	; 0xc0
 800143a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143c:	2312      	movs	r3, #18
 800143e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001448:	2304      	movs	r3, #4
 800144a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001450:	4619      	mov	r1, r3
 8001452:	4813      	ldr	r0, [pc, #76]	; (80014a0 <HAL_I2C_MspInit+0xcc>)
 8001454:	f001 fa80 	bl	8002958 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_I2C_MspInit+0xc8>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_I2C_MspInit+0xc8>)
 800145e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001462:	6593      	str	r3, [r2, #88]	; 0x58
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_I2C_MspInit+0xc8>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	201f      	movs	r0, #31
 8001476:	f001 f9b7 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800147a:	201f      	movs	r0, #31
 800147c:	f001 f9d0 	bl	8002820 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2105      	movs	r1, #5
 8001484:	2020      	movs	r0, #32
 8001486:	f001 f9af 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800148a:	2020      	movs	r0, #32
 800148c:	f001 f9c8 	bl	8002820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001490:	bf00      	nop
 8001492:	3778      	adds	r7, #120	; 0x78
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40005400 	.word	0x40005400
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000400 	.word	0x48000400

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f001 f8ae 	bl	8002608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f810 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff ff00 	bl	80012b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b4:	f000 fa52 	bl	800195c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014b8:	f7ff ff4c 	bl	8001354 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014bc:	f000 fa1e 	bl	80018fc <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014c0:	f005 ff3a 	bl	8007338 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014c4:	f7ff fd4e 	bl	8000f64 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014c8:	f005 ff5a 	bl	8007380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x28>
	...

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b096      	sub	sp, #88	; 0x58
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2244      	movs	r2, #68	; 0x44
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fd1c 	bl	800af1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	463b      	mov	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f6:	f002 ff6f 	bl	80043d8 <HAL_PWREx_ControlVoltageScaling>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001500:	f000 f85a 	bl	80015b8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001504:	f002 ff4a 	bl	800439c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <SystemClock_Config+0xc0>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a20      	ldr	r2, [pc, #128]	; (8001590 <SystemClock_Config+0xc0>)
 8001510:	f023 0318 	bic.w	r3, r3, #24
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001518:	2314      	movs	r3, #20
 800151a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001528:	2360      	movs	r3, #96	; 0x60
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152c:	2302      	movs	r3, #2
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001530:	2301      	movs	r3, #1
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001534:	2301      	movs	r3, #1
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001538:	2310      	movs	r3, #16
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800153c:	2307      	movs	r3, #7
 800153e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4618      	mov	r0, r3
 800154e:	f002 ff99 	bl	8004484 <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001558:	f000 f82e 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155c:	230f      	movs	r3, #15
 800155e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001560:	2303      	movs	r3, #3
 8001562:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fb99 	bl	8004cac <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001580:	f000 f81a 	bl	80015b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001584:	f003 ffde 	bl	8005544 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001588:	bf00      	nop
 800158a:	3758      	adds	r7, #88	; 0x58
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a6:	f001 f847 	bl	8002638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40001000 	.word	0x40001000

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_MspInit+0x4c>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_MspInit+0x4c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_MspInit+0x4c>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_MspInit+0x4c>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_MspInit+0x4c>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	210f      	movs	r1, #15
 80015fe:	f06f 0001 	mvn.w	r0, #1
 8001602:	f001 f8f1 	bl	80027e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_InitTick+0xe0>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <HAL_InitTick+0xe0>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_InitTick+0xe0>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163a:	f107 0210 	add.w	r2, r7, #16
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fcf5 	bl	8005034 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001654:	f003 fcc2 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 8001658:	6378      	str	r0, [r7, #52]	; 0x34
 800165a:	e004      	b.n	8001666 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800165c:	f003 fcbe 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 8001660:	4603      	mov	r3, r0
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_InitTick+0xe4>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3b01      	subs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_InitTick+0xe8>)
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_InitTick+0xec>)
 8001678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_InitTick+0xe8>)
 800167c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001680:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_InitTick+0xe8>)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <HAL_InitTick+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_InitTick+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_InitTick+0xe8>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <HAL_InitTick+0xe8>)
 800169c:	f004 f854 	bl	8005748 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d11b      	bne.n	80016e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016ae:	4813      	ldr	r0, [pc, #76]	; (80016fc <HAL_InitTick+0xe8>)
 80016b0:	f004 f8ac 	bl	800580c <HAL_TIM_Base_Start_IT>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d111      	bne.n	80016e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016c2:	2036      	movs	r0, #54	; 0x36
 80016c4:	f001 f8ac 	bl	8002820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d808      	bhi.n	80016e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	2036      	movs	r0, #54	; 0x36
 80016d4:	f001 f888 	bl	80027e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_InitTick+0xf0>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e002      	b.n	80016e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3738      	adds	r7, #56	; 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	200072ec 	.word	0x200072ec
 8001700:	40001000 	.word	0x40001000
 8001704:	20000090 	.word	0x20000090

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <I2C1_EV_IRQHandler+0x10>)
 800173a:	f001 fd59 	bl	80031f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20007298 	.word	0x20007298

08001748 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <I2C1_ER_IRQHandler+0x10>)
 800174e:	f001 fd69 	bl	8003224 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20007298 	.word	0x20007298

0800175c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <USART1_IRQHandler+0x10>)
 8001762:	f004 fb2b 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000733c 	.word	0x2000733c

08001770 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <TIM6_DAC_IRQHandler+0x10>)
 8001776:	f004 f89d 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200072ec 	.word	0x200072ec

08001784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return 1;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_kill>:

int _kill(int pid, int sig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179e:	f009 fc7b 	bl	800b098 <__errno>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2216      	movs	r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
  return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_exit>:

void _exit (int status)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffe7 	bl	8001794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c6:	e7fe      	b.n	80017c6 <_exit+0x12>

080017c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e00a      	b.n	80017f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017da:	f3af 8000 	nop.w
 80017de:	4601      	mov	r1, r0
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60ba      	str	r2, [r7, #8]
 80017e6:	b2ca      	uxtb	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf0      	blt.n	80017da <_read+0x12>
  }

  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f009 fbfc 	bl	800b098 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20010000 	.word	0x20010000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20007338 	.word	0x20007338
 80018d4:	2000e730 	.word	0x2000e730

080018d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <MX_USART1_UART_Init+0x5c>)
 8001904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_USART1_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_USART1_UART_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_USART1_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_USART1_UART_Init+0x58>)
 8001940:	f004 f964 	bl	8005c0c <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800194a:	f7ff fe35 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000733c 	.word	0x2000733c
 8001958:	40013800 	.word	0x40013800

0800195c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <MX_USART2_UART_Init+0x5c>)
 8001964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART2_UART_Init+0x58>)
 80019a0:	f004 f934 	bl	8005c0c <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019aa:	f7ff fe05 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200073c4 	.word	0x200073c4
 80019b8:	40004400 	.word	0x40004400

080019bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0a0      	sub	sp, #128	; 0x80
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	2254      	movs	r2, #84	; 0x54
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 fa9d 	bl	800af1c <memset>
  if(uartHandle->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <HAL_UART_MspInit+0x158>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d140      	bne.n	8001a6e <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fbad 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a04:	f7ff fdd8 	bl	80015b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a08:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	4a42      	ldr	r2, [pc, #264]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a12:	6613      	str	r3, [r2, #96]	; 0x60
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	4a3c      	ldr	r2, [pc, #240]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a58:	f000 ff7e 	bl	8002958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	2025      	movs	r0, #37	; 0x25
 8001a62:	f000 fec1 	bl	80027e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a66:	2025      	movs	r0, #37	; 0x25
 8001a68:	f000 feda 	bl	8002820 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a6c:	e04d      	b.n	8001b0a <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_UART_MspInit+0x160>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d148      	bne.n	8001b0a <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 fb67 	bl	8005158 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001a90:	f7ff fd92 	bl	80015b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <HAL_UART_MspInit+0x15c>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ac4:	2304      	movs	r3, #4
 8001ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f000 ff39 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001af8:	2303      	movs	r3, #3
 8001afa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f000 ff27 	bl	8002958 <HAL_GPIO_Init>
}
 8001b0a:	bf00      	nop
 8001b0c:	3780      	adds	r7, #128	; 0x80
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40013800 	.word	0x40013800
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40004400 	.word	0x40004400

08001b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b24:	f7ff fed8 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopForever+0xe>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopForever+0x16>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f009 faa9 	bl	800b0a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b52:	f7ff fca7 	bl	80014a4 <main>

08001b56 <LoopForever>:

LoopForever:
    b LoopForever
 8001b56:	e7fe      	b.n	8001b56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001b64:	0800d74c 	.word	0x0800d74c
  ldr r2, =_sbss
 8001b68:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8001b6c:	2000e730 	.word	0x2000e730

08001b70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_IRQHandler>

08001b72 <calculate_pressure>:
 * @param	uint8_t pr_lsb ... The LSB, only bits 7-4 are used, the last two for the fractional part.
 * @param	uint8_t pr_csb ... The CSB.
 * @param	uint8_t pr_msb ... The MSB.
 * @retval 	(float) ... The pressure value in Pa.
 */
float calculate_pressure (uint8_t pr_lsb, uint8_t pr_csb, uint8_t pr_msb) {
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	71bb      	strb	r3, [r7, #6]
 8001b80:	4613      	mov	r3, r2
 8001b82:	717b      	strb	r3, [r7, #5]
	float pressure = 0;
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
	int32_t pressure_int = -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	60bb      	str	r3, [r7, #8]

	// Fractional part
	if ((pr_lsb & 0x20) > 0) {
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dd07      	ble.n	8001baa <calculate_pressure+0x38>
		pressure += 0.5;
 8001b9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba6:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if ((pr_lsb & 0x10) > 0) {
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd07      	ble.n	8001bc4 <calculate_pressure+0x52>
		pressure += 0.25;
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Integer part
	pressure_int = (int32_t)pr_msb;
 8001bc4:	797b      	ldrb	r3, [r7, #5]
 8001bc6:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int << 16;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	60bb      	str	r3, [r7, #8]

	pressure_int = pressure_int | ((int32_t)pr_csb << 8);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int | (int32_t)pr_lsb;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int / 64;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da00      	bge.n	8001be8 <calculate_pressure+0x76>
 8001be6:	333f      	adds	r3, #63	; 0x3f
 8001be8:	119b      	asrs	r3, r3, #6
 8001bea:	60bb      	str	r3, [r7, #8]

	pressure += (float)pressure_int;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	edc7 7a03 	vstr	s15, [r7, #12]

	return pressure;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ee07 3a90 	vmov	s15, r3
}
 8001c08:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <calculate_temperature>:
 * 			In the application, however, only one decimal place is used.
 * @param	uint8_t temp_lsb ... The LSB, only bits 7-4 are used, all of them for the fractional part.
 * @param	uint8_t temp_msb ... The MSB, used for the integer part.
 * @retval 	(float) ... The temperature value in °C.
 */
float calculate_temperature (uint8_t temp_lsb, uint8_t temp_msb) {
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460a      	mov	r2, r1
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	4613      	mov	r3, r2
 8001c24:	71bb      	strb	r3, [r7, #6]
	float temp = 0;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
	int32_t temp_int = -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	60bb      	str	r3, [r7, #8]
    temp_int = temp_int & (temp_msb << 8);
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
    temp_int = temp_int | (int32_t)temp_lsb;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]

    temp_int = temp_int*10/256;
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da00      	bge.n	8001c54 <calculate_temperature+0x3e>
 8001c52:	33ff      	adds	r3, #255	; 0xff
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	60bb      	str	r3, [r7, #8]
    temp = (float)temp_int/10;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c62:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6a:	edc7 7a03 	vstr	s15, [r7, #12]
    return temp;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	ee07 3a90 	vmov	s15, r3
}
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <calculate_altitude>:
 * @param	uint8_t alt_lsb ... The LSB, only bits 7-4 are used.
 * @param	uint8_t alt_csb ... The CSB.
 * @param	uint8_t alt_msb ... The MSB.
 * @retval 	(float) ... The altitude value in m.
 */
float calculate_altitude (uint8_t alt_lsb, uint8_t alt_csb, uint8_t alt_msb) {
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	float altitude = 0;
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
	int32_t altitude_int = -1;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	60bb      	str	r3, [r7, #8]

    altitude_int = ((int32_t)alt_msb << 24);
 8001ca2:	797b      	ldrb	r3, [r7, #5]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	60bb      	str	r3, [r7, #8]
    altitude_int = altitude_int | ((int32_t)alt_csb << 16);
 8001ca8:	79bb      	ldrb	r3, [r7, #6]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
    altitude_int = altitude_int | ((int32_t)alt_lsb << 8);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
    altitude = (float)altitude_int/6553500;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ce8 <calculate_altitude+0x64>
 8001cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cce:	edc7 7a03 	vstr	s15, [r7, #12]

    return altitude;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	ee07 3a90 	vmov	s15, r3
}
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	4ac7ff38 	.word	0x4ac7ff38

08001cec <read_data>:
 * @retval 	(HAL_StatusTypeDef) ... If one of the reads were unsuccessful, return of HAL error code.
 *
 */
HAL_StatusTypeDef read_data(I2C_HandleTypeDef *hi2c1, uint8_t *low_byte,
		uint8_t *high_byte, uint8_t *higher_byte, uint8_t *temp_lsb,
		uint8_t *temp_msb) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af04      	add	r7, sp, #16
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]

	// Altitude/Pressure data
	if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x03, 1, low_byte, 1, HAL_MAX_DELAY)
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2301      	movs	r3, #1
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	21c0      	movs	r1, #192	; 0xc0
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f001 f952 	bl	8002fbc <HAL_I2C_Mem_Read>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <read_data+0x36>
			!= HAL_OK) {
		retval = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
	}

	if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x02, 1, high_byte, 1, HAL_MAX_DELAY)
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	2202      	movs	r2, #2
 8001d34:	21c0      	movs	r1, #192	; 0xc0
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f001 f940 	bl	8002fbc <HAL_I2C_Mem_Read>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <read_data+0x5a>
			!= HAL_OK) {
		retval = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
	}

	if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x01, 1, higher_byte, 1, HAL_MAX_DELAY)
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2301      	movs	r3, #1
 8001d56:	2201      	movs	r2, #1
 8001d58:	21c0      	movs	r1, #192	; 0xc0
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f001 f92e 	bl	8002fbc <HAL_I2C_Mem_Read>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <read_data+0x7e>
			!= HAL_OK)
		retval = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]

	// Temperature data
	if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x04, 1, temp_msb, 1, HAL_MAX_DELAY)
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	2301      	movs	r3, #1
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	21c0      	movs	r1, #192	; 0xc0
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f001 f91c 	bl	8002fbc <HAL_I2C_Mem_Read>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <read_data+0xa2>
			!= HAL_OK) {
		retval = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
	}

	if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x05, 1, temp_lsb, 1, HAL_MAX_DELAY)
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	9302      	str	r3, [sp, #8]
 8001d94:	2301      	movs	r3, #1
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2205      	movs	r2, #5
 8001da0:	21c0      	movs	r1, #192	; 0xc0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f001 f90a 	bl	8002fbc <HAL_I2C_Mem_Read>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <read_data+0xc6>
			!= HAL_OK) {
		retval = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
	}

	return retval;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	0000      	movs	r0, r0
	...

08001dc0 <calibration>:
 *
 * 			Disclaimer: Structure of calibration was inspired by Mikroe's example code.
 * @param	I2C_HandleTypeDef *hi2c1 ... The I2C interface's handle.
 * @retval 	(HAL_StatusTypeDef) ... Returns HAL error in case one operation was unsuccessful.
 */
HAL_StatusTypeDef calibration (I2C_HandleTypeDef *hi2c1) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	6078      	str	r0, [r7, #4]
	uint8_t pr_lsb, pr_csb, pr_msb;
    uint8_t temp_msb, temp_lsb;
	uint8_t data;
	float calibration_pressure = 0;
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
	float sea_pressure, current_pressure;
	HAL_StatusTypeDef retval;

	  // Altitude offset set to 0
	  data = 0x00;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	72bb      	strb	r3, [r7, #10]
	  retval = HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x2D, 1, &data, 1, HAL_MAX_DELAY);
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	f107 030a 	add.w	r3, r7, #10
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	222d      	movs	r2, #45	; 0x2d
 8001de6:	21c0      	movs	r1, #192	; 0xc0
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 ffd3 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001dee:	4603      	mov	r3, r0
 8001df0:	76fb      	strb	r3, [r7, #27]

	  // Take 8 samples of pressure value
	  for (uint8_t i = 0; i < 8; i++) {
 8001df2:	2300      	movs	r3, #0
 8001df4:	76bb      	strb	r3, [r7, #26]
 8001df6:	e053      	b.n	8001ea0 <calibration+0xe0>

	    //  data: barometer, on, immediate measurement
	    data = 0x3B;
 8001df8:	233b      	movs	r3, #59	; 0x3b
 8001dfa:	72bb      	strb	r3, [r7, #10]
	    if (HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY)!= HAL_OK) {
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	2301      	movs	r3, #1
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	f107 030a 	add.w	r3, r7, #10
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2226      	movs	r2, #38	; 0x26
 8001e10:	21c0      	movs	r1, #192	; 0xc0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 ffbe 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <calibration+0x62>
	    	retval = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	76fb      	strb	r3, [r7, #27]
	    }

	    // data: barometer, on, oversampling bit cleared
	    data = 0x39;
 8001e22:	2339      	movs	r3, #57	; 0x39
 8001e24:	72bb      	strb	r3, [r7, #10]
	    if (HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	f107 030a 	add.w	r3, r7, #10
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2301      	movs	r3, #1
 8001e38:	2226      	movs	r2, #38	; 0x26
 8001e3a:	21c0      	movs	r1, #192	; 0xc0
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 ffa9 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <calibration+0x8c>
	    	retval = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	76fb      	strb	r3, [r7, #27]
	    }

	    // Wait for sensor
	    osDelay(CALIBRATE_DELAY);
 8001e4c:	f240 2026 	movw	r0, #550	; 0x226
 8001e50:	f005 fb4e 	bl	80074f0 <osDelay>

	    // Take sample
	    if (read_data (hi2c1, &pr_lsb, &pr_csb, &pr_msb, &temp_lsb, &temp_msb) != HAL_OK) {
 8001e54:	f107 000d 	add.w	r0, r7, #13
 8001e58:	f107 020e 	add.w	r2, r7, #14
 8001e5c:	f107 010f 	add.w	r1, r7, #15
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f107 030b 	add.w	r3, r7, #11
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff3c 	bl	8001cec <read_data>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <calibration+0xbe>
	    	return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06e      	b.n	8001f5c <calibration+0x19c>
	    }
	    calibration_pressure += calculate_pressure(pr_lsb, pr_csb, pr_msb);
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	7bb9      	ldrb	r1, [r7, #14]
 8001e82:	7b7a      	ldrb	r2, [r7, #13]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe74 	bl	8001b72 <calculate_pressure>
 8001e8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e96:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t i = 0; i < 8; i++) {
 8001e9a:	7ebb      	ldrb	r3, [r7, #26]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	76bb      	strb	r3, [r7, #26]
 8001ea0:	7ebb      	ldrb	r3, [r7, #26]
 8001ea2:	2b07      	cmp	r3, #7
 8001ea4:	d9a8      	bls.n	8001df8 <calibration+0x38>
	  }

	  current_pressure = calibration_pressure / 8;
 8001ea6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eaa:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb2:	edc7 7a05 	vstr	s15, [r7, #20]

	  // Calculate barometric pressure at mean sea level based on a starting altitude
	  sea_pressure = current_pressure /pow(1-START_ALTITUDE*0.0000225577, 5.255877);
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7fe fb56 	bl	8000568 <__aeabi_f2d>
 8001ebc:	a32a      	add	r3, pc, #168	; (adr r3, 8001f68 <calibration+0x1a8>)
 8001ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec2:	f7fe fcd3 	bl	800086c <__aeabi_ddiv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fe7b 	bl	8000bc8 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]

	  // Calibrate the sensor according to the sea level pressure for the current measurement location
	  data = (uint8_t)(sea_pressure / 2) >> 8;
 8001ed6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eda:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee6:	edc7 7a00 	vstr	s15, [r7]
 8001eea:	783b      	ldrb	r3, [r7, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	121b      	asrs	r3, r3, #8
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	72bb      	strb	r3, [r7, #10]
	  if (HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x14, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2301      	movs	r3, #1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	f107 030a 	add.w	r3, r7, #10
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	2214      	movs	r2, #20
 8001f08:	21c0      	movs	r1, #192	; 0xc0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 ff42 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <calibration+0x15a>
		  retval = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	76fb      	strb	r3, [r7, #27]
	  }
	  data = (uint8_t)(sea_pressure / 2) & 0xFF;
 8001f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2a:	edc7 7a00 	vstr	s15, [r7]
 8001f2e:	783b      	ldrb	r3, [r7, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	72bb      	strb	r3, [r7, #10]
	  if (HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x15, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	9302      	str	r3, [sp, #8]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	f107 030a 	add.w	r3, r7, #10
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2301      	movs	r3, #1
 8001f46:	2215      	movs	r2, #21
 8001f48:	21c0      	movs	r1, #192	; 0xc0
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 ff22 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <calibration+0x19a>
		  retval = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	76fb      	strb	r3, [r7, #27]
	  }

return retval;
 8001f5a:	7efb      	ldrb	r3, [r7, #27]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	f3af 8000 	nop.w
 8001f68:	cb8dea1a 	.word	0xcb8dea1a
 8001f6c:	3fef5c3a 	.word	0x3fef5c3a

08001f70 <altitude_read>:
 * @param	I2C_HandleTypeDef *hi2c1 ... The I2C interface's handle.
 * @param	osMessageQueueId_t data_queueHandle ... Msg queue for altitude data.
 * @retval 	(HAL_StatusTypeDef) ... Returns HAL error in case one operation was unsuccessful.
 */
HAL_StatusTypeDef altitude_read(I2C_HandleTypeDef *hi2c1,
		osMessageQueueId_t data_queueHandle) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
	uint8_t data, alt_lsb, alt_csb, alt_msb, temp_lsb, temp_msb;
	float altitude;
	HAL_StatusTypeDef retval;

	// data: altimeter mode
	data = 0xBB;
 8001f7a:	23bb      	movs	r3, #187	; 0xbb
 8001f7c:	73fb      	strb	r3, [r7, #15]
	retval = HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY);
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	2301      	movs	r3, #1
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	f107 030f 	add.w	r3, r7, #15
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2301      	movs	r3, #1
 8001f90:	2226      	movs	r2, #38	; 0x26
 8001f92:	21c0      	movs	r1, #192	; 0xc0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fefd 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
	if (read_data(hi2c1, &alt_lsb, &alt_csb, &alt_msb, &temp_lsb,
 8001f9e:	f107 000c 	add.w	r0, r7, #12
 8001fa2:	f107 020d 	add.w	r2, r7, #13
 8001fa6:	f107 010e 	add.w	r1, r7, #14
 8001faa:	f107 030a 	add.w	r3, r7, #10
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	f107 030b 	add.w	r3, r7, #11
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fe97 	bl	8001cec <read_data>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <altitude_read+0x58>
			&temp_msb) != HAL_OK) {
		retval = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
	}
	altitude = calculate_altitude(alt_lsb, alt_csb, alt_msb);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	7b79      	ldrb	r1, [r7, #13]
 8001fcc:	7b3a      	ldrb	r2, [r7, #12]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fe58 	bl	8001c84 <calculate_altitude>
 8001fd4:	ed87 0a04 	vstr	s0, [r7, #16]

	data_in_queue("ALT", altitude, data_queueHandle);
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	ed97 0a04 	vldr	s0, [r7, #16]
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <altitude_read+0xa8>)
 8001fe0:	f000 f81c 	bl	800201c <data_in_queue>

	// data: pressure mode
	data = 0x39;
 8001fe4:	2339      	movs	r3, #57	; 0x39
 8001fe6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	f107 030f 	add.w	r3, r7, #15
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2226      	movs	r2, #38	; 0x26
 8001ffc:	21c0      	movs	r1, #192	; 0xc0
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fec8 	bl	8002d94 <HAL_I2C_Mem_Write>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <altitude_read+0x9e>
		retval = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
	}

	return retval;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	0800d1d0 	.word	0x0800d1d0

0800201c <data_in_queue>:
 * @param	char *mode ... P, TP, ALT for pressure/temperature/altitude data.
 * @param	float value ... Measured value .
 * @param	osMessageQueueId_t data_queueHandle ... Msg queue for pressure/temperature/altitude data.
 * @retval ... None.
 */
void data_in_queue (char *mode, float value, osMessageQueueId_t data_queueHandle) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	ed87 0a02 	vstr	s0, [r7, #8]
 8002028:	6079      	str	r1, [r7, #4]
	message msg;
    strcpy(msg.mode, mode);
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	68f9      	ldr	r1, [r7, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f009 f85d 	bl	800b0f0 <strcpy>
    msg.value = value;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	617b      	str	r3, [r7, #20]
    osMessageQueuePut(data_queueHandle, &msg, 0, osWaitForever);
 800203a:	f107 0110 	add.w	r1, r7, #16
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	2200      	movs	r2, #0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f005 fae1 	bl	800760c <osMessageQueuePut>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <__io_putchar>:
 *          access is not available, and UART is commonly used for logs and debugging output.
 * @param   int ch ... Character to be transmitted.
 * @retval  (int) ... Return character.
 */
int __io_putchar(int ch)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	int ret;
	while ((ret=HAL_UART_GetState(&huart2)) == HAL_UART_STATE_BUSY_TX)
 800205c:	bf00      	nop
 800205e:	4811      	ldr	r0, [pc, #68]	; (80020a4 <__io_putchar+0x50>)
 8002060:	f004 f9b4 	bl	80063cc <HAL_UART_GetState>
 8002064:	4603      	mov	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b21      	cmp	r3, #33	; 0x21
 800206c:	d0f7      	beq.n	800205e <__io_putchar+0xa>
		;

	if (ch == '\n')
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0a      	cmp	r3, #10
 8002072:	d107      	bne.n	8002084 <__io_putchar+0x30>
	{
		static uint8_t buf[2] = { '\r', '\n' };
		HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 8002074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002078:	2202      	movs	r2, #2
 800207a:	490b      	ldr	r1, [pc, #44]	; (80020a8 <__io_putchar+0x54>)
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <__io_putchar+0x50>)
 800207e:	f003 fe13 	bl	8005ca8 <HAL_UART_Transmit>
 8002082:	e00a      	b.n	800209a <__io_putchar+0x46>
	}
	else
	{
		static char buf;
		buf = ch;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <__io_putchar+0x58>)
 800208a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, 1, 1000);
 800208c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002090:	2201      	movs	r2, #1
 8002092:	4906      	ldr	r1, [pc, #24]	; (80020ac <__io_putchar+0x58>)
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <__io_putchar+0x50>)
 8002096:	f003 fe07 	bl	8005ca8 <HAL_UART_Transmit>
	}
	return ch;
 800209a:	687b      	ldr	r3, [r7, #4]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200073c4 	.word	0x200073c4
 80020a8:	20000014 	.word	0x20000014
 80020ac:	2000744c 	.word	0x2000744c

080020b0 <_write>:
 * @param   char *ptr ... ptr to data array
 * @param   int len ... length of data to be transmitted (in byte)
 * @retval  (int) ... Return length in byte.
 */
int _write(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e009      	b.n	80020d6 <_write+0x26>
		__io_putchar(*ptr++);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ffc2 	bl	8002054 <__io_putchar>
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <_write+0x12>
	}
	return len;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <check_for_buffer_overflow>:
 *
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @return bool true if buffer overflow. Otherwise, false.
 */
bool check_for_buffer_overflow(UART_HandleTypeDef *huart) {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	return __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <clear_buffer_overflow>:
 *
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @return void. This function does not return a value.
 */
void clear_buffer_overflow(UART_HandleTypeDef *huart) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_OREFLAG(huart);//Is cleared without notice
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	621a      	str	r2, [r3, #32]
	//Discard the received data
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	8b1b      	ldrh	r3, [r3, #24]
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 0208 	orr.w	r2, r2, #8
 8002130:	b292      	uxth	r2, r2
 8002132:	831a      	strh	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_UARTEx_RxEventCallback>:
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @param uint16_t size A variable which holds the number of data available by the UART interface.
 * @return void. This function does not return a value.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_UARTEx_RxEventCallback+0x68>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d11f      	bne.n	8002196 <HAL_UARTEx_RxEventCallback+0x56>

		if(check_for_buffer_overflow(huart)) {
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffc6 	bl	80020e8 <check_for_buffer_overflow>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_UARTEx_RxEventCallback+0x3a>
			printf("overflow happened\r\n");
 8002162:	4812      	ldr	r0, [pc, #72]	; (80021ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8002164:	f008 fdc6 	bl	800acf4 <puts>
			clear_buffer_overflow(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ffd1 	bl	8002110 <clear_buffer_overflow>
			// The only contribution of this project's author (used for debugging):
			memcpy(uart_buffer, UART_OVERFLOW, strlen(UART_OVERFLOW));
 800216e:	220d      	movs	r2, #13
 8002170:	490f      	ldr	r1, [pc, #60]	; (80021b0 <HAL_UARTEx_RxEventCallback+0x70>)
 8002172:	4810      	ldr	r0, [pc, #64]	; (80021b4 <HAL_UARTEx_RxEventCallback+0x74>)
 8002174:	f008 ffc4 	bl	800b100 <memcpy>
 8002178:	e008      	b.n	800218c <HAL_UARTEx_RxEventCallback+0x4c>
		} else {

			memcpy(uart_buffer, rxBuffer_uart_1, size);
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	461a      	mov	r2, r3
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_UARTEx_RxEventCallback+0x78>)
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <HAL_UARTEx_RxEventCallback+0x74>)
 8002182:	f008 ffbd 	bl	800b100 <memcpy>

			is_uart_success = true;
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_UARTEx_RxEventCallback+0x7c>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
		}
		memset(rxBuffer_uart_1, 0, MAX_BUFFER_SIZE);
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	2100      	movs	r1, #0
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_UARTEx_RxEventCallback+0x78>)
 8002192:	f008 fec3 	bl	800af1c <memset>
	}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuffer_uart_1, MAX_BUFFER_SIZE);
 8002196:	22ff      	movs	r2, #255	; 0xff
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <HAL_UARTEx_RxEventCallback+0x78>)
 800219a:	4809      	ldr	r0, [pc, #36]	; (80021c0 <HAL_UARTEx_RxEventCallback+0x80>)
 800219c:	f005 f838 	bl	8007210 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40013800 	.word	0x40013800
 80021ac:	0800d1d4 	.word	0x0800d1d4
 80021b0:	0800d1e8 	.word	0x0800d1e8
 80021b4:	20007550 	.word	0x20007550
 80021b8:	20007450 	.word	0x20007450
 80021bc:	2000764f 	.word	0x2000764f
 80021c0:	2000733c 	.word	0x2000733c

080021c4 <send_wifi_command>:
 * @param uint8_t *cmd A pointer to the stored command data.
 * @param uint8_t cmd_size The size in bytes of the to be transfered CMD
 *
 * @return HAL_StatusTypeDef This function returns the status code of the HAL_UART_Transmit function.
 */
HAL_StatusTypeDef send_wifi_command(uint8_t* cmd, uint8_t cmd_size) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart1, cmd, cmd_size, HAL_MAX_DELAY);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <send_wifi_command+0x3c>)
 80021dc:	f003 fd64 	bl	8005ca8 <HAL_UART_Transmit>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK) {
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <send_wifi_command+0x32>
		printf("Sending %s failed with %d\r\n", cmd, result);
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	461a      	mov	r2, r3
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <send_wifi_command+0x40>)
 80021f2:	f008 fd19 	bl	800ac28 <iprintf>
	}
	return result;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	2000733c 	.word	0x2000733c
 8002204:	0800d1f8 	.word	0x0800d1f8

08002208 <receive_wifi_command>:
 * @param uint8_t *cmd A pointer to the stored command data.
 *
 * @retval (bool) ... Returns true if a message has been received via uart,
 * 					  false in case of no message.
 */
bool receive_wifi_command(uint8_t* cmd) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	osDelay(400);
 8002210:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002214:	f005 f96c 	bl	80074f0 <osDelay>
	if(is_uart_success == true) {
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <receive_wifi_command+0x64>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01b      	beq.n	800225a <receive_wifi_command+0x52>
		printf("\r\nReceived from %s\r\n", cmd);
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4812      	ldr	r0, [pc, #72]	; (8002270 <receive_wifi_command+0x68>)
 8002226:	f008 fcff 	bl	800ac28 <iprintf>
		printf("%s\r\n", uart_buffer);
 800222a:	4912      	ldr	r1, [pc, #72]	; (8002274 <receive_wifi_command+0x6c>)
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <receive_wifi_command+0x70>)
 800222e:	f008 fcfb 	bl	800ac28 <iprintf>
		if (strcmp((char*)uart_buffer, "OK") == 0) {
 8002232:	4912      	ldr	r1, [pc, #72]	; (800227c <receive_wifi_command+0x74>)
 8002234:	480f      	ldr	r0, [pc, #60]	; (8002274 <receive_wifi_command+0x6c>)
 8002236:	f7fd ffcb 	bl	80001d0 <strcmp>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <receive_wifi_command+0x3e>
			no_tcp_connection = true;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <receive_wifi_command+0x78>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
		}
		memset(uart_buffer, 0, MAX_BUFFER_SIZE);
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	2100      	movs	r1, #0
 800224a:	480a      	ldr	r0, [pc, #40]	; (8002274 <receive_wifi_command+0x6c>)
 800224c:	f008 fe66 	bl	800af1c <memset>
	}
	else {
		printf("\r\nReceiving %s failed\r\n", cmd);
		return false;
	}
	is_uart_success = false;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <receive_wifi_command+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	return true;
 8002256:	2301      	movs	r3, #1
 8002258:	e004      	b.n	8002264 <receive_wifi_command+0x5c>
		printf("\r\nReceiving %s failed\r\n", cmd);
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4809      	ldr	r0, [pc, #36]	; (8002284 <receive_wifi_command+0x7c>)
 800225e:	f008 fce3 	bl	800ac28 <iprintf>
		return false;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000764f 	.word	0x2000764f
 8002270:	0800d214 	.word	0x0800d214
 8002274:	20007550 	.word	0x20007550
 8002278:	0800d22c 	.word	0x0800d22c
 800227c:	0800d234 	.word	0x0800d234
 8002280:	20000281 	.word	0x20000281
 8002284:	0800d238 	.word	0x0800d238

08002288 <send_TCP_command>:
 * @param const char* command A pointer to the stored command data.
 *
 * @retval (HAL_StatusTypeDef) ... Returns HAL error in case one transmitting
 * 								   operation has been unsuccessful.
 */
HAL_StatusTypeDef send_TCP_command(const char* command) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	char buffer[16];
	HAL_StatusTypeDef result;
	snprintf(buffer, sizeof(buffer), "AT+CIPSEND=%d\r\n", strlen(command));
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7fd fffd 	bl	8000290 <strlen>
 8002296:	4603      	mov	r3, r0
 8002298:	f107 000c 	add.w	r0, r7, #12
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <send_TCP_command+0x8c>)
 800229e:	2110      	movs	r1, #16
 80022a0:	f008 fd30 	bl	800ad04 <sniprintf>
	result = HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fd fff1 	bl	8000290 <strlen>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	f107 010c 	add.w	r1, r7, #12
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	4817      	ldr	r0, [pc, #92]	; (8002318 <send_TCP_command+0x90>)
 80022bc:	f003 fcf4 	bl	8005ca8 <HAL_UART_Transmit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <send_TCP_command+0x46>
		return result;
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
 80022cc:	e01e      	b.n	800230c <send_TCP_command+0x84>
	}
	osDelay(SECOND);  // Delay for CIPSEND ready signal
 80022ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d2:	f005 f90d 	bl	80074f0 <osDelay>
	result = HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fd ffda 	bl	8000290 <strlen>
 80022dc:	4603      	mov	r3, r0
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <send_TCP_command+0x90>)
 80022e8:	f003 fcde 	bl	8005ca8 <HAL_UART_Transmit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	77fb      	strb	r3, [r7, #31]
	if (!receive_wifi_command((uint8_t*)buffer)) {
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff87 	bl	8002208 <receive_wifi_command>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <send_TCP_command+0x82>
		result = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	77fb      	strb	r3, [r7, #31]
	}
	return result;
 800230a:	7ffb      	ldrb	r3, [r7, #31]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800d250 	.word	0x0800d250
 8002318:	2000733c 	.word	0x2000733c

0800231c <check_wifi_response>:
 *
 * @param uint8_t* response A pointer to a buffer which holds the response message of the wifi-click.
 *
 * @retval 	(bool) ... Returns false in case no message has been received.
 */
bool check_wifi_response(uint8_t* response){
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	bool result = true;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
	osDelay(200);
 8002328:	20c8      	movs	r0, #200	; 0xc8
 800232a:	f005 f8e1 	bl	80074f0 <osDelay>
	if(is_uart_success == true) {
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <check_wifi_response+0x5c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <check_wifi_response+0x42>
		printf("\r\nReceived %s\r\n", uart_buffer);
 8002338:	4910      	ldr	r1, [pc, #64]	; (800237c <check_wifi_response+0x60>)
 800233a:	4811      	ldr	r0, [pc, #68]	; (8002380 <check_wifi_response+0x64>)
 800233c:	f008 fc74 	bl	800ac28 <iprintf>
		memcpy(response,uart_buffer, strlen((char*)uart_buffer));
 8002340:	480e      	ldr	r0, [pc, #56]	; (800237c <check_wifi_response+0x60>)
 8002342:	f7fd ffa5 	bl	8000290 <strlen>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	490c      	ldr	r1, [pc, #48]	; (800237c <check_wifi_response+0x60>)
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f008 fed7 	bl	800b100 <memcpy>
		memset(uart_buffer, 0, MAX_BUFFER_SIZE);
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	2100      	movs	r1, #0
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <check_wifi_response+0x60>)
 8002358:	f008 fde0 	bl	800af1c <memset>
 800235c:	e004      	b.n	8002368 <check_wifi_response+0x4c>
	}
	else {
		result = false;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
		printf("\r\nReceiving failed\r\n");
 8002362:	4808      	ldr	r0, [pc, #32]	; (8002384 <check_wifi_response+0x68>)
 8002364:	f008 fcc6 	bl	800acf4 <puts>
	}
	is_uart_success = false;
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <check_wifi_response+0x5c>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
	return result;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	2000764f 	.word	0x2000764f
 800237c:	20007550 	.word	0x20007550
 8002380:	0800d260 	.word	0x0800d260
 8002384:	0800d270 	.word	0x0800d270

08002388 <wifi_init_stage_and_TCP_check>:
 * 			This function checks for errors.
 * @param 	uint8_t* cmd ... WIFI command.
 * @retval 	(bool) ... returns true in case command has been sent, false
 * 						in case of unsuccessful operation.
 */
bool wifi_init_stage_and_TCP_check(uint8_t* cmd) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	bool result = true;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
	if (send_wifi_command(cmd, strlen((char*)cmd)) == HAL_OK) {
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fd ff7b 	bl	8000290 <strlen>
 800239a:	4603      	mov	r3, r0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff0f 	bl	80021c4 <send_wifi_command>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10f      	bne.n	80023cc <wifi_init_stage_and_TCP_check+0x44>
		printf("%s sent\n", cmd);
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <wifi_init_stage_and_TCP_check+0x54>)
 80023b0:	f008 fc3a 	bl	800ac28 <iprintf>
		if (!receive_wifi_command(cmd)) {
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff27 	bl	8002208 <receive_wifi_command>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f083 0301 	eor.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <wifi_init_stage_and_TCP_check+0x48>
			result = false;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
 80023ca:	e001      	b.n	80023d0 <wifi_init_stage_and_TCP_check+0x48>
		}
	} else {
		result = false;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	0800d284 	.word	0x0800d284

080023e0 <wifi_init>:
 * 			program will not be stuck in the TCP connection check loop.
 * @retval 	(bool) ... Sending the config messages of each stage is checked as
 * 					   well as TCP connection. Returns false in case of
 * 					   error, true in case of success.
 */
bool wifi_init() {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0c2      	sub	sp, #264	; 0x108
 80023e4:	af00      	add	r7, sp, #0
	bool success_check = false;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	bool response_check = false;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t response_buffer[MAX_BUFFER_SIZE];
	uint8_t i;

	clear_buffer_overflow(&huart1);
 80023f2:	484d      	ldr	r0, [pc, #308]	; (8002528 <wifi_init+0x148>)
 80023f4:	f7ff fe8c 	bl	8002110 <clear_buffer_overflow>
	clear_buffer_overflow(&huart2);
 80023f8:	484c      	ldr	r0, [pc, #304]	; (800252c <wifi_init+0x14c>)
 80023fa:	f7ff fe89 	bl	8002110 <clear_buffer_overflow>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuffer_uart_1, MAX_BUFFER_SIZE);
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	494b      	ldr	r1, [pc, #300]	; (8002530 <wifi_init+0x150>)
 8002402:	4849      	ldr	r0, [pc, #292]	; (8002528 <wifi_init+0x148>)
 8002404:	f004 ff04 	bl	8007210 <HAL_UARTEx_ReceiveToIdle_IT>

	do {
		success_check = wifi_init_stage_and_TCP_check(restore_factory);
 8002408:	484a      	ldr	r0, [pc, #296]	; (8002534 <wifi_init+0x154>)
 800240a:	f7ff ffbd 	bl	8002388 <wifi_init_stage_and_TCP_check>
 800240e:	4603      	mov	r3, r0
 8002410:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	} while (!success_check);
 8002414:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f2      	bne.n	8002408 <wifi_init+0x28>
	osDelay(3 * WIFI_DELAY);
 8002422:	f643 2098 	movw	r0, #15000	; 0x3a98
 8002426:	f005 f863 	bl	80074f0 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(rst_cmd);
 800242a:	4843      	ldr	r0, [pc, #268]	; (8002538 <wifi_init+0x158>)
 800242c:	f7ff ffac 	bl	8002388 <wifi_init_stage_and_TCP_check>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	} while (!success_check);
 8002436:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f2      	bne.n	800242a <wifi_init+0x4a>
	osDelay(WIFI_DELAY);
 8002444:	f241 3088 	movw	r0, #5000	; 0x1388
 8002448:	f005 f852 	bl	80074f0 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(set_cwmode_cmd);
 800244c:	483b      	ldr	r0, [pc, #236]	; (800253c <wifi_init+0x15c>)
 800244e:	f7ff ff9b 	bl	8002388 <wifi_init_stage_and_TCP_check>
 8002452:	4603      	mov	r3, r0
 8002454:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	} while (!success_check);
 8002458:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800245c:	f083 0301 	eor.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f2      	bne.n	800244c <wifi_init+0x6c>
	osDelay(WIFI_DELAY);
 8002466:	f241 3088 	movw	r0, #5000	; 0x1388
 800246a:	f005 f841 	bl	80074f0 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(connect_to_ap);
 800246e:	4834      	ldr	r0, [pc, #208]	; (8002540 <wifi_init+0x160>)
 8002470:	f7ff ff8a 	bl	8002388 <wifi_init_stage_and_TCP_check>
 8002474:	4603      	mov	r3, r0
 8002476:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
	} while (!success_check);
 800247a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f2      	bne.n	800246e <wifi_init+0x8e>
	osDelay(4 * WIFI_DELAY);
 8002488:	f644 6020 	movw	r0, #20000	; 0x4e20
 800248c:	f005 f830 	bl	80074f0 <osDelay>

	i = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	while (!response_check) {
 8002496:	e036      	b.n	8002506 <wifi_init+0x126>
		if (i >= RETRY) {
 8002498:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800249c:	2b09      	cmp	r3, #9
 800249e:	d901      	bls.n	80024a4 <wifi_init+0xc4>
			return false;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e03c      	b.n	800251e <wifi_init+0x13e>
		}
		if (send_wifi_command(connect_to_TCP, ARRAY_SIZE(connect_to_TCP))
 80024a4:	2127      	movs	r1, #39	; 0x27
 80024a6:	4827      	ldr	r0, [pc, #156]	; (8002544 <wifi_init+0x164>)
 80024a8:	f7ff fe8c 	bl	80021c4 <send_wifi_command>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d120      	bne.n	80024f4 <wifi_init+0x114>
				== HAL_OK) {
			if (!check_wifi_response(response_buffer)) {
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <check_wifi_response>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f083 0301 	eor.w	r3, r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <wifi_init+0xf2>
				i++;
 80024c6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80024ca:	3301      	adds	r3, #1
 80024cc:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				continue;
 80024d0:	e019      	b.n	8002506 <wifi_init+0x126>
			}
			if (strstr((char*) response_buffer, "CONNECT")) {
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <wifi_init+0x168>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f008 fd28 	bl	800af2c <strstr>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <wifi_init+0x114>
				response_check = true;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				memset(response_buffer, 0, MAX_BUFFER_SIZE);
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f008 fd14 	bl	800af1c <memset>
			}
		}
		osDelay(SECOND);
 80024f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f8:	f004 fffa 	bl	80074f0 <osDelay>
		i++;
 80024fc:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002500:	3301      	adds	r3, #1
 8002502:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	while (!response_check) {
 8002506:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1c1      	bne.n	8002498 <wifi_init+0xb8>
	}
	no_tcp_connection = false;
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <wifi_init+0x16c>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]

	return success_check;
 800251a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
}
 800251e:	4618      	mov	r0, r3
 8002520:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000733c 	.word	0x2000733c
 800252c:	200073c4 	.word	0x200073c4
 8002530:	20007450 	.word	0x20007450
 8002534:	20000018 	.word	0x20000018
 8002538:	20000028 	.word	0x20000028
 800253c:	20000034 	.word	0x20000034
 8002540:	20000044 	.word	0x20000044
 8002544:	20000068 	.word	0x20000068
 8002548:	0800d290 	.word	0x0800d290
 800254c:	20000281 	.word	0x20000281

08002550 <build_message>:
 * 			Pressure and altitude have two decimal places, temperature just one.
 * @param 	message received ... Message struct from queue containing sensor values.
 * @param 	char *sendmsg ... Message to be sent to base station via TCP.
 * @retval 	None.
 */
void build_message(message received, char *sendmsg) {
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af04      	add	r7, sp, #16
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	e883 0003 	stmia.w	r3, {r0, r1}
 800255e:	607a      	str	r2, [r7, #4]
	uint8_t device_id = DEVICE_ID;
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
	if (strcmp(received.mode, "P") == 0 || strcmp(received.mode, "ALT") == 0) {
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	4922      	ldr	r1, [pc, #136]	; (80025f4 <build_message+0xa4>)
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fe30 	bl	80001d0 <strcmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <build_message+0x38>
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	491f      	ldr	r1, [pc, #124]	; (80025f8 <build_message+0xa8>)
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd fe27 	bl	80001d0 <strcmp>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d112      	bne.n	80025ae <build_message+0x5e>
		snprintf(sendmsg, MESSAGE_LEN, "%d,%s,%.2f;\r\n", device_id,
 8002588:	7dfc      	ldrb	r4, [r7, #23]
				received.mode, received.value);
 800258a:	68fb      	ldr	r3, [r7, #12]
		snprintf(sendmsg, MESSAGE_LEN, "%d,%s,%.2f;\r\n", device_id,
 800258c:	4618      	mov	r0, r3
 800258e:	f7fd ffeb 	bl	8000568 <__aeabi_f2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4623      	mov	r3, r4
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <build_message+0xac>)
 80025a4:	2119      	movs	r1, #25
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f008 fbac 	bl	800ad04 <sniprintf>
 80025ac:	e01a      	b.n	80025e4 <build_message+0x94>
	} else if (strcmp(received.mode, "TP") == 0) {
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4913      	ldr	r1, [pc, #76]	; (8002600 <build_message+0xb0>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd fe0b 	bl	80001d0 <strcmp>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <build_message+0x94>
		snprintf(sendmsg, MESSAGE_LEN, "%d,%s,%.1f;\r\n", device_id,
 80025c0:	7dfc      	ldrb	r4, [r7, #23]
				received.mode, received.value);
 80025c2:	68fb      	ldr	r3, [r7, #12]
		snprintf(sendmsg, MESSAGE_LEN, "%d,%s,%.1f;\r\n", device_id,
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffcf 	bl	8000568 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <build_message+0xb4>)
 80025dc:	2119      	movs	r1, #25
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f008 fb90 	bl	800ad04 <sniprintf>
	}
	printf(sendmsg);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f008 fb1f 	bl	800ac28 <iprintf>
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0800d298 	.word	0x0800d298
 80025f8:	0800d29c 	.word	0x0800d29c
 80025fc:	0800d2a0 	.word	0x0800d2a0
 8002600:	0800d2b0 	.word	0x0800d2b0
 8002604:	0800d2b4 	.word	0x0800d2b4

08002608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002612:	2003      	movs	r0, #3
 8002614:	f000 f8dd 	bl	80027d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002618:	200f      	movs	r0, #15
 800261a:	f7fe fffb 	bl	8001614 <HAL_InitTick>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	e001      	b.n	800262e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800262a:	f7fe ffcb 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800262e:	79fb      	ldrb	r3, [r7, #7]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x20>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x24>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_IncTick+0x24>)
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000094 	.word	0x20000094
 800265c:	20007650 	.word	0x20007650

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20007650 	.word	0x20007650

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff4c 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 80027fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff ffb1 	bl	800276c <NVIC_EncodePriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff80 	bl	8002718 <__NVIC_SetPriority>
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff54 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d008      	beq.n	8002866 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2204      	movs	r2, #4
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 020e 	bic.w	r2, r2, #14
 8002874:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 021c 	and.w	r2, r3, #28
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d005      	beq.n	80028dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2204      	movs	r2, #4
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e029      	b.n	8002930 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020e 	bic.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	f003 021c 	and.w	r2, r3, #28
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
    }
  }
  return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002948:	b2db      	uxtb	r3, r3
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002966:	e148      	b.n	8002bfa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 813a 	beq.w	8002bf4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b01      	cmp	r3, #1
 800298a:	d005      	beq.n	8002998 <HAL_GPIO_Init+0x40>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d130      	bne.n	80029fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ce:	2201      	movs	r2, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	f003 0201 	and.w	r2, r3, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d017      	beq.n	8002a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d123      	bne.n	8002a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8094 	beq.w	8002bf4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1d4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_GPIO_Init+0x2c8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1d0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <HAL_GPIO_Init+0x2cc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1cc>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b24:	2307      	movs	r3, #7
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3e:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b9a:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f aeaf 	bne.w	8002968 <HAL_GPIO_Init+0x10>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000800 	.word	0x48000800
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e08d      	b.n	8002d8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fba6 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d108      	bne.n	8002cfe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	e007      	b.n	8002d0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69d9      	ldr	r1, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	f040 80f9 	bne.w	8002fae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x34>
 8002dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0ed      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2C_Mem_Write+0x4e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0e6      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dea:	f7ff fc39 	bl	8002660 <HAL_GetTick>
 8002dee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 ffec 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0d1      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2221      	movs	r2, #33	; 0x21
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e34:	88f8      	ldrh	r0, [r7, #6]
 8002e36:	893a      	ldrh	r2, [r7, #8]
 8002e38:	8979      	ldrh	r1, [r7, #10]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4603      	mov	r3, r0
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fb81 	bl	800354c <I2C_RequestMemoryWrite>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0a9      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2bff      	cmp	r3, #255	; 0xff
 8002e64:	d90e      	bls.n	8002e84 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	8979      	ldrh	r1, [r7, #10]
 8002e74:	2300      	movs	r3, #0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f001 f965 	bl	800414c <I2C_TransferConfig>
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	8979      	ldrh	r1, [r7, #10]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f001 f954 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 ffe5 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e07b      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d034      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x1c8>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d130      	bne.n	8002f5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	2200      	movs	r2, #0
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 ff68 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e04d      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d90e      	bls.n	8002f3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	22ff      	movs	r2, #255	; 0xff
 8002f22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	8979      	ldrh	r1, [r7, #10]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f001 f909 	bl	800414c <I2C_TransferConfig>
 8002f3a:	e00f      	b.n	8002f5c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	8979      	ldrh	r1, [r7, #10]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f001 f8f8 	bl	800414c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d19e      	bne.n	8002ea4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 ffcb 	bl	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e01a      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_I2C_Mem_Write+0x224>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	fe00e800 	.word	0xfe00e800

08002fbc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 80fd 	bne.w	80031de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_I2C_Mem_Read+0x34>
 8002fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0f1      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2C_Mem_Read+0x4e>
 8003006:	2302      	movs	r3, #2
 8003008:	e0ea      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003012:	f7ff fb25 	bl	8002660 <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2319      	movs	r3, #25
 800301e:	2201      	movs	r2, #1
 8003020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fed8 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0d5      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2222      	movs	r2, #34	; 0x22
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800305c:	88f8      	ldrh	r0, [r7, #6]
 800305e:	893a      	ldrh	r2, [r7, #8]
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4603      	mov	r3, r0
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fac1 	bl	80035f4 <I2C_RequestMemoryRead>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0ad      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	d90e      	bls.n	80030ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	b2da      	uxtb	r2, r3
 800309a:	8979      	ldrh	r1, [r7, #10]
 800309c:	4b52      	ldr	r3, [pc, #328]	; (80031e8 <HAL_I2C_Mem_Read+0x22c>)
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f001 f851 	bl	800414c <I2C_TransferConfig>
 80030aa:	e00f      	b.n	80030cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_I2C_Mem_Read+0x22c>)
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f001 f840 	bl	800414c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2200      	movs	r2, #0
 80030d4:	2104      	movs	r1, #4
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fe7f 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07c      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d034      	beq.n	800318c <HAL_I2C_Mem_Read+0x1d0>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d130      	bne.n	800318c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fe50 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e04d      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d90e      	bls.n	800316c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22ff      	movs	r2, #255	; 0xff
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fff1 	bl	800414c <I2C_TransferConfig>
 800316a:	e00f      	b.n	800318c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	b2da      	uxtb	r2, r3
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	2300      	movs	r3, #0
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 ffe0 	bl	800414c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d19a      	bne.n	80030cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 feb3 	bl	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01a      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2220      	movs	r2, #32
 80031b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_I2C_Mem_Read+0x230>)
 80031be:	400b      	ands	r3, r1
 80031c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	80002400 	.word	0x80002400
 80031ec:	fe00e800 	.word	0xfe00e800

080031f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
  }
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00f      	beq.n	8003266 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003264:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00f      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800328e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00f      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f043 0202 	orr.w	r2, r3, #2
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 030b 	and.w	r3, r3, #11
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fc2b 	bl	8003b28 <I2C_ITError>
  }
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
 800330e:	4613      	mov	r3, r2
 8003310:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <I2C_Slave_ISR_IT+0x24>
 800337a:	2302      	movs	r3, #2
 800337c:	e0e1      	b.n	8003542 <I2C_Slave_ISR_IT+0x1e8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800339a:	6939      	ldr	r1, [r7, #16]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fa5d 	bl	800385c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d04b      	beq.n	8003444 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d046      	beq.n	8003444 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d128      	bne.n	8003412 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b28      	cmp	r3, #40	; 0x28
 80033ca:	d108      	bne.n	80033de <I2C_Slave_ISR_IT+0x84>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033d2:	d104      	bne.n	80033de <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033d4:	6939      	ldr	r1, [r7, #16]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fb52 	bl	8003a80 <I2C_ITListenCplt>
 80033dc:	e031      	b.n	8003442 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b29      	cmp	r3, #41	; 0x29
 80033e8:	d10e      	bne.n	8003408 <I2C_Slave_ISR_IT+0xae>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f0:	d00a      	beq.n	8003408 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fcab 	bl	8003d56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f9cf 	bl	80037a4 <I2C_ITSlaveSeqCplt>
 8003406:	e01c      	b.n	8003442 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2210      	movs	r2, #16
 800340e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003410:	e08f      	b.n	8003532 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <I2C_Slave_ISR_IT+0xda>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003432:	d17e      	bne.n	8003532 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	4619      	mov	r1, r3
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fb74 	bl	8003b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003440:	e077      	b.n	8003532 <I2C_Slave_ISR_IT+0x1d8>
 8003442:	e076      	b.n	8003532 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02f      	beq.n	80034ae <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02a      	beq.n	80034ae <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d018      	beq.n	8003494 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d14b      	bne.n	8003536 <I2C_Slave_ISR_IT+0x1dc>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a4:	d047      	beq.n	8003536 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f97c 	bl	80037a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034ac:	e043      	b.n	8003536 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d004      	beq.n	80034cc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f8e9 	bl	800369c <I2C_ITAddrCplt>
 80034ca:	e035      	b.n	8003538 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d030      	beq.n	8003538 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02b      	beq.n	8003538 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
 800351a:	e00d      	b.n	8003538 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d002      	beq.n	800352a <I2C_Slave_ISR_IT+0x1d0>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f93a 	bl	80037a4 <I2C_ITSlaveSeqCplt>
 8003530:	e002      	b.n	8003538 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003532:	bf00      	nop
 8003534:	e000      	b.n	8003538 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003536:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	461a      	mov	r2, r3
 800355a:	4603      	mov	r3, r0
 800355c:	817b      	strh	r3, [r7, #10]
 800355e:	460b      	mov	r3, r1
 8003560:	813b      	strh	r3, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	8979      	ldrh	r1, [r7, #10]
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <I2C_RequestMemoryWrite+0xa4>)
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fde9 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	69b9      	ldr	r1, [r7, #24]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fc7a 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e02c      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
 800359e:	e015      	b.n	80035cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fc60 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e012      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fbff 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	80002000 	.word	0x80002000

080035f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4603      	mov	r3, r0
 8003604:	817b      	strh	r3, [r7, #10]
 8003606:	460b      	mov	r3, r1
 8003608:	813b      	strh	r3, [r7, #8]
 800360a:	4613      	mov	r3, r2
 800360c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <I2C_RequestMemoryRead+0xa4>)
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fd96 	bl	800414c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	69b9      	ldr	r1, [r7, #24]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fc27 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e02c      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
 8003644:	e015      	b.n	8003672 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003646:	893b      	ldrh	r3, [r7, #8]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	b29b      	uxth	r3, r3
 800364c:	b2da      	uxtb	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fc0d 	bl	8003e78 <I2C_WaitOnTXISFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e012      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2200      	movs	r2, #0
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fbac 	bl	8003dda <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	80002000 	.word	0x80002000

0800369c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036b2:	2b28      	cmp	r3, #40	; 0x28
 80036b4:	d16a      	bne.n	800378c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d138      	bne.n	800376c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	09db      	lsrs	r3, r3, #7
 80036fe:	b29a      	uxth	r2, r3
 8003700:	89bb      	ldrh	r3, [r7, #12]
 8003702:	4053      	eors	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	f003 0306 	and.w	r3, r3, #6
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11c      	bne.n	8003748 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	2b02      	cmp	r3, #2
 8003722:	d13b      	bne.n	800379c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2208      	movs	r2, #8
 8003730:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800373a:	89ba      	ldrh	r2, [r7, #12]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fdde 	bl	8003302 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003746:	e029      	b.n	800379c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800374c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fd2d 	bl	80041b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800375e:	89ba      	ldrh	r2, [r7, #12]
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fdcc 	bl	8003302 <HAL_I2C_AddrCallback>
}
 800376a:	e017      	b.n	800379c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800376c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fd1d 	bl	80041b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800377e:	89ba      	ldrh	r2, [r7, #12]
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fdbc 	bl	8003302 <HAL_I2C_AddrCallback>
}
 800378a:	e007      	b.n	800379c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2208      	movs	r2, #8
 8003792:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e00c      	b.n	80037f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b29      	cmp	r3, #41	; 0x29
 80037fc:	d112      	bne.n	8003824 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2228      	movs	r2, #40	; 0x28
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800380c:	2101      	movs	r1, #1
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fcce 	bl	80041b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fd5c 	bl	80032da <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003822:	e017      	b.n	8003854 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d111      	bne.n	8003854 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2228      	movs	r2, #40	; 0x28
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2222      	movs	r2, #34	; 0x22
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800383e:	2102      	movs	r1, #2
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fcb5 	bl	80041b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fd4d 	bl	80032ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2220      	movs	r2, #32
 8003880:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b21      	cmp	r3, #33	; 0x21
 8003886:	d002      	beq.n	800388e <I2C_ITSlaveCplt+0x32>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b29      	cmp	r3, #41	; 0x29
 800388c:	d108      	bne.n	80038a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800388e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fc8c 	bl	80041b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
 800389e:	e019      	b.n	80038d4 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b22      	cmp	r3, #34	; 0x22
 80038a4:	d002      	beq.n	80038ac <I2C_ITSlaveCplt+0x50>
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b2a      	cmp	r3, #42	; 0x2a
 80038aa:	d108      	bne.n	80038be <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fc7d 	bl	80041b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2222      	movs	r2, #34	; 0x22
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
 80038bc:	e00a      	b.n	80038d4 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b28      	cmp	r3, #40	; 0x28
 80038c2:	d107      	bne.n	80038d4 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80038c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fc71 	bl	80041b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <I2C_ITSlaveCplt+0x21c>)
 80038f0:	400b      	ands	r3, r1
 80038f2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa2e 	bl	8003d56 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003912:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01f      	beq.n	800395c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392a:	e017      	b.n	800395c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003944:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8a4 	bl	8003b28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b28      	cmp	r3, #40	; 0x28
 80039ea:	d141      	bne.n	8003a70 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039ec:	6979      	ldr	r1, [r7, #20]
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f846 	bl	8003a80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039f4:	e03c      	b.n	8003a70 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039fe:	d014      	beq.n	8003a2a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fecf 	bl	80037a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <I2C_ITSlaveCplt+0x220>)
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fc7b 	bl	800331e <HAL_I2C_ListenCpltCallback>
}
 8003a28:	e022      	b.n	8003a70 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b22      	cmp	r3, #34	; 0x22
 8003a34:	d10e      	bne.n	8003a54 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fc4e 	bl	80032ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003a52:	e00d      	b.n	8003a70 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fc35 	bl	80032da <HAL_I2C_SlaveTxCpltCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fe00e800 	.word	0xfe00e800
 8003a7c:	ffff0000 	.word	0xffff0000

08003a80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <I2C_ITListenCplt+0xa4>)
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d022      	beq.n	8003afc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003afc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb55 	bl	80041b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fc01 	bl	800331e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	ffff0000 	.word	0xffff0000

08003b28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a6d      	ldr	r2, [pc, #436]	; (8003cfc <I2C_ITError+0x1d4>)
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b28      	cmp	r3, #40	; 0x28
 8003b5e:	d005      	beq.n	8003b6c <I2C_ITError+0x44>
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b29      	cmp	r3, #41	; 0x29
 8003b64:	d002      	beq.n	8003b6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6a:	d10b      	bne.n	8003b84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fb1e 	bl	80041b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2228      	movs	r2, #40	; 0x28
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a60      	ldr	r2, [pc, #384]	; (8003d00 <I2C_ITError+0x1d8>)
 8003b80:	635a      	str	r2, [r3, #52]	; 0x34
 8003b82:	e030      	b.n	8003be6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b84:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fb11 	bl	80041b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8e1 	bl	8003d56 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d01f      	beq.n	8003be0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d114      	bne.n	8003be0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d109      	bne.n	8003bd8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d039      	beq.n	8003c68 <I2C_ITError+0x140>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b11      	cmp	r3, #17
 8003bf8:	d002      	beq.n	8003c00 <I2C_ITError+0xd8>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b21      	cmp	r3, #33	; 0x21
 8003bfe:	d133      	bne.n	8003c68 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d107      	bne.n	8003c20 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fe88 	bl	800293a <HAL_DMA_GetState>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d017      	beq.n	8003c60 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4a33      	ldr	r2, [pc, #204]	; (8003d04 <I2C_ITError+0x1dc>)
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fe37 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d04d      	beq.n	8003cec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c5e:	e045      	b.n	8003cec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f851 	bl	8003d08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c66:	e041      	b.n	8003cec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d039      	beq.n	8003ce4 <I2C_ITError+0x1bc>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b12      	cmp	r3, #18
 8003c74:	d002      	beq.n	8003c7c <I2C_ITError+0x154>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b22      	cmp	r3, #34	; 0x22
 8003c7a:	d133      	bne.n	8003ce4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d107      	bne.n	8003c9c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fe4a 	bl	800293a <HAL_DMA_GetState>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d017      	beq.n	8003cdc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <I2C_ITError+0x1dc>)
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fdf9 	bl	80028b8 <HAL_DMA_Abort_IT>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d011      	beq.n	8003cf0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cda:	e009      	b.n	8003cf0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f813 	bl	8003d08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce2:	e005      	b.n	8003cf0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f80f 	bl	8003d08 <I2C_TreatErrorCallback>
  }
}
 8003cea:	e002      	b.n	8003cf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf0:	bf00      	nop
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	ffff0000 	.word	0xffff0000
 8003d00:	0800335b 	.word	0x0800335b
 8003d04:	08003d9f 	.word	0x08003d9f

08003d08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b60      	cmp	r3, #96	; 0x60
 8003d1a:	d10e      	bne.n	8003d3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fb07 	bl	8003346 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d38:	e009      	b.n	8003d4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff faf2 	bl	8003332 <HAL_I2C_ErrorCallback>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d103      	bne.n	8003d74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d007      	beq.n	8003d92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	619a      	str	r2, [r3, #24]
  }
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	2200      	movs	r2, #0
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff9b 	bl	8003d08 <I2C_TreatErrorCallback>
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dea:	e031      	b.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d02d      	beq.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe fc34 	bl	8002660 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d122      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d113      	bne.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e00f      	b.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d0be      	beq.n	8003dec <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e84:	e033      	b.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f87e 	bl	8003f8c <I2C_IsErrorOccurred>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e031      	b.n	8003efe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d025      	beq.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe fbdd 	bl	8002660 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11a      	bne.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d013      	beq.n	8003eee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e007      	b.n	8003efe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d1c4      	bne.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f12:	e02f      	b.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f837 	bl	8003f8c <I2C_IsErrorOccurred>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e02d      	b.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f28:	f7fe fb9a 	bl	8002660 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d302      	bcc.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11a      	bne.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d013      	beq.n	8003f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e007      	b.n	8003f84 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d1c8      	bne.n	8003f14 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d068      	beq.n	800408a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fc0:	e049      	b.n	8004056 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d045      	beq.n	8004056 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe fb49 	bl	8002660 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_IsErrorOccurred+0x54>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d13a      	bne.n	8004056 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004002:	d121      	bne.n	8004048 <I2C_IsErrorOccurred+0xbc>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400a:	d01d      	beq.n	8004048 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d01a      	beq.n	8004048 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004022:	f7fe fb1d 	bl	8002660 <HAL_GetTick>
 8004026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004028:	e00e      	b.n	8004048 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800402a:	f7fe fb19 	bl	8002660 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b19      	cmp	r3, #25
 8004036:	d907      	bls.n	8004048 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004046:	e006      	b.n	8004056 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b20      	cmp	r3, #32
 8004054:	d1e9      	bne.n	800402a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b20      	cmp	r3, #32
 8004062:	d003      	beq.n	800406c <I2C_IsErrorOccurred+0xe0>
 8004064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0aa      	beq.n	8003fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800406c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2220      	movs	r2, #32
 800407a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f043 0304 	orr.w	r3, r3, #4
 8004082:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f043 0302 	orr.w	r3, r3, #2
 80040e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fe28 	bl	8003d56 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <I2C_IsErrorOccurred+0x1bc>)
 8004112:	400b      	ands	r3, r1
 8004114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800413a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800413e:	4618      	mov	r0, r3
 8004140:	3728      	adds	r7, #40	; 0x28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	4613      	mov	r3, r2
 800415c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004164:	7a7b      	ldrb	r3, [r7, #9]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800416c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	4313      	orrs	r3, r2
 8004176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800417a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	0d5b      	lsrs	r3, r3, #21
 8004186:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <I2C_TransferConfig+0x60>)
 800418c:	430b      	orrs	r3, r1
 800418e:	43db      	mvns	r3, r3
 8004190:	ea02 0103 	and.w	r1, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	03ff63ff 	.word	0x03ff63ff

080041b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00f      	beq.n	80041ea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80041d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041de:	2b28      	cmp	r3, #40	; 0x28
 80041e0:	d003      	beq.n	80041ea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80041fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004208:	2b28      	cmp	r3, #40	; 0x28
 800420a:	d003      	beq.n	8004214 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004212:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004218:	2b00      	cmp	r3, #0
 800421a:	da03      	bge.n	8004224 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004222:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	2b10      	cmp	r3, #16
 8004228:	d103      	bne.n	8004232 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004230:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	2b20      	cmp	r3, #32
 8004236:	d103      	bne.n	8004240 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f043 0320 	orr.w	r3, r3, #32
 800423e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004240:	887b      	ldrh	r3, [r7, #2]
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d103      	bne.n	800424e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	43da      	mvns	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	400a      	ands	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	d138      	bne.n	80042f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800428c:	2302      	movs	r3, #2
 800428e:	e032      	b.n	80042f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d139      	bne.n	800438c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004322:	2302      	movs	r3, #2
 8004324:	e033      	b.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2224      	movs	r2, #36	; 0x24
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004354:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043aa:	6013      	str	r3, [r2, #0]
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40007000 	.word	0x40007000

080043bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40007000 	.word	0x40007000

080043d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d130      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d038      	beq.n	8004468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043fe:	4a1e      	ldr	r2, [pc, #120]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004404:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2232      	movs	r2, #50	; 0x32
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0c9b      	lsrs	r3, r3, #18
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441c:	e002      	b.n	8004424 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b01      	subs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d102      	bne.n	8004438 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f2      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	d110      	bne.n	8004468 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e00f      	b.n	800446a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d007      	beq.n	8004468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004460:	4a05      	ldr	r2, [pc, #20]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004466:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40007000 	.word	0x40007000
 800447c:	20000010 	.word	0x20000010
 8004480:	431bde83 	.word	0x431bde83

08004484 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f000 bc02 	b.w	8004c9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004498:	4b96      	ldr	r3, [pc, #600]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a2:	4b94      	ldr	r3, [pc, #592]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80e4 	beq.w	8004682 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_OscConfig+0x4c>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	f040 808b 	bne.w	80045de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	f040 8087 	bne.w	80045de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044d0:	4b88      	ldr	r3, [pc, #544]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x64>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e3d9      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_RCC_OscConfig+0x7e>
 80044f8:	4b7e      	ldr	r3, [pc, #504]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004500:	e005      	b.n	800450e <HAL_RCC_OscConfig+0x8a>
 8004502:	4b7c      	ldr	r3, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450e:	4293      	cmp	r3, r2
 8004510:	d223      	bcs.n	800455a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fdbe 	bl	8005098 <RCC_SetFlashLatencyFromMSIRange>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e3ba      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004526:	4b73      	ldr	r3, [pc, #460]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a72      	ldr	r2, [pc, #456]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800452c:	f043 0308 	orr.w	r3, r3, #8
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	496d      	ldr	r1, [pc, #436]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004544:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	4968      	ldr	r1, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e025      	b.n	80045a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800455a:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a65      	ldr	r2, [pc, #404]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b63      	ldr	r3, [pc, #396]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4960      	ldr	r1, [pc, #384]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004578:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	495b      	ldr	r1, [pc, #364]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fd7e 	bl	8005098 <RCC_SetFlashLatencyFromMSIRange>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e37a      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045a6:	f000 fc81 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	4950      	ldr	r1, [pc, #320]	; (80046f8 <HAL_RCC_OscConfig+0x274>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	4a4e      	ldr	r2, [pc, #312]	; (80046fc <HAL_RCC_OscConfig+0x278>)
 80045c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCC_OscConfig+0x27c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd f822 	bl	8001614 <HAL_InitTick>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d052      	beq.n	8004680 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	e35e      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d032      	beq.n	800464c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045e6:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f2:	f7fe f835 	bl	8002660 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045fa:	f7fe f831 	bl	8002660 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e347      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004618:	4b36      	ldr	r3, [pc, #216]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800461e:	f043 0308 	orr.w	r3, r3, #8
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	4930      	ldr	r1, [pc, #192]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004632:	4313      	orrs	r3, r2
 8004634:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	492b      	ldr	r1, [pc, #172]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
 800464a:	e01a      	b.n	8004682 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a28      	ldr	r2, [pc, #160]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004658:	f7fe f802 	bl	8002660 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004660:	f7fd fffe 	bl	8002660 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e314      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1dc>
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d073      	beq.n	8004776 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x21c>
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d10e      	bne.n	80046b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d10b      	bne.n	80046b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d063      	beq.n	8004774 <HAL_RCC_OscConfig+0x2f0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d15f      	bne.n	8004774 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e2f1      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c0:	d106      	bne.n	80046d0 <HAL_RCC_OscConfig+0x24c>
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e025      	b.n	800471c <HAL_RCC_OscConfig+0x298>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d8:	d114      	bne.n	8004704 <HAL_RCC_OscConfig+0x280>
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a02      	ldr	r2, [pc, #8]	; (80046f4 <HAL_RCC_OscConfig+0x270>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e013      	b.n	800471c <HAL_RCC_OscConfig+0x298>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	0800d384 	.word	0x0800d384
 80046fc:	20000010 	.word	0x20000010
 8004700:	20000090 	.word	0x20000090
 8004704:	4ba0      	ldr	r3, [pc, #640]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a9f      	ldr	r2, [pc, #636]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800470a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a9c      	ldr	r2, [pc, #624]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d013      	beq.n	800474c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd ff9c 	bl	8002660 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd ff98 	bl	8002660 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e2ae      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473e:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x2a8>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474c:	f7fd ff88 	bl	8002660 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fd ff84 	bl	8002660 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e29a      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x2d0>
 8004772:	e000      	b.n	8004776 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d060      	beq.n	8004844 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d005      	beq.n	8004794 <HAL_RCC_OscConfig+0x310>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d119      	bne.n	80047c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d116      	bne.n	80047c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004794:	4b7c      	ldr	r3, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_OscConfig+0x328>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e277      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	061b      	lsls	r3, r3, #24
 80047ba:	4973      	ldr	r1, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	e040      	b.n	8004844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d023      	beq.n	8004812 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ca:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fd ff43 	bl	8002660 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd ff3f 	bl	8002660 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e255      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f0:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	495f      	ldr	r1, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
 8004810:	e018      	b.n	8004844 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004812:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5c      	ldr	r2, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481e:	f7fd ff1f 	bl	8002660 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004826:	f7fd ff1b 	bl	8002660 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e231      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004838:	4b53      	ldr	r3, [pc, #332]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f0      	bne.n	8004826 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d03c      	beq.n	80048ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01c      	beq.n	8004892 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004858:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800485a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd fefa 	bl	8002660 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7fd fef6 	bl	8002660 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e20c      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004882:	4b41      	ldr	r3, [pc, #260]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ef      	beq.n	8004870 <HAL_RCC_OscConfig+0x3ec>
 8004890:	e01b      	b.n	80048ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004898:	4a3b      	ldr	r2, [pc, #236]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a2:	f7fd fedd 	bl	8002660 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048aa:	f7fd fed9 	bl	8002660 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1ef      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80048be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ef      	bne.n	80048aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 80a6 	beq.w	8004a24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048dc:	4b2a      	ldr	r3, [pc, #168]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80048ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f2:	6593      	str	r3, [r2, #88]	; 0x58
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004900:	2301      	movs	r3, #1
 8004902:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCC_OscConfig+0x508>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d118      	bne.n	8004942 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_RCC_OscConfig+0x508>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_RCC_OscConfig+0x508>)
 8004916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491c:	f7fd fea0 	bl	8002660 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fd fe9c 	bl	8002660 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1b2      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004936:	4b15      	ldr	r3, [pc, #84]	; (800498c <HAL_RCC_OscConfig+0x508>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d108      	bne.n	800495c <HAL_RCC_OscConfig+0x4d8>
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800495a:	e029      	b.n	80049b0 <HAL_RCC_OscConfig+0x52c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b05      	cmp	r3, #5
 8004962:	d115      	bne.n	8004990 <HAL_RCC_OscConfig+0x50c>
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	4a03      	ldr	r2, [pc, #12]	; (8004988 <HAL_RCC_OscConfig+0x504>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004984:	e014      	b.n	80049b0 <HAL_RCC_OscConfig+0x52c>
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	40007000 	.word	0x40007000
 8004990:	4b9a      	ldr	r3, [pc, #616]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a99      	ldr	r2, [pc, #612]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a0:	4b96      	ldr	r3, [pc, #600]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a95      	ldr	r2, [pc, #596]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fe52 	bl	8002660 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fd fe4e 	bl	8002660 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e162      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d6:	4b89      	ldr	r3, [pc, #548]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ed      	beq.n	80049c0 <HAL_RCC_OscConfig+0x53c>
 80049e4:	e015      	b.n	8004a12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e6:	f7fd fe3b 	bl	8002660 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fd fe37 	bl	8002660 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e14b      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a04:	4b7d      	ldr	r3, [pc, #500]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ed      	bne.n	80049ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a12:	7ffb      	ldrb	r3, [r7, #31]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a18:	4b78      	ldr	r3, [pc, #480]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d03c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01c      	beq.n	8004a72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a38:	4b70      	ldr	r3, [pc, #448]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a3e:	4a6f      	ldr	r2, [pc, #444]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fd fe0a 	bl	8002660 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a50:	f7fd fe06 	bl	8002660 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e11c      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a62:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ef      	beq.n	8004a50 <HAL_RCC_OscConfig+0x5cc>
 8004a70:	e01b      	b.n	8004aaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a72:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a78:	4a60      	ldr	r2, [pc, #384]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fded 	bl	8002660 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8a:	f7fd fde9 	bl	8002660 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e0ff      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a9c:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ef      	bne.n	8004a8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80f3 	beq.w	8004c9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f040 80c9 	bne.w	8004c50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004abe:	4b4f      	ldr	r3, [pc, #316]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0203 	and.w	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d12c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	3b01      	subs	r3, #1
 8004ade:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d123      	bne.n	8004b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d11b      	bne.n	8004b2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d113      	bne.n	8004b2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	3b01      	subs	r3, #1
 8004b12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d109      	bne.n	8004b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	3b01      	subs	r3, #1
 8004b26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d06b      	beq.n	8004c04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d062      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b32:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e0ac      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b42:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a2d      	ldr	r2, [pc, #180]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b4e:	f7fd fd87 	bl	8002660 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b56:	f7fd fd83 	bl	8002660 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e099      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_RCC_OscConfig+0x77c>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b8e:	0212      	lsls	r2, r2, #8
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b96:	0852      	lsrs	r2, r2, #1
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0552      	lsls	r2, r2, #21
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ba2:	0852      	lsrs	r2, r2, #1
 8004ba4:	3a01      	subs	r2, #1
 8004ba6:	0652      	lsls	r2, r2, #25
 8004ba8:	4311      	orrs	r1, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bae:	06d2      	lsls	r2, r2, #27
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	4912      	ldr	r1, [pc, #72]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a0f      	ldr	r2, [pc, #60]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bd0:	f7fd fd46 	bl	8002660 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd fd42 	bl	8002660 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e058      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_RCC_OscConfig+0x778>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bf6:	e050      	b.n	8004c9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e04f      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c04:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d144      	bne.n	8004c9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c10:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a20      	ldr	r2, [pc, #128]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c28:	f7fd fd1a 	bl	8002660 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c30:	f7fd fd16 	bl	8002660 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e02c      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c42:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x7ac>
 8004c4e:	e024      	b.n	8004c9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d01f      	beq.n	8004c96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fd fcfd 	bl	8002660 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fd fcf9 	bl	8002660 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e00f      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	4905      	ldr	r1, [pc, #20]	; (8004ca4 <HAL_RCC_OscConfig+0x820>)
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x824>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
 8004c94:	e001      	b.n	8004c9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	feeefffc 	.word	0xfeeefffc

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0e7      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b75      	ldr	r3, [pc, #468]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b72      	ldr	r3, [pc, #456]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4970      	ldr	r1, [pc, #448]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b6e      	ldr	r3, [pc, #440]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0cf      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d908      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0c:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	4960      	ldr	r1, [pc, #384]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d04c      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d32:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d121      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0a6      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4a:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d115      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e09a      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d62:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e08e      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e086      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d82:	4b46      	ldr	r3, [pc, #280]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4943      	ldr	r1, [pc, #268]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fd fc64 	bl	8002660 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fd fc60 	bl	8002660 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e06e      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 020c 	and.w	r2, r3, #12
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1eb      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d208      	bcs.n	8004df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	492b      	ldr	r1, [pc, #172]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d210      	bcs.n	8004e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 0207 	bic.w	r2, r3, #7
 8004e08:	4923      	ldr	r1, [pc, #140]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e10:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <HAL_RCC_ClockConfig+0x1ec>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e036      	b.n	8004e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	4918      	ldr	r1, [pc, #96]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d009      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4910      	ldr	r1, [pc, #64]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e60:	f000 f824 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <HAL_RCC_ClockConfig+0x1f0>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	490b      	ldr	r1, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8004e72:	5ccb      	ldrb	r3, [r1, r3]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7c:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8004e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fc fbc5 	bl	8001614 <HAL_InitTick>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40022000 	.word	0x40022000
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800d384 	.word	0x0800d384
 8004ea4:	20000010 	.word	0x20000010
 8004ea8:	20000090 	.word	0x20000090

08004eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eba:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d121      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d11e      	bne.n	8004f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ee0:	4b34      	ldr	r3, [pc, #208]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004eec:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004efc:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f08:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d102      	bne.n	8004f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	e004      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f30:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d134      	bne.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0xac>
 8004f50:	e005      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8004f54:	617b      	str	r3, [r7, #20]
      break;
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f5a:	617b      	str	r3, [r7, #20]
      break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	617b      	str	r3, [r7, #20]
      break;
 8004f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f64:	4b13      	ldr	r3, [pc, #76]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	3301      	adds	r3, #1
 8004f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f72:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	fb03 f202 	mul.w	r2, r3, r2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	0e5b      	lsrs	r3, r3, #25
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	3301      	adds	r3, #1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	0800d39c 	.word	0x0800d39c
 8004fbc:	00f42400 	.word	0x00f42400
 8004fc0:	007a1200 	.word	0x007a1200

08004fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000010 	.word	0x20000010

08004fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fe0:	f7ff fff0 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4904      	ldr	r1, [pc, #16]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	0800d394 	.word	0x0800d394

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800500c:	f7ff ffda 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0adb      	lsrs	r3, r3, #11
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4904      	ldr	r1, [pc, #16]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	0800d394 	.word	0x0800d394

08005034 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	220f      	movs	r2, #15
 8005042:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005044:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_RCC_GetClockConfig+0x5c>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005050:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_GetClockConfig+0x5c>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <HAL_RCC_GetClockConfig+0x60>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0207 	and.w	r2, r3, #7
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	601a      	str	r2, [r3, #0]
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	40022000 	.word	0x40022000

08005098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050b0:	f7ff f984 	bl	80043bc <HAL_PWREx_GetVoltageRange>
 80050b4:	6178      	str	r0, [r7, #20]
 80050b6:	e014      	b.n	80050e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	4a24      	ldr	r2, [pc, #144]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6593      	str	r3, [r2, #88]	; 0x58
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050d0:	f7ff f974 	bl	80043bc <HAL_PWREx_GetVoltageRange>
 80050d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d10b      	bne.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d919      	bls.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2ba0      	cmp	r3, #160	; 0xa0
 80050f4:	d902      	bls.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050f6:	2302      	movs	r3, #2
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e013      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050fc:	2301      	movs	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	e010      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d902      	bls.n	800510e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005108:	2303      	movs	r3, #3
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e00a      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d102      	bne.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005114:	2302      	movs	r3, #2
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e004      	b.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d101      	bne.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005120:	2301      	movs	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f023 0207 	bic.w	r2, r3, #7
 800512c:	4909      	ldr	r1, [pc, #36]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d001      	beq.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000
 8005154:	40022000 	.word	0x40022000

08005158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005160:	2300      	movs	r3, #0
 8005162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005164:	2300      	movs	r3, #0
 8005166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005170:	2b00      	cmp	r3, #0
 8005172:	d031      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800517c:	d01a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800517e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005182:	d814      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005188:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800518c:	d10f      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800518e:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005198:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800519a:	e00c      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	2100      	movs	r1, #0
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f9de 	bl	8005564 <RCCEx_PLLSAI1_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051ac:	e003      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	74fb      	strb	r3, [r7, #19]
      break;
 80051b2:	e000      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80051b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051bc:	4b51      	ldr	r3, [pc, #324]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	494e      	ldr	r1, [pc, #312]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051d2:	e001      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 809e 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051ea:	4b46      	ldr	r3, [pc, #280]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005200:	4b40      	ldr	r3, [pc, #256]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	6593      	str	r3, [r2, #88]	; 0x58
 800520c:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005218:	2301      	movs	r3, #1
 800521a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521c:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a39      	ldr	r2, [pc, #228]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005228:	f7fd fa1a 	bl	8002660 <HAL_GetTick>
 800522c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800522e:	e009      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fd fa16 	bl	8002660 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d902      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	74fb      	strb	r3, [r7, #19]
        break;
 8005242:	e005      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005244:	4b30      	ldr	r3, [pc, #192]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ef      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d15a      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01e      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	429a      	cmp	r2, r3
 8005270:	d019      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800529e:	4a19      	ldr	r2, [pc, #100]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d016      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd f9d6 	bl	8002660 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b6:	e00b      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fd f9d2 	bl	8002660 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d902      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	74fb      	strb	r3, [r7, #19]
            break;
 80052ce:	e006      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d0:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0ec      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80052de:	7cfb      	ldrb	r3, [r7, #19]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f2:	4904      	ldr	r1, [pc, #16]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052fa:	e009      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005310:	7c7b      	ldrb	r3, [r7, #17]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005316:	4b8a      	ldr	r3, [pc, #552]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	4a89      	ldr	r2, [pc, #548]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005320:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532e:	4b84      	ldr	r3, [pc, #528]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	f023 0203 	bic.w	r2, r3, #3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4980      	ldr	r1, [pc, #512]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005350:	4b7b      	ldr	r3, [pc, #492]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 020c 	bic.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	4978      	ldr	r1, [pc, #480]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005372:	4b73      	ldr	r3, [pc, #460]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005378:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	496f      	ldr	r1, [pc, #444]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005394:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	4967      	ldr	r1, [pc, #412]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b6:	4b62      	ldr	r3, [pc, #392]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	495e      	ldr	r1, [pc, #376]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d8:	4b59      	ldr	r3, [pc, #356]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4956      	ldr	r1, [pc, #344]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053fa:	4b51      	ldr	r3, [pc, #324]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	494d      	ldr	r1, [pc, #308]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d028      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800541c:	4b48      	ldr	r3, [pc, #288]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	4945      	ldr	r1, [pc, #276]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543a:	d106      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543c:	4b40      	ldr	r3, [pc, #256]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	4a3f      	ldr	r2, [pc, #252]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	60d3      	str	r3, [r2, #12]
 8005448:	e011      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005452:	d10c      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f000 f882 	bl	8005564 <RCCEx_PLLSAI1_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	492d      	ldr	r1, [pc, #180]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005498:	d106      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a28      	ldr	r2, [pc, #160]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a4:	60d3      	str	r3, [r2, #12]
 80054a6:	e011      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2101      	movs	r1, #1
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f853 	bl	8005564 <RCCEx_PLLSAI1_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01c      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054d8:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e6:	4916      	ldr	r1, [pc, #88]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054f6:	d10c      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	2102      	movs	r1, #2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f830 	bl	8005564 <RCCEx_PLLSAI1_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552c:	4904      	ldr	r1, [pc, #16]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005534:	7cbb      	ldrb	r3, [r7, #18]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000

08005544 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800554e:	f043 0304 	orr.w	r3, r3, #4
 8005552:	6013      	str	r3, [r2, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000

08005564 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005572:	4b74      	ldr	r3, [pc, #464]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d018      	beq.n	80055b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800557e:	4b71      	ldr	r3, [pc, #452]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0203 	and.w	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d10d      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
       ||
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005596:	4b6b      	ldr	r3, [pc, #428]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
       ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d047      	beq.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e044      	b.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d018      	beq.n	80055ea <RCCEx_PLLSAI1_Config+0x86>
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d825      	bhi.n	8005608 <RCCEx_PLLSAI1_Config+0xa4>
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d002      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x62>
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d009      	beq.n	80055d8 <RCCEx_PLLSAI1_Config+0x74>
 80055c4:	e020      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055c6:	4b5f      	ldr	r3, [pc, #380]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11d      	bne.n	800560e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d6:	e01a      	b.n	800560e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055d8:	4b5a      	ldr	r3, [pc, #360]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d116      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e8:	e013      	b.n	8005612 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ea:	4b56      	ldr	r3, [pc, #344]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055f6:	4b53      	ldr	r3, [pc, #332]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005606:	e006      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e004      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
    }

    if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800561e:	4b49      	ldr	r3, [pc, #292]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	3b01      	subs	r3, #1
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	430b      	orrs	r3, r1
 8005634:	4943      	ldr	r1, [pc, #268]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d17c      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005640:	4b40      	ldr	r3, [pc, #256]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3f      	ldr	r2, [pc, #252]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800564a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564c:	f7fd f808 	bl	8002660 <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005652:	e009      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005654:	f7fd f804 	bl	8002660 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
        break;
 8005666:	e005      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005668:	4b36      	ldr	r3, [pc, #216]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ef      	bne.n	8005654 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d15f      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d110      	bne.n	80056a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005680:	4b30      	ldr	r3, [pc, #192]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6892      	ldr	r2, [r2, #8]
 8005690:	0211      	lsls	r1, r2, #8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	06d2      	lsls	r2, r2, #27
 8005698:	430a      	orrs	r2, r1
 800569a:	492a      	ldr	r1, [pc, #168]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	610b      	str	r3, [r1, #16]
 80056a0:	e027      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d112      	bne.n	80056ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a8:	4b26      	ldr	r3, [pc, #152]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6892      	ldr	r2, [r2, #8]
 80056b8:	0211      	lsls	r1, r2, #8
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6912      	ldr	r2, [r2, #16]
 80056be:	0852      	lsrs	r2, r2, #1
 80056c0:	3a01      	subs	r2, #1
 80056c2:	0552      	lsls	r2, r2, #21
 80056c4:	430a      	orrs	r2, r1
 80056c6:	491f      	ldr	r1, [pc, #124]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	610b      	str	r3, [r1, #16]
 80056cc:	e011      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	0211      	lsls	r1, r2, #8
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6952      	ldr	r2, [r2, #20]
 80056e4:	0852      	lsrs	r2, r2, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0652      	lsls	r2, r2, #25
 80056ea:	430a      	orrs	r2, r1
 80056ec:	4915      	ldr	r1, [pc, #84]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fc ffaf 	bl	8002660 <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005704:	e009      	b.n	800571a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005706:	f7fc ffab 	bl	8002660 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d902      	bls.n	800571a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	73fb      	strb	r3, [r7, #15]
          break;
 8005718:	e005      	b.n	8005726 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ef      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	4903      	ldr	r1, [pc, #12]	; (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000

08005748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e049      	b.n	80057ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f841 	bl	80057f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f9be 	bl	8005b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e03b      	b.n	800589c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x4e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d004      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x4e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a15      	ldr	r2, [pc, #84]	; (80058ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d115      	bne.n	8005886 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005862:	4013      	ands	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d015      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x8c>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005872:	d011      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	e008      	b.n	8005898 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e000      	b.n	800589a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40014000 	.word	0x40014000
 80058b0:	00010007 	.word	0x00010007

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d020      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0202 	mvn.w	r2, #2
 80058e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8e4 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8d6 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8e7 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8be 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8b0 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8c1 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01b      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0208 	mvn.w	r2, #8
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f898 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f88a 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f89b 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2208      	movs	r2, #8
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f872 	bl	8005acc <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f864 	bl	8005ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f875 	bl	8005ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fb fdba 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8d0 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8c8 	bl	8005bf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f834 	bl	8005af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0220 	mvn.w	r2, #32
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f890 	bl	8005bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <TIM_Base_SetConfig+0xbc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <TIM_Base_SetConfig+0x20>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b26:	d108      	bne.n	8005b3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <TIM_Base_SetConfig+0xbc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00b      	beq.n	8005b5a <TIM_Base_SetConfig+0x52>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b48:	d007      	beq.n	8005b5a <TIM_Base_SetConfig+0x52>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <TIM_Base_SetConfig+0xc0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_Base_SetConfig+0x52>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <TIM_Base_SetConfig+0xc4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <TIM_Base_SetConfig+0xbc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_Base_SetConfig+0xa0>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <TIM_Base_SetConfig+0xc0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xa0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <TIM_Base_SetConfig+0xc4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400

08005bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e040      	b.n	8005ca0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fb fec4 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	; 0x24
 8005c38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fdfa 	bl	800684c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fbcb 	bl	80063f4 <UART_SetConfig>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e01b      	b.n	8005ca0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fe79 	bl	8006990 <UART_CheckIdleState>
 8005c9e:	4603      	mov	r3, r0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d178      	bne.n	8005db2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Transmit+0x24>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e071      	b.n	8005db4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2221      	movs	r2, #33	; 0x21
 8005cdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cde:	f7fc fcbf 	bl	8002660 <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d108      	bne.n	8005d10 <HAL_UART_Transmit+0x68>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e003      	b.n	8005d18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d18:	e030      	b.n	8005d7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fedb 	bl	8006ae0 <UART_WaitOnFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e03c      	b.n	8005db4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10b      	bne.n	8005d58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	881a      	ldrh	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3302      	adds	r3, #2
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	e008      	b.n	8005d6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	b292      	uxth	r2, r2
 8005d62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1c8      	bne.n	8005d1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2140      	movs	r1, #64	; 0x40
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 fea4 	bl	8006ae0 <UART_WaitOnFlagUntilTimeout>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d004      	beq.n	8005da8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e005      	b.n	8005db4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3720      	adds	r7, #32
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b0ba      	sub	sp, #232	; 0xe8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dea:	4013      	ands	r3, r2
 8005dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d115      	bne.n	8005e24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00f      	beq.n	8005e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 82ae 	beq.w	8006376 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
      }
      return;
 8005e22:	e2a8      	b.n	8006376 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8117 	beq.w	800605c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e3e:	4b85      	ldr	r3, [pc, #532]	; (8006054 <HAL_UART_IRQHandler+0x298>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 810a 	beq.w	800605c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d011      	beq.n	8005e78 <HAL_UART_IRQHandler+0xbc>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2201      	movs	r2, #1
 8005e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e6e:	f043 0201 	orr.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d011      	beq.n	8005ea8 <HAL_UART_IRQHandler+0xec>
 8005e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2202      	movs	r2, #2
 8005e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e9e:	f043 0204 	orr.w	r2, r3, #4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x11c>
 8005eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ece:	f043 0202 	orr.w	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d017      	beq.n	8005f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0a:	f043 0208 	orr.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d012      	beq.n	8005f46 <HAL_UART_IRQHandler+0x18a>
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00c      	beq.n	8005f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3c:	f043 0220 	orr.w	r2, r3, #32
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8214 	beq.w	800637a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d007      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d04f      	beq.n	800603e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fecc 	bl	8006d3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d141      	bne.n	8006036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1d9      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006002:	2b00      	cmp	r3, #0
 8006004:	d013      	beq.n	800602e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <HAL_UART_IRQHandler+0x29c>)
 800600c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006012:	4618      	mov	r0, r3
 8006014:	f7fc fc50 	bl	80028b8 <HAL_DMA_Abort_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d017      	beq.n	800604e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	e00f      	b.n	800604e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9c2 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e00b      	b.n	800604e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9be 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e007      	b.n	800604e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9ba 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800604c:	e195      	b.n	800637a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604e:	bf00      	nop
    return;
 8006050:	e193      	b.n	800637a <HAL_UART_IRQHandler+0x5be>
 8006052:	bf00      	nop
 8006054:	04000120 	.word	0x04000120
 8006058:	08006e05 	.word	0x08006e05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006060:	2b01      	cmp	r3, #1
 8006062:	f040 814e 	bne.w	8006302 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8147 	beq.w	8006302 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8140 	beq.w	8006302 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	f040 80b8 	bne.w	800620a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8167 	beq.w	800637e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f080 815f 	bcs.w	800637e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f040 8086 	bne.w	80061e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800610a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800611e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1da      	bne.n	80060dc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800614a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800614e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800615c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e1      	bne.n	8006126 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3308      	adds	r3, #8
 8006182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800618c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e3      	bne.n	8006162 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	f023 0310 	bic.w	r3, r3, #16
 80061bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80061cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e4      	bne.n	80061a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fc fb2a 	bl	800283c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	b29b      	uxth	r3, r3
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb ff9c 	bl	8002140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006208:	e0b9      	b.n	800637e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006216:	b29b      	uxth	r3, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 80ab 	beq.w	8006382 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800622c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80a6 	beq.w	8006382 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800624a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
 800625a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800625e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e4      	bne.n	8006236 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	623b      	str	r3, [r7, #32]
   return(result);
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006290:	633a      	str	r2, [r7, #48]	; 0x30
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e3      	bne.n	800626c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f023 0310 	bic.w	r3, r3, #16
 80062cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	69b9      	ldr	r1, [r7, #24]
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	617b      	str	r3, [r7, #20]
   return(result);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e4      	bne.n	80062b8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb ff20 	bl	8002140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006300:	e03f      	b.n	8006382 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00e      	beq.n	800632c <HAL_UART_IRQHandler+0x570>
 800630e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 ff69 	bl	80071fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800632a:	e02d      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01c      	beq.n	8006386 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
    }
    return;
 8006354:	e017      	b.n	8006386 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d012      	beq.n	8006388 <HAL_UART_IRQHandler+0x5cc>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00c      	beq.n	8006388 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fd5e 	bl	8006e30 <UART_EndTransmit_IT>
    return;
 8006374:	e008      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006376:	bf00      	nop
 8006378:	e006      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
    return;
 800637a:	bf00      	nop
 800637c:	e004      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
      return;
 800637e:	bf00      	nop
 8006380:	e002      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006382:	bf00      	nop
 8006384:	e000      	b.n	8006388 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006386:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006388:	37e8      	adds	r7, #232	; 0xe8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop

08006390 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f8:	b08a      	sub	sp, #40	; 0x28
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	431a      	orrs	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	4313      	orrs	r3, r2
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4bb4      	ldr	r3, [pc, #720]	; (80066f4 <UART_SetConfig+0x300>)
 8006424:	4013      	ands	r3, r2
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	6812      	ldr	r2, [r2, #0]
 800642a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800642c:	430b      	orrs	r3, r1
 800642e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4aa9      	ldr	r2, [pc, #676]	; (80066f8 <UART_SetConfig+0x304>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645c:	4313      	orrs	r3, r2
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	430a      	orrs	r2, r1
 8006472:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4aa0      	ldr	r2, [pc, #640]	; (80066fc <UART_SetConfig+0x308>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d126      	bne.n	80064cc <UART_SetConfig+0xd8>
 800647e:	4ba0      	ldr	r3, [pc, #640]	; (8006700 <UART_SetConfig+0x30c>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	2b03      	cmp	r3, #3
 800648a:	d81b      	bhi.n	80064c4 <UART_SetConfig+0xd0>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0xa0>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064b5 	.word	0x080064b5
 800649c:	080064ad 	.word	0x080064ad
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e080      	b.n	80065ae <UART_SetConfig+0x1ba>
 80064ac:	2302      	movs	r3, #2
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b2:	e07c      	b.n	80065ae <UART_SetConfig+0x1ba>
 80064b4:	2304      	movs	r3, #4
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e078      	b.n	80065ae <UART_SetConfig+0x1ba>
 80064bc:	2308      	movs	r3, #8
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e074      	b.n	80065ae <UART_SetConfig+0x1ba>
 80064c4:	2310      	movs	r3, #16
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e070      	b.n	80065ae <UART_SetConfig+0x1ba>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a8c      	ldr	r2, [pc, #560]	; (8006704 <UART_SetConfig+0x310>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d138      	bne.n	8006548 <UART_SetConfig+0x154>
 80064d6:	4b8a      	ldr	r3, [pc, #552]	; (8006700 <UART_SetConfig+0x30c>)
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	d82d      	bhi.n	8006540 <UART_SetConfig+0x14c>
 80064e4:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <UART_SetConfig+0xf8>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006541 	.word	0x08006541
 80064f4:	08006541 	.word	0x08006541
 80064f8:	08006541 	.word	0x08006541
 80064fc:	08006531 	.word	0x08006531
 8006500:	08006541 	.word	0x08006541
 8006504:	08006541 	.word	0x08006541
 8006508:	08006541 	.word	0x08006541
 800650c:	08006529 	.word	0x08006529
 8006510:	08006541 	.word	0x08006541
 8006514:	08006541 	.word	0x08006541
 8006518:	08006541 	.word	0x08006541
 800651c:	08006539 	.word	0x08006539
 8006520:	2300      	movs	r3, #0
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e042      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006528:	2302      	movs	r3, #2
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e03e      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006530:	2304      	movs	r3, #4
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e03a      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006538:	2308      	movs	r3, #8
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e036      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006540:	2310      	movs	r3, #16
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006546:	e032      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6a      	ldr	r2, [pc, #424]	; (80066f8 <UART_SetConfig+0x304>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d12a      	bne.n	80065a8 <UART_SetConfig+0x1b4>
 8006552:	4b6b      	ldr	r3, [pc, #428]	; (8006700 <UART_SetConfig+0x30c>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006558:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800655c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006560:	d01a      	beq.n	8006598 <UART_SetConfig+0x1a4>
 8006562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006566:	d81b      	bhi.n	80065a0 <UART_SetConfig+0x1ac>
 8006568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656c:	d00c      	beq.n	8006588 <UART_SetConfig+0x194>
 800656e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006572:	d815      	bhi.n	80065a0 <UART_SetConfig+0x1ac>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <UART_SetConfig+0x18c>
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d008      	beq.n	8006590 <UART_SetConfig+0x19c>
 800657e:	e00f      	b.n	80065a0 <UART_SetConfig+0x1ac>
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006586:	e012      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006588:	2302      	movs	r3, #2
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800658e:	e00e      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006590:	2304      	movs	r3, #4
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006596:	e00a      	b.n	80065ae <UART_SetConfig+0x1ba>
 8006598:	2308      	movs	r3, #8
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800659e:	e006      	b.n	80065ae <UART_SetConfig+0x1ba>
 80065a0:	2310      	movs	r3, #16
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a6:	e002      	b.n	80065ae <UART_SetConfig+0x1ba>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a51      	ldr	r2, [pc, #324]	; (80066f8 <UART_SetConfig+0x304>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d17a      	bne.n	80066ae <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d824      	bhi.n	800660a <UART_SetConfig+0x216>
 80065c0:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <UART_SetConfig+0x1d4>)
 80065c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c6:	bf00      	nop
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	0800660b 	.word	0x0800660b
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	0800660b 	.word	0x0800660b
 80065d8:	080065fb 	.word	0x080065fb
 80065dc:	0800660b 	.word	0x0800660b
 80065e0:	0800660b 	.word	0x0800660b
 80065e4:	0800660b 	.word	0x0800660b
 80065e8:	08006603 	.word	0x08006603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ec:	f7fe fcf6 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 80065f0:	61f8      	str	r0, [r7, #28]
        break;
 80065f2:	e010      	b.n	8006616 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f4:	4b44      	ldr	r3, [pc, #272]	; (8006708 <UART_SetConfig+0x314>)
 80065f6:	61fb      	str	r3, [r7, #28]
        break;
 80065f8:	e00d      	b.n	8006616 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fa:	f7fe fc57 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 80065fe:	61f8      	str	r0, [r7, #28]
        break;
 8006600:	e009      	b.n	8006616 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006606:	61fb      	str	r3, [r7, #28]
        break;
 8006608:	e005      	b.n	8006616 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8107 	beq.w	800682c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	429a      	cmp	r2, r3
 800662c:	d305      	bcc.n	800663a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	429a      	cmp	r2, r3
 8006638:	d903      	bls.n	8006642 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006640:	e0f4      	b.n	800682c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2200      	movs	r2, #0
 8006646:	461c      	mov	r4, r3
 8006648:	4615      	mov	r5, r2
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	022b      	lsls	r3, r5, #8
 8006654:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006658:	0222      	lsls	r2, r4, #8
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	6849      	ldr	r1, [r1, #4]
 800665e:	0849      	lsrs	r1, r1, #1
 8006660:	2000      	movs	r0, #0
 8006662:	4688      	mov	r8, r1
 8006664:	4681      	mov	r9, r0
 8006666:	eb12 0a08 	adds.w	sl, r2, r8
 800666a:	eb43 0b09 	adc.w	fp, r3, r9
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	4650      	mov	r0, sl
 800667e:	4659      	mov	r1, fp
 8006680:	f7fa faf2 	bl	8000c68 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4613      	mov	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d308      	bcc.n	80066a6 <UART_SetConfig+0x2b2>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669a:	d204      	bcs.n	80066a6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e0c2      	b.n	800682c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066ac:	e0be      	b.n	800682c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b6:	d16a      	bne.n	800678e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80066b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d834      	bhi.n	800672a <UART_SetConfig+0x336>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x2d4>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	0800670d 	.word	0x0800670d
 80066d0:	08006715 	.word	0x08006715
 80066d4:	0800672b 	.word	0x0800672b
 80066d8:	0800671b 	.word	0x0800671b
 80066dc:	0800672b 	.word	0x0800672b
 80066e0:	0800672b 	.word	0x0800672b
 80066e4:	0800672b 	.word	0x0800672b
 80066e8:	08006723 	.word	0x08006723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fe fc76 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e020      	b.n	8006736 <UART_SetConfig+0x342>
 80066f4:	efff69f3 	.word	0xefff69f3
 80066f8:	40008000 	.word	0x40008000
 80066fc:	40013800 	.word	0x40013800
 8006700:	40021000 	.word	0x40021000
 8006704:	40004400 	.word	0x40004400
 8006708:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800670c:	f7fe fc7c 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 8006710:	61f8      	str	r0, [r7, #28]
        break;
 8006712:	e010      	b.n	8006736 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006714:	4b4c      	ldr	r3, [pc, #304]	; (8006848 <UART_SetConfig+0x454>)
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e00d      	b.n	8006736 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800671a:	f7fe fbc7 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 800671e:	61f8      	str	r0, [r7, #28]
        break;
 8006720:	e009      	b.n	8006736 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006726:	61fb      	str	r3, [r7, #28]
        break;
 8006728:	e005      	b.n	8006736 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d077      	beq.n	800682c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	005a      	lsls	r2, r3, #1
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	441a      	add	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006750:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d916      	bls.n	8006786 <UART_SetConfig+0x392>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675e:	d212      	bcs.n	8006786 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f023 030f 	bic.w	r3, r3, #15
 8006768:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	b29b      	uxth	r3, r3
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	b29a      	uxth	r2, r3
 8006776:	8afb      	ldrh	r3, [r7, #22]
 8006778:	4313      	orrs	r3, r2
 800677a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	8afa      	ldrh	r2, [r7, #22]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	e052      	b.n	800682c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800678c:	e04e      	b.n	800682c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800678e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006792:	2b08      	cmp	r3, #8
 8006794:	d827      	bhi.n	80067e6 <UART_SetConfig+0x3f2>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <UART_SetConfig+0x3a8>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067d1 	.word	0x080067d1
 80067a8:	080067e7 	.word	0x080067e7
 80067ac:	080067d7 	.word	0x080067d7
 80067b0:	080067e7 	.word	0x080067e7
 80067b4:	080067e7 	.word	0x080067e7
 80067b8:	080067e7 	.word	0x080067e7
 80067bc:	080067df 	.word	0x080067df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fe fc0c 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 80067c4:	61f8      	str	r0, [r7, #28]
        break;
 80067c6:	e014      	b.n	80067f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fe fc1e 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 80067cc:	61f8      	str	r0, [r7, #28]
        break;
 80067ce:	e010      	b.n	80067f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d0:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <UART_SetConfig+0x454>)
 80067d2:	61fb      	str	r3, [r7, #28]
        break;
 80067d4:	e00d      	b.n	80067f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067d6:	f7fe fb69 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 80067da:	61f8      	str	r0, [r7, #28]
        break;
 80067dc:	e009      	b.n	80067f2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e2:	61fb      	str	r3, [r7, #28]
        break;
 80067e4:	e005      	b.n	80067f2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067f0:	bf00      	nop
    }

    if (pclk != 0U)
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d019      	beq.n	800682c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	085a      	lsrs	r2, r3, #1
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d909      	bls.n	8006826 <UART_SetConfig+0x432>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d205      	bcs.n	8006826 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	e002      	b.n	800682c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006838:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800683c:	4618      	mov	r0, r3
 800683e:	3728      	adds	r7, #40	; 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006846:	bf00      	nop
 8006848:	00f42400 	.word	0x00f42400

0800684c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00a      	beq.n	80068ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e0:	f003 0310 	and.w	r3, r3, #16
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00a      	beq.n	80068fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01a      	beq.n	8006962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694a:	d10a      	bne.n	8006962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b098      	sub	sp, #96	; 0x60
 8006994:	af02      	add	r7, sp, #8
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a0:	f7fb fe5e 	bl	8002660 <HAL_GetTick>
 80069a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d12e      	bne.n	8006a12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069bc:	2200      	movs	r2, #0
 80069be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f88c 	bl	8006ae0 <UART_WaitOnFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d021      	beq.n	8006a12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e2:	653b      	str	r3, [r7, #80]	; 0x50
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e062      	b.n	8006ad8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d149      	bne.n	8006ab4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f856 	bl	8006ae0 <UART_WaitOnFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03c      	beq.n	8006ab4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	623b      	str	r3, [r7, #32]
   return(result);
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8c:	61fa      	str	r2, [r7, #28]
 8006a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	69b9      	ldr	r1, [r7, #24]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e011      	b.n	8006ad8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3758      	adds	r7, #88	; 0x58
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af0:	e049      	b.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d045      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afa:	f7fb fdb1 	bl	8002660 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d302      	bcc.n	8006b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e048      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d031      	beq.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d110      	bne.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f8ff 	bl	8006d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2208      	movs	r2, #8
 8006b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e029      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b60:	d111      	bne.n	8006b86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f8e5 	bl	8006d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e00f      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	bf0c      	ite	eq
 8006b96:	2301      	moveq	r3, #1
 8006b98:	2300      	movne	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d0a6      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b097      	sub	sp, #92	; 0x5c
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d10e      	bne.n	8006c02 <UART_Start_Receive_IT+0x52>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <UART_Start_Receive_IT+0x48>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006bf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006bf6:	e02d      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	22ff      	movs	r2, #255	; 0xff
 8006bfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c00:	e028      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10d      	bne.n	8006c26 <UART_Start_Receive_IT+0x76>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <UART_Start_Receive_IT+0x6c>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	22ff      	movs	r2, #255	; 0xff
 8006c16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c1a:	e01b      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	227f      	movs	r2, #127	; 0x7f
 8006c20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c24:	e016      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c2e:	d10d      	bne.n	8006c4c <UART_Start_Receive_IT+0x9c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <UART_Start_Receive_IT+0x92>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	227f      	movs	r2, #127	; 0x7f
 8006c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c40:	e008      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	223f      	movs	r2, #63	; 0x3f
 8006c46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c4a:	e003      	b.n	8006c54 <UART_Start_Receive_IT+0xa4>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2222      	movs	r2, #34	; 0x22
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	f043 0301 	orr.w	r3, r3, #1
 8006c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c84:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e5      	bne.n	8006c64 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca0:	d107      	bne.n	8006cb2 <UART_Start_Receive_IT+0x102>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <UART_Start_Receive_IT+0x184>)
 8006cae:	669a      	str	r2, [r3, #104]	; 0x68
 8006cb0:	e002      	b.n	8006cb8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <UART_Start_Receive_IT+0x188>)
 8006cb6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d019      	beq.n	8006cf4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce6:	e841 2300 	strex	r3, r2, [r1]
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1e6      	bne.n	8006cc0 <UART_Start_Receive_IT+0x110>
 8006cf2:	e018      	b.n	8006d26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	613b      	str	r3, [r7, #16]
   return(result);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	653b      	str	r3, [r7, #80]	; 0x50
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	69f9      	ldr	r1, [r7, #28]
 8006d18:	6a3a      	ldr	r2, [r7, #32]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	375c      	adds	r7, #92	; 0x5c
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	08007041 	.word	0x08007041
 8006d38:	08006e85 	.word	0x08006e85

08006d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b095      	sub	sp, #84	; 0x54
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	643b      	str	r3, [r7, #64]	; 0x40
 8006d64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e6      	bne.n	8006d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3308      	adds	r3, #8
 8006d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e5      	bne.n	8006d76 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d118      	bne.n	8006de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f023 0310 	bic.w	r3, r3, #16
 8006dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006df8:	bf00      	nop
 8006dfa:	3754      	adds	r7, #84	; 0x54
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7ff fac8 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6979      	ldr	r1, [r7, #20]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	613b      	str	r3, [r7, #16]
   return(result);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7ff fa8a 	bl	8006390 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7c:	bf00      	nop
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b09c      	sub	sp, #112	; 0x70
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e92:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9c:	2b22      	cmp	r3, #34	; 0x22
 8006e9e:	f040 80be 	bne.w	800701e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ea8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006eac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006eb0:	b2d9      	uxtb	r1, r3
 8006eb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 80a3 	bne.w	8007032 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e6      	bne.n	8006eec <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	667b      	str	r3, [r7, #100]	; 0x64
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e5      	bne.n	8006f1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a34      	ldr	r2, [pc, #208]	; (800703c <UART_RxISR_8BIT+0x1b8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01f      	beq.n	8006fb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d018      	beq.n	8006fb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f92:	663b      	str	r3, [r7, #96]	; 0x60
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d12e      	bne.n	8007016 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fdc:	61fb      	str	r3, [r7, #28]
 8006fde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	69b9      	ldr	r1, [r7, #24]
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e6      	bne.n	8006fbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d103      	bne.n	8007006 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2210      	movs	r2, #16
 8007004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fb f896 	bl	8002140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007014:	e00d      	b.n	8007032 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff f9c4 	bl	80063a4 <HAL_UART_RxCpltCallback>
}
 800701c:	e009      	b.n	8007032 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	8b1b      	ldrh	r3, [r3, #24]
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0208 	orr.w	r2, r2, #8
 800702e:	b292      	uxth	r2, r2
 8007030:	831a      	strh	r2, [r3, #24]
}
 8007032:	bf00      	nop
 8007034:	3770      	adds	r7, #112	; 0x70
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	40008000 	.word	0x40008000

08007040 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b09c      	sub	sp, #112	; 0x70
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800704e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007058:	2b22      	cmp	r3, #34	; 0x22
 800705a:	f040 80be 	bne.w	80071da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007064:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800706e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007072:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007076:	4013      	ands	r3, r2
 8007078:	b29a      	uxth	r2, r3
 800707a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800707c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	1c9a      	adds	r2, r3, #2
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800708e:	b29b      	uxth	r3, r3
 8007090:	3b01      	subs	r3, #1
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 80a3 	bne.w	80071ee <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070bc:	667b      	str	r3, [r7, #100]	; 0x64
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54
 80070c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e6      	bne.n	80070a8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	663b      	str	r3, [r7, #96]	; 0x60
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070fa:	643a      	str	r2, [r7, #64]	; 0x40
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e5      	bne.n	80070da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a34      	ldr	r2, [pc, #208]	; (80071f8 <UART_RxISR_16BIT+0x1b8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01f      	beq.n	800716c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d018      	beq.n	800716c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	61fb      	str	r3, [r7, #28]
   return(result);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800714e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800715e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e6      	bne.n	800713a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007170:	2b01      	cmp	r3, #1
 8007172:	d12e      	bne.n	80071d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d103      	bne.n	80071c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2210      	movs	r2, #16
 80071c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fa ffb8 	bl	8002140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071d0:	e00d      	b.n	80071ee <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f8e6 	bl	80063a4 <HAL_UART_RxCpltCallback>
}
 80071d8:	e009      	b.n	80071ee <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	8b1b      	ldrh	r3, [r3, #24]
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f042 0208 	orr.w	r2, r2, #8
 80071ea:	b292      	uxth	r2, r2
 80071ec:	831a      	strh	r2, [r3, #24]
}
 80071ee:	bf00      	nop
 80071f0:	3770      	adds	r7, #112	; 0x70
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	40008000 	.word	0x40008000

080071fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08c      	sub	sp, #48	; 0x30
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722a:	2b20      	cmp	r3, #32
 800722c:	d13b      	bne.n	80072a6 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e034      	b.n	80072a8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	461a      	mov	r2, r3
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f7ff fcad 	bl	8006bb0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725a:	2b01      	cmp	r3, #1
 800725c:	d11d      	bne.n	800729a <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2210      	movs	r2, #16
 8007264:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	617b      	str	r3, [r7, #20]
   return(result);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f043 0310 	orr.w	r3, r3, #16
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
 8007286:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6a39      	ldr	r1, [r7, #32]
 800728a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	61fb      	str	r3, [r7, #28]
   return(result);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e6      	bne.n	8007266 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8007298:	e002      	b.n	80072a0 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80072a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a4:	e000      	b.n	80072a8 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3730      	adds	r7, #48	; 0x30
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <__NVIC_SetPriority>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db0a      	blt.n	80072da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	490c      	ldr	r1, [pc, #48]	; (80072fc <__NVIC_SetPriority+0x4c>)
 80072ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ce:	0112      	lsls	r2, r2, #4
 80072d0:	b2d2      	uxtb	r2, r2
 80072d2:	440b      	add	r3, r1
 80072d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072d8:	e00a      	b.n	80072f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	4908      	ldr	r1, [pc, #32]	; (8007300 <__NVIC_SetPriority+0x50>)
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	3b04      	subs	r3, #4
 80072e8:	0112      	lsls	r2, r2, #4
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	440b      	add	r3, r1
 80072ee:	761a      	strb	r2, [r3, #24]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	e000e100 	.word	0xe000e100
 8007300:	e000ed00 	.word	0xe000ed00

08007304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <SysTick_Handler+0x1c>)
 800730a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800730c:	f001 ff12 	bl	8009134 <xTaskGetSchedulerState>
 8007310:	4603      	mov	r3, r0
 8007312:	2b01      	cmp	r3, #1
 8007314:	d001      	beq.n	800731a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007316:	f002 fcf7 	bl	8009d08 <xPortSysTickHandler>
  }
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	e000e010 	.word	0xe000e010

08007324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007328:	2100      	movs	r1, #0
 800732a:	f06f 0004 	mvn.w	r0, #4
 800732e:	f7ff ffbf 	bl	80072b0 <__NVIC_SetPriority>
#endif
}
 8007332:	bf00      	nop
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733e:	f3ef 8305 	mrs	r3, IPSR
 8007342:	603b      	str	r3, [r7, #0]
  return(result);
 8007344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800734a:	f06f 0305 	mvn.w	r3, #5
 800734e:	607b      	str	r3, [r7, #4]
 8007350:	e00c      	b.n	800736c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <osKernelInitialize+0x44>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d105      	bne.n	8007366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800735a:	4b08      	ldr	r3, [pc, #32]	; (800737c <osKernelInitialize+0x44>)
 800735c:	2201      	movs	r2, #1
 800735e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007360:	2300      	movs	r3, #0
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e002      	b.n	800736c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800736c:	687b      	ldr	r3, [r7, #4]
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20007654 	.word	0x20007654

08007380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	603b      	str	r3, [r7, #0]
  return(result);
 800738c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e010      	b.n	80073bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <osKernelStart+0x48>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d109      	bne.n	80073b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073a2:	f7ff ffbf 	bl	8007324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073a6:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <osKernelStart+0x48>)
 80073a8:	2202      	movs	r2, #2
 80073aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073ac:	f001 fa66 	bl	800887c <vTaskStartScheduler>
      stat = osOK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	e002      	b.n	80073bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073b6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073bc:	687b      	ldr	r3, [r7, #4]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20007654 	.word	0x20007654

080073cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08e      	sub	sp, #56	; 0x38
 80073d0:	af04      	add	r7, sp, #16
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073dc:	f3ef 8305 	mrs	r3, IPSR
 80073e0:	617b      	str	r3, [r7, #20]
  return(result);
 80073e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d17e      	bne.n	80074e6 <osThreadNew+0x11a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d07b      	beq.n	80074e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80073f2:	2318      	movs	r3, #24
 80073f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d045      	beq.n	8007492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <osThreadNew+0x48>
        name = attr->name;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <osThreadNew+0x6e>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b38      	cmp	r3, #56	; 0x38
 800742c:	d805      	bhi.n	800743a <osThreadNew+0x6e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <osThreadNew+0x72>
        return (NULL);
 800743a:	2300      	movs	r3, #0
 800743c:	e054      	b.n	80074e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <osThreadNew+0xa8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2ba7      	cmp	r3, #167	; 0xa7
 800745c:	d90a      	bls.n	8007474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007462:	2b00      	cmp	r3, #0
 8007464:	d006      	beq.n	8007474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <osThreadNew+0xa8>
        mem = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	e010      	b.n	8007496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <osThreadNew+0xca>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <osThreadNew+0xca>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <osThreadNew+0xca>
          mem = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	e001      	b.n	8007496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d110      	bne.n	80074be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074a4:	9202      	str	r2, [sp, #8]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	6a3a      	ldr	r2, [r7, #32]
 80074b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fff6 	bl	80084a4 <xTaskCreateStatic>
 80074b8:	4603      	mov	r3, r0
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	e013      	b.n	80074e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d110      	bne.n	80074e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	f107 0310 	add.w	r3, r7, #16
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 f841 	bl	800855e <xTaskCreate>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <osThreadNew+0x11a>
            hTask = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f8:	f3ef 8305 	mrs	r3, IPSR
 80074fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80074fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <osDelay+0x1c>
    stat = osErrorISR;
 8007504:	f06f 0305 	mvn.w	r3, #5
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	e007      	b.n	800751c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f97c 	bl	8008814 <vTaskDelay>
    }
  }

  return (stat);
 800751c:	68fb      	ldr	r3, [r7, #12]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007526:	b580      	push	{r7, lr}
 8007528:	b08a      	sub	sp, #40	; 0x28
 800752a:	af02      	add	r7, sp, #8
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007536:	f3ef 8305 	mrs	r3, IPSR
 800753a:	613b      	str	r3, [r7, #16]
  return(result);
 800753c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800753e:	2b00      	cmp	r3, #0
 8007540:	d15f      	bne.n	8007602 <osMessageQueueNew+0xdc>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d05c      	beq.n	8007602 <osMessageQueueNew+0xdc>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d059      	beq.n	8007602 <osMessageQueueNew+0xdc>
    mem = -1;
 800754e:	f04f 33ff 	mov.w	r3, #4294967295
 8007552:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d029      	beq.n	80075ae <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d012      	beq.n	8007588 <osMessageQueueNew+0x62>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b4f      	cmp	r3, #79	; 0x4f
 8007568:	d90e      	bls.n	8007588 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00a      	beq.n	8007588 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695a      	ldr	r2, [r3, #20]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <osMessageQueueNew+0x62>
        mem = 1;
 8007582:	2301      	movs	r3, #1
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e014      	b.n	80075b2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d110      	bne.n	80075b2 <osMessageQueueNew+0x8c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <osMessageQueueNew+0x8c>
          mem = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e001      	b.n	80075b2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10b      	bne.n	80075d0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	2100      	movs	r1, #0
 80075c2:	9100      	str	r1, [sp, #0]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 fa2e 	bl	8007a28 <xQueueGenericCreateStatic>
 80075cc:	61f8      	str	r0, [r7, #28]
 80075ce:	e008      	b.n	80075e2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80075d6:	2200      	movs	r2, #0
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fa9c 	bl	8007b18 <xQueueGenericCreate>
 80075e0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e001      	b.n	80075fa <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80075fa:	6979      	ldr	r1, [r7, #20]
 80075fc:	69f8      	ldr	r0, [r7, #28]
 80075fe:	f000 fef3 	bl	80083e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007602:	69fb      	ldr	r3, [r7, #28]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007624:	f3ef 8305 	mrs	r3, IPSR
 8007628:	617b      	str	r3, [r7, #20]
  return(result);
 800762a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800762c:	2b00      	cmp	r3, #0
 800762e:	d028      	beq.n	8007682 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <osMessageQueuePut+0x36>
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <osMessageQueuePut+0x36>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d003      	beq.n	800764a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007642:	f06f 0303 	mvn.w	r3, #3
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e038      	b.n	80076bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800764e:	f107 0210 	add.w	r2, r7, #16
 8007652:	2300      	movs	r3, #0
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	69b8      	ldr	r0, [r7, #24]
 8007658:	f000 fbba 	bl	8007dd0 <xQueueGenericSendFromISR>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d003      	beq.n	800766a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007662:	f06f 0302 	mvn.w	r3, #2
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e028      	b.n	80076bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d025      	beq.n	80076bc <osMessageQueuePut+0xb0>
 8007670:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <osMessageQueuePut+0xbc>)
 8007672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	e01c      	b.n	80076bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <osMessageQueuePut+0x82>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d103      	bne.n	8007696 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800768e:	f06f 0303 	mvn.w	r3, #3
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e012      	b.n	80076bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007696:	2300      	movs	r3, #0
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	69b8      	ldr	r0, [r7, #24]
 800769e:	f000 fa99 	bl	8007bd4 <xQueueGenericSend>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d009      	beq.n	80076bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80076ae:	f06f 0301 	mvn.w	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	e002      	b.n	80076bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80076b6:	f06f 0302 	mvn.w	r3, #2
 80076ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80076bc:	69fb      	ldr	r3, [r7, #28]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b088      	sub	sp, #32
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e2:	f3ef 8305 	mrs	r3, IPSR
 80076e6:	617b      	str	r3, [r7, #20]
  return(result);
 80076e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d028      	beq.n	8007740 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <osMessageQueueGet+0x34>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <osMessageQueueGet+0x34>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007700:	f06f 0303 	mvn.w	r3, #3
 8007704:	61fb      	str	r3, [r7, #28]
 8007706:	e037      	b.n	8007778 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800770c:	f107 0310 	add.w	r3, r7, #16
 8007710:	461a      	mov	r2, r3
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	69b8      	ldr	r0, [r7, #24]
 8007716:	f000 fcd7 	bl	80080c8 <xQueueReceiveFromISR>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d003      	beq.n	8007728 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007720:	f06f 0302 	mvn.w	r3, #2
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	e027      	b.n	8007778 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d024      	beq.n	8007778 <osMessageQueueGet+0xac>
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <osMessageQueueGet+0xb8>)
 8007730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	e01b      	b.n	8007778 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <osMessageQueueGet+0x80>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800774c:	f06f 0303 	mvn.w	r3, #3
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	e011      	b.n	8007778 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	69b8      	ldr	r0, [r7, #24]
 800775a:	f000 fbd5 	bl	8007f08 <xQueueReceive>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d009      	beq.n	8007778 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800776a:	f06f 0301 	mvn.w	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e002      	b.n	8007778 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007772:	f06f 0302 	mvn.w	r3, #2
 8007776:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007778:	69fb      	ldr	r3, [r7, #28]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007798:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	4a06      	ldr	r2, [pc, #24]	; (80077b8 <vApplicationGetIdleTaskMemory+0x30>)
 800779e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2280      	movs	r2, #128	; 0x80
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20007658 	.word	0x20007658
 80077b8:	20007700 	.word	0x20007700

080077bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a07      	ldr	r2, [pc, #28]	; (80077e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80077cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4a06      	ldr	r2, [pc, #24]	; (80077ec <vApplicationGetTimerTaskMemory+0x30>)
 80077d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077da:	601a      	str	r2, [r3, #0]
}
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20007900 	.word	0x20007900
 80077ec:	200079a8 	.word	0x200079a8

080077f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f103 0208 	add.w	r2, r3, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0208 	add.w	r2, r3, #8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f103 0208 	add.w	r2, r3, #8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800784a:	b480      	push	{r7}
 800784c:	b085      	sub	sp, #20
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d103      	bne.n	80078b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e00c      	b.n	80078cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3308      	adds	r3, #8
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e002      	b.n	80078c0 <vListInsert+0x2e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d2f6      	bcs.n	80078ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	601a      	str	r2, [r3, #0]
}
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6892      	ldr	r2, [r2, #8]
 800791a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	d103      	bne.n	8007938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1e5a      	subs	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800797e:	bf00      	nop
 8007980:	e7fe      	b.n	8007980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007982:	f002 f92f 	bl	8009be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007992:	fb01 f303 	mul.w	r3, r1, r3
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	3b01      	subs	r3, #1
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	441a      	add	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	22ff      	movs	r2, #255	; 0xff
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d114      	bne.n	8007a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01a      	beq.n	8007a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3310      	adds	r3, #16
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f9e3 	bl	8008db0 <xTaskRemoveFromEventList>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d012      	beq.n	8007a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <xQueueGenericReset+0xcc>)
 80079f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	e009      	b.n	8007a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3310      	adds	r3, #16
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fef2 	bl	80077f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3324      	adds	r3, #36	; 0x24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff feed 	bl	80077f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a16:	f002 f915 	bl	8009c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a1a:	2301      	movs	r3, #1
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <xQueueGenericCreateStatic+0x52>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <xQueueGenericCreateStatic+0x56>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <xQueueGenericCreateStatic+0x58>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d102      	bne.n	8007aa6 <xQueueGenericCreateStatic+0x7e>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericCreateStatic+0x82>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericCreateStatic+0x84>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	61fb      	str	r3, [r7, #28]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ac6:	2350      	movs	r3, #80	; 0x50
 8007ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b50      	cmp	r3, #80	; 0x50
 8007ace:	d00a      	beq.n	8007ae6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	61bb      	str	r3, [r7, #24]
}
 8007ae2:	bf00      	nop
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ae6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00d      	beq.n	8007b0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007afa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4613      	mov	r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f83f 	bl	8007b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3730      	adds	r7, #48	; 0x30
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	613b      	str	r3, [r7, #16]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	3350      	adds	r3, #80	; 0x50
 8007b50:	4618      	mov	r0, r3
 8007b52:	f002 f969 	bl	8009e28 <pvPortMalloc>
 8007b56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d011      	beq.n	8007b82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	3350      	adds	r3, #80	; 0x50
 8007b66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b70:	79fa      	ldrb	r2, [r7, #7]
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	4613      	mov	r3, r2
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f805 	bl	8007b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b82:	69bb      	ldr	r3, [r7, #24]
	}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e002      	b.n	8007bae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007bba:	2101      	movs	r1, #1
 8007bbc:	69b8      	ldr	r0, [r7, #24]
 8007bbe:	f7ff fecb 	bl	8007958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <xQueueGenericSend+0x32>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <xQueueGenericSend+0x40>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <xQueueGenericSend+0x44>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <xQueueGenericSend+0x46>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xQueueGenericSend+0x60>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSend+0x6e>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <xQueueGenericSend+0x72>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <xQueueGenericSend+0x74>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	623b      	str	r3, [r7, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c62:	f001 fa67 	bl	8009134 <xTaskGetSchedulerState>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <xQueueGenericSend+0x9e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <xQueueGenericSend+0xa2>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueGenericSend+0xa4>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	61fb      	str	r3, [r7, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c92:	f001 ffa7 	bl	8009be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <xQueueGenericSend+0xd4>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d129      	bne.n	8007cfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cae:	f000 fa8b 	bl	80081c8 <prvCopyDataToQueue>
 8007cb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	3324      	adds	r3, #36	; 0x24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 f875 	bl	8008db0 <xTaskRemoveFromEventList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d013      	beq.n	8007cf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	e00a      	b.n	8007cf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ce4:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cf4:	f001 ffa6 	bl	8009c44 <vPortExitCritical>
				return pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e063      	b.n	8007dc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d02:	f001 ff9f 	bl	8009c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e05c      	b.n	8007dc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d10:	f107 0314 	add.w	r3, r7, #20
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f8af 	bl	8008e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d1e:	f001 ff91 	bl	8009c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d22:	f000 fe1b 	bl	800895c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d26:	f001 ff5d 	bl	8009be4 <vPortEnterCritical>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d103      	bne.n	8007d40 <xQueueGenericSend+0x16c>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d103      	bne.n	8007d56 <xQueueGenericSend+0x182>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d56:	f001 ff75 	bl	8009c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d5a:	1d3a      	adds	r2, r7, #4
 8007d5c:	f107 0314 	add.w	r3, r7, #20
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 f89e 	bl	8008ea4 <xTaskCheckForTimeOut>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d124      	bne.n	8007db8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d70:	f000 fb22 	bl	80083b8 <prvIsQueueFull>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d018      	beq.n	8007dac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	3310      	adds	r3, #16
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 ffc4 	bl	8008d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d8a:	f000 faad 	bl	80082e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d8e:	f000 fdf3 	bl	8008978 <xTaskResumeAll>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f47f af7c 	bne.w	8007c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	e772      	b.n	8007c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dae:	f000 fa9b 	bl	80082e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db2:	f000 fde1 	bl	8008978 <xTaskResumeAll>
 8007db6:	e76c      	b.n	8007c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dba:	f000 fa95 	bl	80082e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dbe:	f000 fddb 	bl	8008978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3738      	adds	r7, #56	; 0x38
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b090      	sub	sp, #64	; 0x40
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <xQueueGenericSendFromISR+0x3c>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <xQueueGenericSendFromISR+0x40>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <xQueueGenericSendFromISR+0x42>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d103      	bne.n	8007e3a <xQueueGenericSendFromISR+0x6a>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSendFromISR+0x6e>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSendFromISR+0x70>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	623b      	str	r3, [r7, #32]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e5a:	f001 ffa5 	bl	8009da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	61fa      	str	r2, [r7, #28]
 8007e74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d302      	bcc.n	8007e8c <xQueueGenericSendFromISR+0xbc>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d12f      	bne.n	8007eec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ea2:	f000 f991 	bl	80081c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ea6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d112      	bne.n	8007ed6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d016      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	3324      	adds	r3, #36	; 0x24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 ff77 	bl	8008db0 <xTaskRemoveFromEventList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00e      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e007      	b.n	8007ee6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007eda:	3301      	adds	r3, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	b25a      	sxtb	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007eea:	e001      	b.n	8007ef0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007efa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3740      	adds	r7, #64	; 0x40
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <xQueueReceive+0x30>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	623b      	str	r3, [r7, #32]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <xQueueReceive+0x3e>
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueReceive+0x42>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueReceive+0x44>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <xQueueReceive+0x5e>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61fb      	str	r3, [r7, #28]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f66:	f001 f8e5 	bl	8009134 <xTaskGetSchedulerState>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xQueueReceive+0x6e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueReceive+0x72>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueReceive+0x74>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueReceive+0x8e>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f96:	f001 fe25 	bl	8009be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01f      	beq.n	8007fe6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007faa:	f000 f977 	bl	800829c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1e5a      	subs	r2, r3, #1
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00f      	beq.n	8007fde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fef4 	bl	8008db0 <xTaskRemoveFromEventList>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fce:	4b3d      	ldr	r3, [pc, #244]	; (80080c4 <xQueueReceive+0x1bc>)
 8007fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fde:	f001 fe31 	bl	8009c44 <vPortExitCritical>
				return pdPASS;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e069      	b.n	80080ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fec:	f001 fe2a 	bl	8009c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e062      	b.n	80080ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffa:	f107 0310 	add.w	r3, r7, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ff3a 	bl	8008e78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008008:	f001 fe1c 	bl	8009c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800c:	f000 fca6 	bl	800895c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008010:	f001 fde8 	bl	8009be4 <vPortEnterCritical>
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801a:	b25b      	sxtb	r3, r3
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d103      	bne.n	800802a <xQueueReceive+0x122>
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008030:	b25b      	sxtb	r3, r3
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d103      	bne.n	8008040 <xQueueReceive+0x138>
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008040:	f001 fe00 	bl	8009c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008044:	1d3a      	adds	r2, r7, #4
 8008046:	f107 0310 	add.w	r3, r7, #16
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f000 ff29 	bl	8008ea4 <xTaskCheckForTimeOut>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d123      	bne.n	80080a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800805a:	f000 f997 	bl	800838c <prvIsQueueEmpty>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d017      	beq.n	8008094 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fe4f 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008074:	f000 f938 	bl	80082e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008078:	f000 fc7e 	bl	8008978 <xTaskResumeAll>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d189      	bne.n	8007f96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008082:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <xQueueReceive+0x1bc>)
 8008084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	e780      	b.n	8007f96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008096:	f000 f927 	bl	80082e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809a:	f000 fc6d 	bl	8008978 <xTaskResumeAll>
 800809e:	e77a      	b.n	8007f96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a2:	f000 f921 	bl	80082e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a6:	f000 fc67 	bl	8008978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ac:	f000 f96e 	bl	800838c <prvIsQueueEmpty>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f43f af6f 	beq.w	8007f96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3730      	adds	r7, #48	; 0x30
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08e      	sub	sp, #56	; 0x38
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	623b      	str	r3, [r7, #32]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <xQueueReceiveFromISR+0x3a>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <xQueueReceiveFromISR+0x3e>
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <xQueueReceiveFromISR+0x40>
 8008106:	2300      	movs	r3, #0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61fb      	str	r3, [r7, #28]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008122:	f001 fe41 	bl	8009da8 <vPortValidateInterruptPriority>
	__asm volatile
 8008126:	f3ef 8211 	mrs	r2, BASEPRI
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	61ba      	str	r2, [r7, #24]
 800813c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800813e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	2b00      	cmp	r3, #0
 800814c:	d02f      	beq.n	80081ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008158:	68b9      	ldr	r1, [r7, #8]
 800815a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800815c:	f000 f89e 	bl	800829c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	1e5a      	subs	r2, r3, #1
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d112      	bne.n	8008198 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d016      	beq.n	80081a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	3310      	adds	r3, #16
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fe16 	bl	8008db0 <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00e      	beq.n	80081a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e007      	b.n	80081a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819c:	3301      	adds	r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	b25a      	sxtb	r2, r3
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80081a8:	2301      	movs	r3, #1
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
 80081ac:	e001      	b.n	80081b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f383 8811 	msr	BASEPRI, r3
}
 80081bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	; 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081d4:	2300      	movs	r3, #0
 80081d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10d      	bne.n	8008202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d14d      	bne.n	800828a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 ffbc 	bl	8009170 <xTaskPriorityDisinherit>
 80081f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	e043      	b.n	800828a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d119      	bne.n	800823c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6858      	ldr	r0, [r3, #4]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	461a      	mov	r2, r3
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	f002 ff74 	bl	800b100 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	441a      	add	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	429a      	cmp	r2, r3
 8008230:	d32b      	bcc.n	800828a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	e026      	b.n	800828a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68d8      	ldr	r0, [r3, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	461a      	mov	r2, r3
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	f002 ff5a 	bl	800b100 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	425b      	negs	r3, r3
 8008256:	441a      	add	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	429a      	cmp	r2, r3
 8008266:	d207      	bcs.n	8008278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	425b      	negs	r3, r3
 8008272:	441a      	add	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d105      	bne.n	800828a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	3b01      	subs	r3, #1
 8008288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008292:	697b      	ldr	r3, [r7, #20]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d018      	beq.n	80082e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	441a      	add	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d303      	bcc.n	80082d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68d9      	ldr	r1, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	461a      	mov	r2, r3
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f002 ff10 	bl	800b100 <memcpy>
	}
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082f0:	f001 fc78 	bl	8009be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082fc:	e011      	b.n	8008322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	2b00      	cmp	r3, #0
 8008304:	d012      	beq.n	800832c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3324      	adds	r3, #36	; 0x24
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fd50 	bl	8008db0 <xTaskRemoveFromEventList>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008316:	f000 fe27 	bl	8008f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	3b01      	subs	r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	dce9      	bgt.n	80082fe <prvUnlockQueue+0x16>
 800832a:	e000      	b.n	800832e <prvUnlockQueue+0x46>
					break;
 800832c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	22ff      	movs	r2, #255	; 0xff
 8008332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008336:	f001 fc85 	bl	8009c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800833a:	f001 fc53 	bl	8009be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008346:	e011      	b.n	800836c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d012      	beq.n	8008376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3310      	adds	r3, #16
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fd2b 	bl	8008db0 <xTaskRemoveFromEventList>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008360:	f000 fe02 	bl	8008f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	3b01      	subs	r3, #1
 8008368:	b2db      	uxtb	r3, r3
 800836a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800836c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	dce9      	bgt.n	8008348 <prvUnlockQueue+0x60>
 8008374:	e000      	b.n	8008378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	22ff      	movs	r2, #255	; 0xff
 800837c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008380:	f001 fc60 	bl	8009c44 <vPortExitCritical>
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008394:	f001 fc26 	bl	8009be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e001      	b.n	80083aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083aa:	f001 fc4b 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 80083ae:	68fb      	ldr	r3, [r7, #12]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083c0:	f001 fc10 	bl	8009be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d102      	bne.n	80083d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083d0:	2301      	movs	r3, #1
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e001      	b.n	80083da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083da:	f001 fc33 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083f2:	2300      	movs	r3, #0
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e014      	b.n	8008422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083f8:	4a0f      	ldr	r2, [pc, #60]	; (8008438 <vQueueAddToRegistry+0x50>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10b      	bne.n	800841c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008404:	490c      	ldr	r1, [pc, #48]	; (8008438 <vQueueAddToRegistry+0x50>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800840e:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <vQueueAddToRegistry+0x50>)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800841a:	e006      	b.n	800842a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2b07      	cmp	r3, #7
 8008426:	d9e7      	bls.n	80083f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	20007da8 	.word	0x20007da8

0800843c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800844c:	f001 fbca 	bl	8009be4 <vPortEnterCritical>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d103      	bne.n	8008466 <vQueueWaitForMessageRestricted+0x2a>
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008472:	d103      	bne.n	800847c <vQueueWaitForMessageRestricted+0x40>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	f001 fbe2 	bl	8009c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fc61 	bl	8008d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f7ff ff26 	bl	80082e8 <prvUnlockQueue>
	}
 800849c:	bf00      	nop
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af04      	add	r7, sp, #16
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	623b      	str	r3, [r7, #32]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xTaskCreateStatic+0x46>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61fb      	str	r3, [r7, #28]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ea:	23a8      	movs	r3, #168	; 0xa8
 80084ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	2ba8      	cmp	r3, #168	; 0xa8
 80084f2:	d00a      	beq.n	800850a <xTaskCreateStatic+0x66>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	e7fe      	b.n	8008508 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800850a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01e      	beq.n	8008550 <xTaskCreateStatic+0xac>
 8008512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008514:	2b00      	cmp	r3, #0
 8008516:	d01b      	beq.n	8008550 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008520:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	2202      	movs	r2, #2
 8008526:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800852a:	2300      	movs	r3, #0
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	9302      	str	r3, [sp, #8]
 8008532:	f107 0314 	add.w	r3, r7, #20
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	68b9      	ldr	r1, [r7, #8]
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 f850 	bl	80085e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800854a:	f000 f8f3 	bl	8008734 <prvAddNewTaskToReadyList>
 800854e:	e001      	b.n	8008554 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008554:	697b      	ldr	r3, [r7, #20]
	}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	; 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800855e:	b580      	push	{r7, lr}
 8008560:	b08c      	sub	sp, #48	; 0x30
 8008562:	af04      	add	r7, sp, #16
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fc58 	bl	8009e28 <pvPortMalloc>
 8008578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00e      	beq.n	800859e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008580:	20a8      	movs	r0, #168	; 0xa8
 8008582:	f001 fc51 	bl	8009e28 <pvPortMalloc>
 8008586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
 8008594:	e005      	b.n	80085a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008596:	6978      	ldr	r0, [r7, #20]
 8008598:	f001 fd12 	bl	8009fc0 <vPortFree>
 800859c:	e001      	b.n	80085a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d017      	beq.n	80085d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b0:	88fa      	ldrh	r2, [r7, #6]
 80085b2:	2300      	movs	r3, #0
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f80e 	bl	80085e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085cc:	69f8      	ldr	r0, [r7, #28]
 80085ce:	f000 f8b1 	bl	8008734 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	e002      	b.n	80085de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295
 80085dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085de:	69bb      	ldr	r3, [r7, #24]
	}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	461a      	mov	r2, r3
 8008600:	21a5      	movs	r1, #165	; 0xa5
 8008602:	f002 fc8b 	bl	800af1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008610:	3b01      	subs	r3, #1
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <prvInitialiseNewTask+0x58>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	617b      	str	r3, [r7, #20]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01f      	beq.n	8008686 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	e012      	b.n	8008672 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	7819      	ldrb	r1, [r3, #0]
 8008654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	3334      	adds	r3, #52	; 0x34
 800865c:	460a      	mov	r2, r1
 800865e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d006      	beq.n	800867a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	3301      	adds	r3, #1
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	2b0f      	cmp	r3, #15
 8008676:	d9e9      	bls.n	800864c <prvInitialiseNewTask+0x64>
 8008678:	e000      	b.n	800867c <prvInitialiseNewTask+0x94>
			{
				break;
 800867a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008684:	e003      	b.n	800868e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	2b37      	cmp	r3, #55	; 0x37
 8008692:	d901      	bls.n	8008698 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008694:	2337      	movs	r3, #55	; 0x37
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2200      	movs	r2, #0
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	3304      	adds	r3, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff f8be 	bl	8007830 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	3318      	adds	r3, #24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff f8b9 	bl	8007830 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	3354      	adds	r3, #84	; 0x54
 80086e8:	224c      	movs	r2, #76	; 0x4c
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f002 fc15 	bl	800af1c <memset>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	4a0c      	ldr	r2, [pc, #48]	; (8008728 <prvInitialiseNewTask+0x140>)
 80086f6:	659a      	str	r2, [r3, #88]	; 0x58
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	4a0c      	ldr	r2, [pc, #48]	; (800872c <prvInitialiseNewTask+0x144>)
 80086fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	4a0b      	ldr	r2, [pc, #44]	; (8008730 <prvInitialiseNewTask+0x148>)
 8008702:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	69b8      	ldr	r0, [r7, #24]
 800870a:	f001 f941 	bl	8009990 <pxPortInitialiseStack>
 800870e:	4602      	mov	r2, r0
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008720:	bf00      	nop
 8008722:	3720      	adds	r7, #32
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	2000e5e4 	.word	0x2000e5e4
 800872c:	2000e64c 	.word	0x2000e64c
 8008730:	2000e6b4 	.word	0x2000e6b4

08008734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800873c:	f001 fa52 	bl	8009be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008740:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <prvAddNewTaskToReadyList+0xc4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a2c      	ldr	r2, [pc, #176]	; (80087f8 <prvAddNewTaskToReadyList+0xc4>)
 8008748:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800874a:	4b2c      	ldr	r3, [pc, #176]	; (80087fc <prvAddNewTaskToReadyList+0xc8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008752:	4a2a      	ldr	r2, [pc, #168]	; (80087fc <prvAddNewTaskToReadyList+0xc8>)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008758:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <prvAddNewTaskToReadyList+0xc4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d110      	bne.n	8008782 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008760:	f000 fc26 	bl	8008fb0 <prvInitialiseTaskLists>
 8008764:	e00d      	b.n	8008782 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008766:	4b26      	ldr	r3, [pc, #152]	; (8008800 <prvAddNewTaskToReadyList+0xcc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d109      	bne.n	8008782 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800876e:	4b23      	ldr	r3, [pc, #140]	; (80087fc <prvAddNewTaskToReadyList+0xc8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d802      	bhi.n	8008782 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <prvAddNewTaskToReadyList+0xc8>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008782:	4b20      	ldr	r3, [pc, #128]	; (8008804 <prvAddNewTaskToReadyList+0xd0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3301      	adds	r3, #1
 8008788:	4a1e      	ldr	r2, [pc, #120]	; (8008804 <prvAddNewTaskToReadyList+0xd0>)
 800878a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800878c:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <prvAddNewTaskToReadyList+0xd0>)
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008798:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <prvAddNewTaskToReadyList+0xd4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d903      	bls.n	80087a8 <prvAddNewTaskToReadyList+0x74>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	4a18      	ldr	r2, [pc, #96]	; (8008808 <prvAddNewTaskToReadyList+0xd4>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4a15      	ldr	r2, [pc, #84]	; (800880c <prvAddNewTaskToReadyList+0xd8>)
 80087b6:	441a      	add	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7ff f843 	bl	800784a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087c4:	f001 fa3e 	bl	8009c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <prvAddNewTaskToReadyList+0xcc>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00e      	beq.n	80087ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <prvAddNewTaskToReadyList+0xc8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d207      	bcs.n	80087ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <prvAddNewTaskToReadyList+0xdc>)
 80087e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200082bc 	.word	0x200082bc
 80087fc:	20007de8 	.word	0x20007de8
 8008800:	200082c8 	.word	0x200082c8
 8008804:	200082d8 	.word	0x200082d8
 8008808:	200082c4 	.word	0x200082c4
 800880c:	20007dec 	.word	0x20007dec
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d017      	beq.n	8008856 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008826:	4b13      	ldr	r3, [pc, #76]	; (8008874 <vTaskDelay+0x60>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <vTaskDelay+0x30>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60bb      	str	r3, [r7, #8]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008844:	f000 f88a 	bl	800895c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008848:	2100      	movs	r1, #0
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcfe 	bl	800924c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008850:	f000 f892 	bl	8008978 <xTaskResumeAll>
 8008854:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d107      	bne.n	800886c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <vTaskDelay+0x64>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	200082e4 	.word	0x200082e4
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800888a:	463a      	mov	r2, r7
 800888c:	1d39      	adds	r1, r7, #4
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe ff78 	bl	8007788 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	2300      	movs	r3, #0
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	460a      	mov	r2, r1
 80088aa:	4924      	ldr	r1, [pc, #144]	; (800893c <vTaskStartScheduler+0xc0>)
 80088ac:	4824      	ldr	r0, [pc, #144]	; (8008940 <vTaskStartScheduler+0xc4>)
 80088ae:	f7ff fdf9 	bl	80084a4 <xTaskCreateStatic>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4a23      	ldr	r2, [pc, #140]	; (8008944 <vTaskStartScheduler+0xc8>)
 80088b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088b8:	4b22      	ldr	r3, [pc, #136]	; (8008944 <vTaskStartScheduler+0xc8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088c0:	2301      	movs	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	e001      	b.n	80088ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d102      	bne.n	80088d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088d0:	f000 fd10 	bl	80092f4 <xTimerCreateTimerTask>
 80088d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d11b      	bne.n	8008914 <vTaskStartScheduler+0x98>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	613b      	str	r3, [r7, #16]
}
 80088ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088f0:	4b15      	ldr	r3, [pc, #84]	; (8008948 <vTaskStartScheduler+0xcc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3354      	adds	r3, #84	; 0x54
 80088f6:	4a15      	ldr	r2, [pc, #84]	; (800894c <vTaskStartScheduler+0xd0>)
 80088f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <vTaskStartScheduler+0xd4>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008902:	4b14      	ldr	r3, [pc, #80]	; (8008954 <vTaskStartScheduler+0xd8>)
 8008904:	2201      	movs	r2, #1
 8008906:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008908:	4b13      	ldr	r3, [pc, #76]	; (8008958 <vTaskStartScheduler+0xdc>)
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800890e:	f001 f8c7 	bl	8009aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008912:	e00e      	b.n	8008932 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891a:	d10a      	bne.n	8008932 <vTaskStartScheduler+0xb6>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	60fb      	str	r3, [r7, #12]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <vTaskStartScheduler+0xb4>
}
 8008932:	bf00      	nop
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	0800d2c4 	.word	0x0800d2c4
 8008940:	08008f81 	.word	0x08008f81
 8008944:	200082e0 	.word	0x200082e0
 8008948:	20007de8 	.word	0x20007de8
 800894c:	200000f4 	.word	0x200000f4
 8008950:	200082dc 	.word	0x200082dc
 8008954:	200082c8 	.word	0x200082c8
 8008958:	200082c0 	.word	0x200082c0

0800895c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <vTaskSuspendAll+0x18>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a03      	ldr	r2, [pc, #12]	; (8008974 <vTaskSuspendAll+0x18>)
 8008968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800896a:	bf00      	nop
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	200082e4 	.word	0x200082e4

08008978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008986:	4b42      	ldr	r3, [pc, #264]	; (8008a90 <xTaskResumeAll+0x118>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	603b      	str	r3, [r7, #0]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089a4:	f001 f91e 	bl	8009be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089a8:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <xTaskResumeAll+0x118>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	4a38      	ldr	r2, [pc, #224]	; (8008a90 <xTaskResumeAll+0x118>)
 80089b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b2:	4b37      	ldr	r3, [pc, #220]	; (8008a90 <xTaskResumeAll+0x118>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d162      	bne.n	8008a80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089ba:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <xTaskResumeAll+0x11c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d05e      	beq.n	8008a80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089c2:	e02f      	b.n	8008a24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c4:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <xTaskResumeAll+0x120>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3318      	adds	r3, #24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe ff97 	bl	8007904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe ff92 	bl	8007904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <xTaskResumeAll+0x124>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d903      	bls.n	80089f4 <xTaskResumeAll+0x7c>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	4a2a      	ldr	r2, [pc, #168]	; (8008a9c <xTaskResumeAll+0x124>)
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4a27      	ldr	r2, [pc, #156]	; (8008aa0 <xTaskResumeAll+0x128>)
 8008a02:	441a      	add	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe ff1d 	bl	800784a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b23      	ldr	r3, [pc, #140]	; (8008aa4 <xTaskResumeAll+0x12c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d302      	bcc.n	8008a24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a24:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <xTaskResumeAll+0x120>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1cb      	bne.n	80089c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a32:	f000 fb5f 	bl	80090f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a36:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <xTaskResumeAll+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a42:	f000 f847 	bl	8008ad4 <xTaskIncrementTick>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a4c:	4b16      	ldr	r3, [pc, #88]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f1      	bne.n	8008a42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <xTaskResumeAll+0x134>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a70:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <xTaskResumeAll+0x138>)
 8008a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a80:	f001 f8e0 	bl	8009c44 <vPortExitCritical>

	return xAlreadyYielded;
 8008a84:	68bb      	ldr	r3, [r7, #8]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200082e4 	.word	0x200082e4
 8008a94:	200082bc 	.word	0x200082bc
 8008a98:	2000827c 	.word	0x2000827c
 8008a9c:	200082c4 	.word	0x200082c4
 8008aa0:	20007dec 	.word	0x20007dec
 8008aa4:	20007de8 	.word	0x20007de8
 8008aa8:	200082d0 	.word	0x200082d0
 8008aac:	200082cc 	.word	0x200082cc
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <xTaskGetTickCount+0x1c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ac0:	687b      	ldr	r3, [r7, #4]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	200082c0 	.word	0x200082c0

08008ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ade:	4b4f      	ldr	r3, [pc, #316]	; (8008c1c <xTaskIncrementTick+0x148>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 808f 	bne.w	8008c06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ae8:	4b4d      	ldr	r3, [pc, #308]	; (8008c20 <xTaskIncrementTick+0x14c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008af0:	4a4b      	ldr	r2, [pc, #300]	; (8008c20 <xTaskIncrementTick+0x14c>)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d120      	bne.n	8008b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008afc:	4b49      	ldr	r3, [pc, #292]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	603b      	str	r3, [r7, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <xTaskIncrementTick+0x46>
 8008b1c:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	4b41      	ldr	r3, [pc, #260]	; (8008c28 <xTaskIncrementTick+0x154>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <xTaskIncrementTick+0x154>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	4b3e      	ldr	r3, [pc, #248]	; (8008c2c <xTaskIncrementTick+0x158>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a3d      	ldr	r2, [pc, #244]	; (8008c2c <xTaskIncrementTick+0x158>)
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	f000 fadb 	bl	80090f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b3e:	4b3c      	ldr	r3, [pc, #240]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d349      	bcc.n	8008bdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b48:	4b36      	ldr	r3, [pc, #216]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	601a      	str	r2, [r3, #0]
					break;
 8008b5a:	e03f      	b.n	8008bdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5c:	4b31      	ldr	r3, [pc, #196]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d203      	bcs.n	8008b7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b74:	4a2e      	ldr	r2, [pc, #184]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b7a:	e02f      	b.n	8008bdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe febf 	bl	8007904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3318      	adds	r3, #24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe feb6 	bl	8007904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9c:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <xTaskIncrementTick+0x160>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <xTaskIncrementTick+0xd8>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	4a22      	ldr	r2, [pc, #136]	; (8008c34 <xTaskIncrementTick+0x160>)
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4a1f      	ldr	r2, [pc, #124]	; (8008c38 <xTaskIncrementTick+0x164>)
 8008bba:	441a      	add	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fe41 	bl	800784a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <xTaskIncrementTick+0x168>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3b8      	bcc.n	8008b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bda:	e7b5      	b.n	8008b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bdc:	4b17      	ldr	r3, [pc, #92]	; (8008c3c <xTaskIncrementTick+0x168>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4915      	ldr	r1, [pc, #84]	; (8008c38 <xTaskIncrementTick+0x164>)
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d901      	bls.n	8008bf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bf8:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <xTaskIncrementTick+0x16c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e004      	b.n	8008c10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c06:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <xTaskIncrementTick+0x170>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <xTaskIncrementTick+0x170>)
 8008c0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c10:	697b      	ldr	r3, [r7, #20]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	200082e4 	.word	0x200082e4
 8008c20:	200082c0 	.word	0x200082c0
 8008c24:	20008274 	.word	0x20008274
 8008c28:	20008278 	.word	0x20008278
 8008c2c:	200082d4 	.word	0x200082d4
 8008c30:	200082dc 	.word	0x200082dc
 8008c34:	200082c4 	.word	0x200082c4
 8008c38:	20007dec 	.word	0x20007dec
 8008c3c:	20007de8 	.word	0x20007de8
 8008c40:	200082d0 	.word	0x200082d0
 8008c44:	200082cc 	.word	0x200082cc

08008c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c4e:	4b2a      	ldr	r3, [pc, #168]	; (8008cf8 <vTaskSwitchContext+0xb0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c56:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <vTaskSwitchContext+0xb4>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c5c:	e046      	b.n	8008cec <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c5e:	4b27      	ldr	r3, [pc, #156]	; (8008cfc <vTaskSwitchContext+0xb4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b26      	ldr	r3, [pc, #152]	; (8008d00 <vTaskSwitchContext+0xb8>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e010      	b.n	8008c8e <vTaskSwitchContext+0x46>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	607b      	str	r3, [r7, #4]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vTaskSwitchContext+0x3e>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	491d      	ldr	r1, [pc, #116]	; (8008d04 <vTaskSwitchContext+0xbc>)
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0e4      	beq.n	8008c6c <vTaskSwitchContext+0x24>
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <vTaskSwitchContext+0xbc>)
 8008cae:	4413      	add	r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	605a      	str	r2, [r3, #4]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d104      	bne.n	8008cd2 <vTaskSwitchContext+0x8a>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	4a0b      	ldr	r2, [pc, #44]	; (8008d08 <vTaskSwitchContext+0xc0>)
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4a08      	ldr	r2, [pc, #32]	; (8008d00 <vTaskSwitchContext+0xb8>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <vTaskSwitchContext+0xc0>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3354      	adds	r3, #84	; 0x54
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <vTaskSwitchContext+0xc4>)
 8008cea:	6013      	str	r3, [r2, #0]
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	200082e4 	.word	0x200082e4
 8008cfc:	200082d0 	.word	0x200082d0
 8008d00:	200082c4 	.word	0x200082c4
 8008d04:	20007dec 	.word	0x20007dec
 8008d08:	20007de8 	.word	0x20007de8
 8008d0c:	200000f4 	.word	0x200000f4

08008d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	60fb      	str	r3, [r7, #12]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d36:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <vTaskPlaceOnEventList+0x44>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3318      	adds	r3, #24
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7fe fda7 	bl	8007892 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d44:	2101      	movs	r1, #1
 8008d46:	6838      	ldr	r0, [r7, #0]
 8008d48:	f000 fa80 	bl	800924c <prvAddCurrentTaskToDelayedList>
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20007de8 	.word	0x20007de8

08008d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	617b      	str	r3, [r7, #20]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <vTaskPlaceOnEventListRestricted+0x54>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3318      	adds	r3, #24
 8008d86:	4619      	mov	r1, r3
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7fe fd5e 	bl	800784a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	68b8      	ldr	r0, [r7, #8]
 8008d9e:	f000 fa55 	bl	800924c <prvAddCurrentTaskToDelayedList>
	}
 8008da2:	bf00      	nop
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20007de8 	.word	0x20007de8

08008db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	60fb      	str	r3, [r7, #12]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	3318      	adds	r3, #24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fd8f 	bl	8007904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de6:	4b1e      	ldr	r3, [pc, #120]	; (8008e60 <xTaskRemoveFromEventList+0xb0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11d      	bne.n	8008e2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3304      	adds	r3, #4
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fd86 	bl	8007904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfc:	4b19      	ldr	r3, [pc, #100]	; (8008e64 <xTaskRemoveFromEventList+0xb4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d903      	bls.n	8008e0c <xTaskRemoveFromEventList+0x5c>
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	4a16      	ldr	r2, [pc, #88]	; (8008e64 <xTaskRemoveFromEventList+0xb4>)
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4a13      	ldr	r2, [pc, #76]	; (8008e68 <xTaskRemoveFromEventList+0xb8>)
 8008e1a:	441a      	add	r2, r3
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f7fe fd11 	bl	800784a <vListInsertEnd>
 8008e28:	e005      	b.n	8008e36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3318      	adds	r3, #24
 8008e2e:	4619      	mov	r1, r3
 8008e30:	480e      	ldr	r0, [pc, #56]	; (8008e6c <xTaskRemoveFromEventList+0xbc>)
 8008e32:	f7fe fd0a 	bl	800784a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <xTaskRemoveFromEventList+0xc0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d905      	bls.n	8008e50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <xTaskRemoveFromEventList+0xc4>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e001      	b.n	8008e54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e54:	697b      	ldr	r3, [r7, #20]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	200082e4 	.word	0x200082e4
 8008e64:	200082c4 	.word	0x200082c4
 8008e68:	20007dec 	.word	0x20007dec
 8008e6c:	2000827c 	.word	0x2000827c
 8008e70:	20007de8 	.word	0x20007de8
 8008e74:	200082d0 	.word	0x200082d0

08008e78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <vTaskInternalSetTimeOutState+0x24>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <vTaskInternalSetTimeOutState+0x28>)
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	605a      	str	r2, [r3, #4]
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	200082d4 	.word	0x200082d4
 8008ea0:	200082c0 	.word	0x200082c0

08008ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	613b      	str	r3, [r7, #16]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ee6:	f000 fe7d 	bl	8009be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eea:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <xTaskCheckForTimeOut+0xbc>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d102      	bne.n	8008f0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
 8008f08:	e023      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <xTaskCheckForTimeOut+0xc0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d007      	beq.n	8008f26 <xTaskCheckForTimeOut+0x82>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e015      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d20b      	bcs.n	8008f48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ff9b 	bl	8008e78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	e004      	b.n	8008f52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f52:	f000 fe77 	bl	8009c44 <vPortExitCritical>

	return xReturn;
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200082c0 	.word	0x200082c0
 8008f64:	200082d4 	.word	0x200082d4

08008f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f6c:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <vTaskMissedYield+0x14>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
}
 8008f72:	bf00      	nop
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	200082d0 	.word	0x200082d0

08008f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f88:	f000 f852 	bl	8009030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <prvIdleTask+0x28>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d9f9      	bls.n	8008f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <prvIdleTask+0x2c>)
 8008f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fa4:	e7f0      	b.n	8008f88 <prvIdleTask+0x8>
 8008fa6:	bf00      	nop
 8008fa8:	20007dec 	.word	0x20007dec
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
 8008fba:	e00c      	b.n	8008fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4a12      	ldr	r2, [pc, #72]	; (8009010 <prvInitialiseTaskLists+0x60>)
 8008fc8:	4413      	add	r3, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fc10 	bl	80077f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b37      	cmp	r3, #55	; 0x37
 8008fda:	d9ef      	bls.n	8008fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fdc:	480d      	ldr	r0, [pc, #52]	; (8009014 <prvInitialiseTaskLists+0x64>)
 8008fde:	f7fe fc07 	bl	80077f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fe2:	480d      	ldr	r0, [pc, #52]	; (8009018 <prvInitialiseTaskLists+0x68>)
 8008fe4:	f7fe fc04 	bl	80077f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fe8:	480c      	ldr	r0, [pc, #48]	; (800901c <prvInitialiseTaskLists+0x6c>)
 8008fea:	f7fe fc01 	bl	80077f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fee:	480c      	ldr	r0, [pc, #48]	; (8009020 <prvInitialiseTaskLists+0x70>)
 8008ff0:	f7fe fbfe 	bl	80077f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ff4:	480b      	ldr	r0, [pc, #44]	; (8009024 <prvInitialiseTaskLists+0x74>)
 8008ff6:	f7fe fbfb 	bl	80077f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <prvInitialiseTaskLists+0x78>)
 8008ffc:	4a05      	ldr	r2, [pc, #20]	; (8009014 <prvInitialiseTaskLists+0x64>)
 8008ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <prvInitialiseTaskLists+0x7c>)
 8009002:	4a05      	ldr	r2, [pc, #20]	; (8009018 <prvInitialiseTaskLists+0x68>)
 8009004:	601a      	str	r2, [r3, #0]
}
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20007dec 	.word	0x20007dec
 8009014:	2000824c 	.word	0x2000824c
 8009018:	20008260 	.word	0x20008260
 800901c:	2000827c 	.word	0x2000827c
 8009020:	20008290 	.word	0x20008290
 8009024:	200082a8 	.word	0x200082a8
 8009028:	20008274 	.word	0x20008274
 800902c:	20008278 	.word	0x20008278

08009030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009036:	e019      	b.n	800906c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009038:	f000 fdd4 	bl	8009be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903c:	4b10      	ldr	r3, [pc, #64]	; (8009080 <prvCheckTasksWaitingTermination+0x50>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fc5b 	bl	8007904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <prvCheckTasksWaitingTermination+0x54>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3b01      	subs	r3, #1
 8009054:	4a0b      	ldr	r2, [pc, #44]	; (8009084 <prvCheckTasksWaitingTermination+0x54>)
 8009056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009058:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3b01      	subs	r3, #1
 800905e:	4a0a      	ldr	r2, [pc, #40]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 8009060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009062:	f000 fdef 	bl	8009c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f810 	bl	800908c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <prvCheckTasksWaitingTermination+0x58>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e1      	bne.n	8009038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20008290 	.word	0x20008290
 8009084:	200082bc 	.word	0x200082bc
 8009088:	200082a4 	.word	0x200082a4

0800908c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3354      	adds	r3, #84	; 0x54
 8009098:	4618      	mov	r0, r3
 800909a:	f001 ff71 	bl	800af80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d108      	bne.n	80090ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 ff87 	bl	8009fc0 <vPortFree>
				vPortFree( pxTCB );
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 ff84 	bl	8009fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090b8:	e018      	b.n	80090ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d103      	bne.n	80090cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 ff7b 	bl	8009fc0 <vPortFree>
	}
 80090ca:	e00f      	b.n	80090ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d00a      	beq.n	80090ec <prvDeleteTCB+0x60>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <prvDeleteTCB+0x5e>
	}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fa:	4b0c      	ldr	r3, [pc, #48]	; (800912c <prvResetNextTaskUnblockTime+0x38>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <prvResetNextTaskUnblockTime+0x3c>)
 8009106:	f04f 32ff 	mov.w	r2, #4294967295
 800910a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800910c:	e008      	b.n	8009120 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800910e:	4b07      	ldr	r3, [pc, #28]	; (800912c <prvResetNextTaskUnblockTime+0x38>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4a04      	ldr	r2, [pc, #16]	; (8009130 <prvResetNextTaskUnblockTime+0x3c>)
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20008274 	.word	0x20008274
 8009130:	200082dc 	.word	0x200082dc

08009134 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800913a:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <xTaskGetSchedulerState+0x34>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009142:	2301      	movs	r3, #1
 8009144:	607b      	str	r3, [r7, #4]
 8009146:	e008      	b.n	800915a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009148:	4b08      	ldr	r3, [pc, #32]	; (800916c <xTaskGetSchedulerState+0x38>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009150:	2302      	movs	r3, #2
 8009152:	607b      	str	r3, [r7, #4]
 8009154:	e001      	b.n	800915a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800915a:	687b      	ldr	r3, [r7, #4]
	}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	200082c8 	.word	0x200082c8
 800916c:	200082e4 	.word	0x200082e4

08009170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d056      	beq.n	8009234 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <xTaskPriorityDisinherit+0xd0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	429a      	cmp	r2, r3
 800918e:	d00a      	beq.n	80091a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10a      	bne.n	80091c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	60bb      	str	r3, [r7, #8]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c8:	1e5a      	subs	r2, r3, #1
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d02c      	beq.n	8009234 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d128      	bne.n	8009234 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fb8c 	bl	8007904 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskPriorityDisinherit+0xd4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d903      	bls.n	8009214 <xTaskPriorityDisinherit+0xa4>
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	4a0c      	ldr	r2, [pc, #48]	; (8009244 <xTaskPriorityDisinherit+0xd4>)
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4a09      	ldr	r2, [pc, #36]	; (8009248 <xTaskPriorityDisinherit+0xd8>)
 8009222:	441a      	add	r2, r3
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3304      	adds	r3, #4
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fe fb0d 	bl	800784a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009230:	2301      	movs	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009234:	697b      	ldr	r3, [r7, #20]
	}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20007de8 	.word	0x20007de8
 8009244:	200082c4 	.word	0x200082c4
 8009248:	20007dec 	.word	0x20007dec

0800924c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <prvAddCurrentTaskToDelayedList+0x90>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800925c:	4b20      	ldr	r3, [pc, #128]	; (80092e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3304      	adds	r3, #4
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fb4e 	bl	8007904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926e:	d10a      	bne.n	8009286 <prvAddCurrentTaskToDelayedList+0x3a>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d007      	beq.n	8009286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3304      	adds	r3, #4
 800927c:	4619      	mov	r1, r3
 800927e:	4819      	ldr	r0, [pc, #100]	; (80092e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009280:	f7fe fae3 	bl	800784a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009284:	e026      	b.n	80092d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	429a      	cmp	r2, r3
 800929c:	d209      	bcs.n	80092b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7fe faf1 	bl	8007892 <vListInsert>
}
 80092b0:	e010      	b.n	80092d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fae7 	bl	8007892 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092c4:	4b0a      	ldr	r3, [pc, #40]	; (80092f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d202      	bcs.n	80092d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092ce:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	6013      	str	r3, [r2, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200082c0 	.word	0x200082c0
 80092e0:	20007de8 	.word	0x20007de8
 80092e4:	200082a8 	.word	0x200082a8
 80092e8:	20008278 	.word	0x20008278
 80092ec:	20008274 	.word	0x20008274
 80092f0:	200082dc 	.word	0x200082dc

080092f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092fe:	f000 fb07 	bl	8009910 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <xTimerCreateTimerTask+0x80>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d021      	beq.n	800934e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009312:	1d3a      	adds	r2, r7, #4
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fa4d 	bl	80077bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	9202      	str	r2, [sp, #8]
 800932a:	9301      	str	r3, [sp, #4]
 800932c:	2302      	movs	r3, #2
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2300      	movs	r3, #0
 8009332:	460a      	mov	r2, r1
 8009334:	4910      	ldr	r1, [pc, #64]	; (8009378 <xTimerCreateTimerTask+0x84>)
 8009336:	4811      	ldr	r0, [pc, #68]	; (800937c <xTimerCreateTimerTask+0x88>)
 8009338:	f7ff f8b4 	bl	80084a4 <xTaskCreateStatic>
 800933c:	4603      	mov	r3, r0
 800933e:	4a10      	ldr	r2, [pc, #64]	; (8009380 <xTimerCreateTimerTask+0x8c>)
 8009340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <xTimerCreateTimerTask+0x8c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800934a:	2301      	movs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	613b      	str	r3, [r7, #16]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800936a:	697b      	ldr	r3, [r7, #20]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20008318 	.word	0x20008318
 8009378:	0800d2cc 	.word	0x0800d2cc
 800937c:	080094b9 	.word	0x080094b9
 8009380:	2000831c 	.word	0x2000831c

08009384 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b08a      	sub	sp, #40	; 0x28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009392:	2300      	movs	r3, #0
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	623b      	str	r3, [r7, #32]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093b2:	4b1a      	ldr	r3, [pc, #104]	; (800941c <xTimerGenericCommand+0x98>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d02a      	beq.n	8009410 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	dc18      	bgt.n	80093fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093cc:	f7ff feb2 	bl	8009134 <xTaskGetSchedulerState>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d109      	bne.n	80093ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093d6:	4b11      	ldr	r3, [pc, #68]	; (800941c <xTimerGenericCommand+0x98>)
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f107 0110 	add.w	r1, r7, #16
 80093de:	2300      	movs	r3, #0
 80093e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e2:	f7fe fbf7 	bl	8007bd4 <xQueueGenericSend>
 80093e6:	6278      	str	r0, [r7, #36]	; 0x24
 80093e8:	e012      	b.n	8009410 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <xTimerGenericCommand+0x98>)
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f107 0110 	add.w	r1, r7, #16
 80093f2:	2300      	movs	r3, #0
 80093f4:	2200      	movs	r2, #0
 80093f6:	f7fe fbed 	bl	8007bd4 <xQueueGenericSend>
 80093fa:	6278      	str	r0, [r7, #36]	; 0x24
 80093fc:	e008      	b.n	8009410 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <xTimerGenericCommand+0x98>)
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f107 0110 	add.w	r1, r7, #16
 8009406:	2300      	movs	r3, #0
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	f7fe fce1 	bl	8007dd0 <xQueueGenericSendFromISR>
 800940e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009412:	4618      	mov	r0, r3
 8009414:	3728      	adds	r7, #40	; 0x28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20008318 	.word	0x20008318

08009420 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af02      	add	r7, sp, #8
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942a:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <prvProcessExpiredTimer+0x94>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	3304      	adds	r3, #4
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fa63 	bl	8007904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	d022      	beq.n	8009492 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	18d1      	adds	r1, r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	6978      	ldr	r0, [r7, #20]
 800945a:	f000 f8d1 	bl	8009600 <prvInsertTimerInActiveList>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01f      	beq.n	80094a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	2100      	movs	r1, #0
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f7ff ff88 	bl	8009384 <xTimerGenericCommand>
 8009474:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d113      	bne.n	80094a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	60fb      	str	r3, [r7, #12]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	b2da      	uxtb	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	6978      	ldr	r0, [r7, #20]
 80094aa:	4798      	blx	r3
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20008310 	.word	0x20008310

080094b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f857 	bl	8009578 <prvGetNextExpireTime>
 80094ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4619      	mov	r1, r3
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f803 	bl	80094dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094d6:	f000 f8d5 	bl	8009684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094da:	e7f1      	b.n	80094c0 <prvTimerTask+0x8>

080094dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094e6:	f7ff fa39 	bl	800895c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ea:	f107 0308 	add.w	r3, r7, #8
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f866 	bl	80095c0 <prvSampleTimeNow>
 80094f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d130      	bne.n	800955e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <prvProcessTimerOrBlockTask+0x3c>
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	429a      	cmp	r2, r3
 8009508:	d806      	bhi.n	8009518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800950a:	f7ff fa35 	bl	8008978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7ff ff85 	bl	8009420 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009516:	e024      	b.n	8009562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d008      	beq.n	8009530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <prvProcessTimerOrBlockTask+0x90>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <prvProcessTimerOrBlockTask+0x50>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <prvProcessTimerOrBlockTask+0x52>
 800952c:	2300      	movs	r3, #0
 800952e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009530:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <prvProcessTimerOrBlockTask+0x94>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	f7fe ff7d 	bl	800843c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009542:	f7ff fa19 	bl	8008978 <xTaskResumeAll>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <prvProcessTimerOrBlockTask+0x98>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
}
 800955c:	e001      	b.n	8009562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800955e:	f7ff fa0b 	bl	8008978 <xTaskResumeAll>
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20008314 	.word	0x20008314
 8009570:	20008318 	.word	0x20008318
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <prvGetNextExpireTime+0x44>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <prvGetNextExpireTime+0x16>
 800958a:	2201      	movs	r2, #1
 800958c:	e000      	b.n	8009590 <prvGetNextExpireTime+0x18>
 800958e:	2200      	movs	r2, #0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800959c:	4b07      	ldr	r3, [pc, #28]	; (80095bc <prvGetNextExpireTime+0x44>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e001      	b.n	80095ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095ac:	68fb      	ldr	r3, [r7, #12]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20008310 	.word	0x20008310

080095c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095c8:	f7ff fa74 	bl	8008ab4 <xTaskGetTickCount>
 80095cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095ce:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <prvSampleTimeNow+0x3c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d205      	bcs.n	80095e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095d8:	f000 f936 	bl	8009848 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e002      	b.n	80095ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ea:	4a04      	ldr	r2, [pc, #16]	; (80095fc <prvSampleTimeNow+0x3c>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20008320 	.word	0x20008320

08009600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d812      	bhi.n	800964c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	429a      	cmp	r2, r3
 8009632:	d302      	bcc.n	800963a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e01b      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800963a:	4b10      	ldr	r3, [pc, #64]	; (800967c <prvInsertTimerInActiveList+0x7c>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe f924 	bl	8007892 <vListInsert>
 800964a:	e012      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d206      	bcs.n	8009662 <prvInsertTimerInActiveList+0x62>
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d302      	bcc.n	8009662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e007      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <prvInsertTimerInActiveList+0x80>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3304      	adds	r3, #4
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fe f910 	bl	8007892 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009672:	697b      	ldr	r3, [r7, #20]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20008314 	.word	0x20008314
 8009680:	20008310 	.word	0x20008310

08009684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08e      	sub	sp, #56	; 0x38
 8009688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800968a:	e0ca      	b.n	8009822 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	da18      	bge.n	80096c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	3304      	adds	r3, #4
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	61fb      	str	r3, [r7, #28]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ba:	6850      	ldr	r0, [r2, #4]
 80096bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096be:	6892      	ldr	r2, [r2, #8]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f2c0 80ab 	blt.w	8009822 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	3304      	adds	r3, #4
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe f911 	bl	8007904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e2:	463b      	mov	r3, r7
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff ff6b 	bl	80095c0 <prvSampleTimeNow>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	f200 8096 	bhi.w	8009820 <prvProcessReceivedCommands+0x19c>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <prvProcessReceivedCommands+0x78>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	08009725 	.word	0x08009725
 8009700:	08009725 	.word	0x08009725
 8009704:	08009725 	.word	0x08009725
 8009708:	08009799 	.word	0x08009799
 800970c:	080097ad 	.word	0x080097ad
 8009710:	080097f7 	.word	0x080097f7
 8009714:	08009725 	.word	0x08009725
 8009718:	08009725 	.word	0x08009725
 800971c:	08009799 	.word	0x08009799
 8009720:	080097ad 	.word	0x080097ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	b2da      	uxtb	r2, r3
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	18d1      	adds	r1, r2, r3
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009744:	f7ff ff5c 	bl	8009600 <prvInsertTimerInActiveList>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d069      	beq.n	8009822 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009754:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d05e      	beq.n	8009822 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	441a      	add	r2, r3
 800976c:	2300      	movs	r3, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	2300      	movs	r3, #0
 8009772:	2100      	movs	r1, #0
 8009774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009776:	f7ff fe05 	bl	8009384 <xTimerGenericCommand>
 800977a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d14f      	bne.n	8009822 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	61bb      	str	r3, [r7, #24]
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097aa:	e03a      	b.n	8009822 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	617b      	str	r3, [r7, #20]
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	699a      	ldr	r2, [r3, #24]
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	18d1      	adds	r1, r2, r3
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f0:	f7ff ff06 	bl	8009600 <prvInsertTimerInActiveList>
					break;
 80097f4:	e015      	b.n	8009822 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d103      	bne.n	800980c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009806:	f000 fbdb 	bl	8009fc0 <vPortFree>
 800980a:	e00a      	b.n	8009822 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009812:	f023 0301 	bic.w	r3, r3, #1
 8009816:	b2da      	uxtb	r2, r3
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800981e:	e000      	b.n	8009822 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009820:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009822:	4b08      	ldr	r3, [pc, #32]	; (8009844 <prvProcessReceivedCommands+0x1c0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1d39      	adds	r1, r7, #4
 8009828:	2200      	movs	r2, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe fb6c 	bl	8007f08 <xQueueReceive>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	f47f af2a 	bne.w	800968c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	3730      	adds	r7, #48	; 0x30
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20008318 	.word	0x20008318

08009848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800984e:	e048      	b.n	80098e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009850:	4b2d      	ldr	r3, [pc, #180]	; (8009908 <prvSwitchTimerLists+0xc0>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800985a:	4b2b      	ldr	r3, [pc, #172]	; (8009908 <prvSwitchTimerLists+0xc0>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe f84b 	bl	8007904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d02e      	beq.n	80098e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	4413      	add	r3, r2
 800988c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	429a      	cmp	r2, r3
 8009894:	d90e      	bls.n	80098b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098a2:	4b19      	ldr	r3, [pc, #100]	; (8009908 <prvSwitchTimerLists+0xc0>)
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fd fff0 	bl	8007892 <vListInsert>
 80098b2:	e016      	b.n	80098e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098b4:	2300      	movs	r3, #0
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2300      	movs	r3, #0
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	2100      	movs	r1, #0
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff fd60 	bl	8009384 <xTimerGenericCommand>
 80098c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	603b      	str	r3, [r7, #0]
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <prvSwitchTimerLists+0xc0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1b1      	bne.n	8009850 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098ec:	4b06      	ldr	r3, [pc, #24]	; (8009908 <prvSwitchTimerLists+0xc0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098f2:	4b06      	ldr	r3, [pc, #24]	; (800990c <prvSwitchTimerLists+0xc4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a04      	ldr	r2, [pc, #16]	; (8009908 <prvSwitchTimerLists+0xc0>)
 80098f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098fa:	4a04      	ldr	r2, [pc, #16]	; (800990c <prvSwitchTimerLists+0xc4>)
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	6013      	str	r3, [r2, #0]
}
 8009900:	bf00      	nop
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20008310 	.word	0x20008310
 800990c:	20008314 	.word	0x20008314

08009910 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009916:	f000 f965 	bl	8009be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800991a:	4b15      	ldr	r3, [pc, #84]	; (8009970 <prvCheckForValidListAndQueue+0x60>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d120      	bne.n	8009964 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009922:	4814      	ldr	r0, [pc, #80]	; (8009974 <prvCheckForValidListAndQueue+0x64>)
 8009924:	f7fd ff64 	bl	80077f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009928:	4813      	ldr	r0, [pc, #76]	; (8009978 <prvCheckForValidListAndQueue+0x68>)
 800992a:	f7fd ff61 	bl	80077f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <prvCheckForValidListAndQueue+0x6c>)
 8009930:	4a10      	ldr	r2, [pc, #64]	; (8009974 <prvCheckForValidListAndQueue+0x64>)
 8009932:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009934:	4b12      	ldr	r3, [pc, #72]	; (8009980 <prvCheckForValidListAndQueue+0x70>)
 8009936:	4a10      	ldr	r2, [pc, #64]	; (8009978 <prvCheckForValidListAndQueue+0x68>)
 8009938:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800993a:	2300      	movs	r3, #0
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4b11      	ldr	r3, [pc, #68]	; (8009984 <prvCheckForValidListAndQueue+0x74>)
 8009940:	4a11      	ldr	r2, [pc, #68]	; (8009988 <prvCheckForValidListAndQueue+0x78>)
 8009942:	2110      	movs	r1, #16
 8009944:	200a      	movs	r0, #10
 8009946:	f7fe f86f 	bl	8007a28 <xQueueGenericCreateStatic>
 800994a:	4603      	mov	r3, r0
 800994c:	4a08      	ldr	r2, [pc, #32]	; (8009970 <prvCheckForValidListAndQueue+0x60>)
 800994e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <prvCheckForValidListAndQueue+0x60>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009958:	4b05      	ldr	r3, [pc, #20]	; (8009970 <prvCheckForValidListAndQueue+0x60>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	490b      	ldr	r1, [pc, #44]	; (800998c <prvCheckForValidListAndQueue+0x7c>)
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe fd42 	bl	80083e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009964:	f000 f96e 	bl	8009c44 <vPortExitCritical>
}
 8009968:	bf00      	nop
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20008318 	.word	0x20008318
 8009974:	200082e8 	.word	0x200082e8
 8009978:	200082fc 	.word	0x200082fc
 800997c:	20008310 	.word	0x20008310
 8009980:	20008314 	.word	0x20008314
 8009984:	200083c4 	.word	0x200083c4
 8009988:	20008324 	.word	0x20008324
 800998c:	0800d2d4 	.word	0x0800d2d4

08009990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3b04      	subs	r3, #4
 80099a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3b04      	subs	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f023 0201 	bic.w	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099c0:	4a0c      	ldr	r2, [pc, #48]	; (80099f4 <pxPortInitialiseStack+0x64>)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3b14      	subs	r3, #20
 80099ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3b04      	subs	r3, #4
 80099d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f06f 0202 	mvn.w	r2, #2
 80099de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3b20      	subs	r3, #32
 80099e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	080099f9 	.word	0x080099f9

080099f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a02:	4b12      	ldr	r3, [pc, #72]	; (8009a4c <prvTaskExitError+0x54>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d00a      	beq.n	8009a22 <prvTaskExitError+0x2a>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <prvTaskExitError+0x28>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60bb      	str	r3, [r7, #8]
}
 8009a34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a36:	bf00      	nop
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0fc      	beq.n	8009a38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	20000098 	.word	0x20000098

08009a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <pxCurrentTCBConst2>)
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	f380 8809 	msr	PSP, r0
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8811 	msr	BASEPRI, r0
 8009a6a:	4770      	bx	lr
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst2>:
 8009a70:	20007de8 	.word	0x20007de8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a78:	4808      	ldr	r0, [pc, #32]	; (8009a9c <prvPortStartFirstTask+0x24>)
 8009a7a:	6800      	ldr	r0, [r0, #0]
 8009a7c:	6800      	ldr	r0, [r0, #0]
 8009a7e:	f380 8808 	msr	MSP, r0
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8814 	msr	CONTROL, r0
 8009a8a:	b662      	cpsie	i
 8009a8c:	b661      	cpsie	f
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	df00      	svc	0
 8009a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a9a:	bf00      	nop
 8009a9c:	e000ed08 	.word	0xe000ed08

08009aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009aa6:	4b46      	ldr	r3, [pc, #280]	; (8009bc0 <xPortStartScheduler+0x120>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a46      	ldr	r2, [pc, #280]	; (8009bc4 <xPortStartScheduler+0x124>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d10a      	bne.n	8009ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	613b      	str	r3, [r7, #16]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ac6:	4b3e      	ldr	r3, [pc, #248]	; (8009bc0 <xPortStartScheduler+0x120>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a3f      	ldr	r2, [pc, #252]	; (8009bc8 <xPortStartScheduler+0x128>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d10a      	bne.n	8009ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	60fb      	str	r3, [r7, #12]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ae6:	4b39      	ldr	r3, [pc, #228]	; (8009bcc <xPortStartScheduler+0x12c>)
 8009ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	22ff      	movs	r2, #255	; 0xff
 8009af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	4b31      	ldr	r3, [pc, #196]	; (8009bd0 <xPortStartScheduler+0x130>)
 8009b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b10:	2207      	movs	r2, #7
 8009b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b14:	e009      	b.n	8009b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b16:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	4a2d      	ldr	r2, [pc, #180]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	d0ef      	beq.n	8009b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b36:	4b27      	ldr	r3, [pc, #156]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f1c3 0307 	rsb	r3, r3, #7
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d00a      	beq.n	8009b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60bb      	str	r3, [r7, #8]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b58:	4b1e      	ldr	r3, [pc, #120]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	4a1d      	ldr	r2, [pc, #116]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b6a:	4a1a      	ldr	r2, [pc, #104]	; (8009bd4 <xPortStartScheduler+0x134>)
 8009b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b76:	4b18      	ldr	r3, [pc, #96]	; (8009bd8 <xPortStartScheduler+0x138>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <xPortStartScheduler+0x138>)
 8009b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b82:	4b15      	ldr	r3, [pc, #84]	; (8009bd8 <xPortStartScheduler+0x138>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a14      	ldr	r2, [pc, #80]	; (8009bd8 <xPortStartScheduler+0x138>)
 8009b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b8e:	f000 f8dd 	bl	8009d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <xPortStartScheduler+0x13c>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b98:	f000 f8fc 	bl	8009d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <xPortStartScheduler+0x140>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a0f      	ldr	r2, [pc, #60]	; (8009be0 <xPortStartScheduler+0x140>)
 8009ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ba8:	f7ff ff66 	bl	8009a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bac:	f7ff f84c 	bl	8008c48 <vTaskSwitchContext>
	prvTaskExitError();
 8009bb0:	f7ff ff22 	bl	80099f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	e000ed00 	.word	0xe000ed00
 8009bc4:	410fc271 	.word	0x410fc271
 8009bc8:	410fc270 	.word	0x410fc270
 8009bcc:	e000e400 	.word	0xe000e400
 8009bd0:	20008414 	.word	0x20008414
 8009bd4:	20008418 	.word	0x20008418
 8009bd8:	e000ed20 	.word	0xe000ed20
 8009bdc:	20000098 	.word	0x20000098
 8009be0:	e000ef34 	.word	0xe000ef34

08009be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	607b      	str	r3, [r7, #4]
}
 8009bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bfe:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <vPortEnterCritical+0x58>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3301      	adds	r3, #1
 8009c04:	4a0d      	ldr	r2, [pc, #52]	; (8009c3c <vPortEnterCritical+0x58>)
 8009c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <vPortEnterCritical+0x58>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10f      	bne.n	8009c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <vPortEnterCritical+0x5c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	603b      	str	r3, [r7, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <vPortEnterCritical+0x4a>
	}
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000098 	.word	0x20000098
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c4a:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <vPortExitCritical+0x50>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10a      	bne.n	8009c68 <vPortExitCritical+0x24>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	607b      	str	r3, [r7, #4]
}
 8009c64:	bf00      	nop
 8009c66:	e7fe      	b.n	8009c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <vPortExitCritical+0x50>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <vPortExitCritical+0x50>)
 8009c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c72:	4b08      	ldr	r3, [pc, #32]	; (8009c94 <vPortExitCritical+0x50>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d105      	bne.n	8009c86 <vPortExitCritical+0x42>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f383 8811 	msr	BASEPRI, r3
}
 8009c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c86:	bf00      	nop
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000098 	.word	0x20000098
	...

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	; (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cc4:	f380 8811 	msr	BASEPRI, r0
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f7fe ffba 	bl	8008c48 <vTaskSwitchContext>
 8009cd4:	f04f 0000 	mov.w	r0, #0
 8009cd8:	f380 8811 	msr	BASEPRI, r0
 8009cdc:	bc09      	pop	{r0, r3}
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	6808      	ldr	r0, [r1, #0]
 8009ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce6:	f01e 0f10 	tst.w	lr, #16
 8009cea:	bf08      	it	eq
 8009cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf0:	f380 8809 	msr	PSP, r0
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst>:
 8009d00:	20007de8 	.word	0x20007de8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d22:	f7fe fed7 	bl	8008ad4 <xTaskIncrementTick>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <xPortSysTickHandler+0x40>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f383 8811 	msr	BASEPRI, r3
}
 8009d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d50:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <vPortSetupTimerInterrupt+0x38>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	; (8009d88 <vPortSetupTimerInterrupt+0x3c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a0a      	ldr	r2, [pc, #40]	; (8009d8c <vPortSetupTimerInterrupt+0x40>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	099b      	lsrs	r3, r3, #6
 8009d68:	4a09      	ldr	r2, [pc, #36]	; (8009d90 <vPortSetupTimerInterrupt+0x44>)
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d6e:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000e010 	.word	0xe000e010
 8009d84:	e000e018 	.word	0xe000e018
 8009d88:	20000010 	.word	0x20000010
 8009d8c:	10624dd3 	.word	0x10624dd3
 8009d90:	e000e014 	.word	0xe000e014

08009d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009da4 <vPortEnableVFP+0x10>
 8009d98:	6801      	ldr	r1, [r0, #0]
 8009d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d9e:	6001      	str	r1, [r0, #0]
 8009da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009da2:	bf00      	nop
 8009da4:	e000ed88 	.word	0xe000ed88

08009da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dae:	f3ef 8305 	mrs	r3, IPSR
 8009db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b0f      	cmp	r3, #15
 8009db8:	d914      	bls.n	8009de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dba:	4a17      	ldr	r2, [pc, #92]	; (8009e18 <vPortValidateInterruptPriority+0x70>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009dc4:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <vPortValidateInterruptPriority+0x74>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	7afa      	ldrb	r2, [r7, #11]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d20a      	bcs.n	8009de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009de4:	4b0e      	ldr	r3, [pc, #56]	; (8009e20 <vPortValidateInterruptPriority+0x78>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dec:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <vPortValidateInterruptPriority+0x7c>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d90a      	bls.n	8009e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	603b      	str	r3, [r7, #0]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <vPortValidateInterruptPriority+0x60>
	}
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	e000e3f0 	.word	0xe000e3f0
 8009e1c:	20008414 	.word	0x20008414
 8009e20:	e000ed0c 	.word	0xe000ed0c
 8009e24:	20008418 	.word	0x20008418

08009e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	; 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e30:	2300      	movs	r3, #0
 8009e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e34:	f7fe fd92 	bl	800895c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e38:	4b5b      	ldr	r3, [pc, #364]	; (8009fa8 <pvPortMalloc+0x180>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e40:	f000 f920 	bl	800a084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e44:	4b59      	ldr	r3, [pc, #356]	; (8009fac <pvPortMalloc+0x184>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f040 8093 	bne.w	8009f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01d      	beq.n	8009e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e58:	2208      	movs	r2, #8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d014      	beq.n	8009e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f023 0307 	bic.w	r3, r3, #7
 8009e70:	3308      	adds	r3, #8
 8009e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f003 0307 	and.w	r3, r3, #7
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <pvPortMalloc+0x6c>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	617b      	str	r3, [r7, #20]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d06e      	beq.n	8009f78 <pvPortMalloc+0x150>
 8009e9a:	4b45      	ldr	r3, [pc, #276]	; (8009fb0 <pvPortMalloc+0x188>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d869      	bhi.n	8009f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ea4:	4b43      	ldr	r3, [pc, #268]	; (8009fb4 <pvPortMalloc+0x18c>)
 8009ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ea8:	4b42      	ldr	r3, [pc, #264]	; (8009fb4 <pvPortMalloc+0x18c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eae:	e004      	b.n	8009eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d903      	bls.n	8009ecc <pvPortMalloc+0xa4>
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f1      	bne.n	8009eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ecc:	4b36      	ldr	r3, [pc, #216]	; (8009fa8 <pvPortMalloc+0x180>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d050      	beq.n	8009f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2208      	movs	r2, #8
 8009edc:	4413      	add	r3, r2
 8009ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	2308      	movs	r3, #8
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d91f      	bls.n	8009f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <pvPortMalloc+0xf8>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	613b      	str	r3, [r7, #16]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	1ad2      	subs	r2, r2, r3
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f32:	69b8      	ldr	r0, [r7, #24]
 8009f34:	f000 f908 	bl	800a148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f38:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <pvPortMalloc+0x188>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	4a1b      	ldr	r2, [pc, #108]	; (8009fb0 <pvPortMalloc+0x188>)
 8009f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f46:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <pvPortMalloc+0x188>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	4b1b      	ldr	r3, [pc, #108]	; (8009fb8 <pvPortMalloc+0x190>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d203      	bcs.n	8009f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f52:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <pvPortMalloc+0x188>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a18      	ldr	r2, [pc, #96]	; (8009fb8 <pvPortMalloc+0x190>)
 8009f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	4b13      	ldr	r3, [pc, #76]	; (8009fac <pvPortMalloc+0x184>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <pvPortMalloc+0x194>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	4a11      	ldr	r2, [pc, #68]	; (8009fbc <pvPortMalloc+0x194>)
 8009f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f78:	f7fe fcfe 	bl	8008978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00a      	beq.n	8009f9c <pvPortMalloc+0x174>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	60fb      	str	r3, [r7, #12]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <pvPortMalloc+0x172>
	return pvReturn;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3728      	adds	r7, #40	; 0x28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	2000e5cc 	.word	0x2000e5cc
 8009fac:	2000e5e0 	.word	0x2000e5e0
 8009fb0:	2000e5d0 	.word	0x2000e5d0
 8009fb4:	2000e5c4 	.word	0x2000e5c4
 8009fb8:	2000e5d4 	.word	0x2000e5d4
 8009fbc:	2000e5d8 	.word	0x2000e5d8

08009fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d04d      	beq.n	800a06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fd2:	2308      	movs	r3, #8
 8009fd4:	425b      	negs	r3, r3
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4413      	add	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	4b24      	ldr	r3, [pc, #144]	; (800a078 <vPortFree+0xb8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <vPortFree+0x44>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	60fb      	str	r3, [r7, #12]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <vPortFree+0x62>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	60bb      	str	r3, [r7, #8]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	4b14      	ldr	r3, [pc, #80]	; (800a078 <vPortFree+0xb8>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4013      	ands	r3, r2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01e      	beq.n	800a06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d11a      	bne.n	800a06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4b0e      	ldr	r3, [pc, #56]	; (800a078 <vPortFree+0xb8>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	43db      	mvns	r3, r3
 800a042:	401a      	ands	r2, r3
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a048:	f7fe fc88 	bl	800895c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <vPortFree+0xbc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4413      	add	r3, r2
 800a056:	4a09      	ldr	r2, [pc, #36]	; (800a07c <vPortFree+0xbc>)
 800a058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a05a:	6938      	ldr	r0, [r7, #16]
 800a05c:	f000 f874 	bl	800a148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a060:	4b07      	ldr	r3, [pc, #28]	; (800a080 <vPortFree+0xc0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3301      	adds	r3, #1
 800a066:	4a06      	ldr	r2, [pc, #24]	; (800a080 <vPortFree+0xc0>)
 800a068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a06a:	f7fe fc85 	bl	8008978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a06e:	bf00      	nop
 800a070:	3718      	adds	r7, #24
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000e5e0 	.word	0x2000e5e0
 800a07c:	2000e5d0 	.word	0x2000e5d0
 800a080:	2000e5dc 	.word	0x2000e5dc

0800a084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a08a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800a08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a090:	4b27      	ldr	r3, [pc, #156]	; (800a130 <prvHeapInit+0xac>)
 800a092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00c      	beq.n	800a0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3307      	adds	r3, #7
 800a0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0307 	bic.w	r3, r3, #7
 800a0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	4a1f      	ldr	r2, [pc, #124]	; (800a130 <prvHeapInit+0xac>)
 800a0b4:	4413      	add	r3, r2
 800a0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <prvHeapInit+0xb0>)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <prvHeapInit+0xb0>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f023 0307 	bic.w	r3, r3, #7
 800a0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a15      	ldr	r2, [pc, #84]	; (800a138 <prvHeapInit+0xb4>)
 800a0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0e6:	4b14      	ldr	r3, [pc, #80]	; (800a138 <prvHeapInit+0xb4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ee:	4b12      	ldr	r3, [pc, #72]	; (800a138 <prvHeapInit+0xb4>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a104:	4b0c      	ldr	r3, [pc, #48]	; (800a138 <prvHeapInit+0xb4>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	4a0a      	ldr	r2, [pc, #40]	; (800a13c <prvHeapInit+0xb8>)
 800a112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	4a09      	ldr	r2, [pc, #36]	; (800a140 <prvHeapInit+0xbc>)
 800a11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a11c:	4b09      	ldr	r3, [pc, #36]	; (800a144 <prvHeapInit+0xc0>)
 800a11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	2000841c 	.word	0x2000841c
 800a134:	2000e5c4 	.word	0x2000e5c4
 800a138:	2000e5cc 	.word	0x2000e5cc
 800a13c:	2000e5d4 	.word	0x2000e5d4
 800a140:	2000e5d0 	.word	0x2000e5d0
 800a144:	2000e5e0 	.word	0x2000e5e0

0800a148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a150:	4b28      	ldr	r3, [pc, #160]	; (800a1f4 <prvInsertBlockIntoFreeList+0xac>)
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	e002      	b.n	800a15c <prvInsertBlockIntoFreeList+0x14>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d8f7      	bhi.n	800a156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d108      	bne.n	800a18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	441a      	add	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	441a      	add	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d118      	bne.n	800a1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d00d      	beq.n	800a1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	e008      	b.n	800a1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	e003      	b.n	800a1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d002      	beq.n	800a1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2000e5c4 	.word	0x2000e5c4
 800a1f8:	2000e5cc 	.word	0x2000e5cc

0800a1fc <__cvt>:
 800a1fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	ec55 4b10 	vmov	r4, r5, d0
 800a204:	2d00      	cmp	r5, #0
 800a206:	460e      	mov	r6, r1
 800a208:	4619      	mov	r1, r3
 800a20a:	462b      	mov	r3, r5
 800a20c:	bfbb      	ittet	lt
 800a20e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a212:	461d      	movlt	r5, r3
 800a214:	2300      	movge	r3, #0
 800a216:	232d      	movlt	r3, #45	; 0x2d
 800a218:	700b      	strb	r3, [r1, #0]
 800a21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a220:	4691      	mov	r9, r2
 800a222:	f023 0820 	bic.w	r8, r3, #32
 800a226:	bfbc      	itt	lt
 800a228:	4622      	movlt	r2, r4
 800a22a:	4614      	movlt	r4, r2
 800a22c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a230:	d005      	beq.n	800a23e <__cvt+0x42>
 800a232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a236:	d100      	bne.n	800a23a <__cvt+0x3e>
 800a238:	3601      	adds	r6, #1
 800a23a:	2102      	movs	r1, #2
 800a23c:	e000      	b.n	800a240 <__cvt+0x44>
 800a23e:	2103      	movs	r1, #3
 800a240:	ab03      	add	r3, sp, #12
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	ab02      	add	r3, sp, #8
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	ec45 4b10 	vmov	d0, r4, r5
 800a24c:	4653      	mov	r3, sl
 800a24e:	4632      	mov	r2, r6
 800a250:	f000 ffee 	bl	800b230 <_dtoa_r>
 800a254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a258:	4607      	mov	r7, r0
 800a25a:	d102      	bne.n	800a262 <__cvt+0x66>
 800a25c:	f019 0f01 	tst.w	r9, #1
 800a260:	d022      	beq.n	800a2a8 <__cvt+0xac>
 800a262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a266:	eb07 0906 	add.w	r9, r7, r6
 800a26a:	d110      	bne.n	800a28e <__cvt+0x92>
 800a26c:	783b      	ldrb	r3, [r7, #0]
 800a26e:	2b30      	cmp	r3, #48	; 0x30
 800a270:	d10a      	bne.n	800a288 <__cvt+0x8c>
 800a272:	2200      	movs	r2, #0
 800a274:	2300      	movs	r3, #0
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 fc35 	bl	8000ae8 <__aeabi_dcmpeq>
 800a27e:	b918      	cbnz	r0, 800a288 <__cvt+0x8c>
 800a280:	f1c6 0601 	rsb	r6, r6, #1
 800a284:	f8ca 6000 	str.w	r6, [sl]
 800a288:	f8da 3000 	ldr.w	r3, [sl]
 800a28c:	4499      	add	r9, r3
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	4620      	mov	r0, r4
 800a294:	4629      	mov	r1, r5
 800a296:	f7f6 fc27 	bl	8000ae8 <__aeabi_dcmpeq>
 800a29a:	b108      	cbz	r0, 800a2a0 <__cvt+0xa4>
 800a29c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2a0:	2230      	movs	r2, #48	; 0x30
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	454b      	cmp	r3, r9
 800a2a6:	d307      	bcc.n	800a2b8 <__cvt+0xbc>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2ac:	1bdb      	subs	r3, r3, r7
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	b004      	add	sp, #16
 800a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b8:	1c59      	adds	r1, r3, #1
 800a2ba:	9103      	str	r1, [sp, #12]
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e7f0      	b.n	800a2a2 <__cvt+0xa6>

0800a2c0 <__exponent>:
 800a2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	bfb8      	it	lt
 800a2c8:	4249      	neglt	r1, r1
 800a2ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a2ce:	bfb4      	ite	lt
 800a2d0:	222d      	movlt	r2, #45	; 0x2d
 800a2d2:	222b      	movge	r2, #43	; 0x2b
 800a2d4:	2909      	cmp	r1, #9
 800a2d6:	7042      	strb	r2, [r0, #1]
 800a2d8:	dd2a      	ble.n	800a330 <__exponent+0x70>
 800a2da:	f10d 0207 	add.w	r2, sp, #7
 800a2de:	4617      	mov	r7, r2
 800a2e0:	260a      	movs	r6, #10
 800a2e2:	4694      	mov	ip, r2
 800a2e4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a2e8:	fb06 1415 	mls	r4, r6, r5, r1
 800a2ec:	3430      	adds	r4, #48	; 0x30
 800a2ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	2c63      	cmp	r4, #99	; 0x63
 800a2f6:	f102 32ff 	add.w	r2, r2, #4294967295
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	dcf1      	bgt.n	800a2e2 <__exponent+0x22>
 800a2fe:	3130      	adds	r1, #48	; 0x30
 800a300:	f1ac 0402 	sub.w	r4, ip, #2
 800a304:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a308:	1c41      	adds	r1, r0, #1
 800a30a:	4622      	mov	r2, r4
 800a30c:	42ba      	cmp	r2, r7
 800a30e:	d30a      	bcc.n	800a326 <__exponent+0x66>
 800a310:	f10d 0209 	add.w	r2, sp, #9
 800a314:	eba2 020c 	sub.w	r2, r2, ip
 800a318:	42bc      	cmp	r4, r7
 800a31a:	bf88      	it	hi
 800a31c:	2200      	movhi	r2, #0
 800a31e:	4413      	add	r3, r2
 800a320:	1a18      	subs	r0, r3, r0
 800a322:	b003      	add	sp, #12
 800a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a326:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a32a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a32e:	e7ed      	b.n	800a30c <__exponent+0x4c>
 800a330:	2330      	movs	r3, #48	; 0x30
 800a332:	3130      	adds	r1, #48	; 0x30
 800a334:	7083      	strb	r3, [r0, #2]
 800a336:	70c1      	strb	r1, [r0, #3]
 800a338:	1d03      	adds	r3, r0, #4
 800a33a:	e7f1      	b.n	800a320 <__exponent+0x60>

0800a33c <_printf_float>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	ed2d 8b02 	vpush	{d8}
 800a344:	b08d      	sub	sp, #52	; 0x34
 800a346:	460c      	mov	r4, r1
 800a348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a34c:	4616      	mov	r6, r2
 800a34e:	461f      	mov	r7, r3
 800a350:	4605      	mov	r5, r0
 800a352:	f000 fe01 	bl	800af58 <_localeconv_r>
 800a356:	f8d0 a000 	ldr.w	sl, [r0]
 800a35a:	4650      	mov	r0, sl
 800a35c:	f7f5 ff98 	bl	8000290 <strlen>
 800a360:	2300      	movs	r3, #0
 800a362:	930a      	str	r3, [sp, #40]	; 0x28
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	f8d8 3000 	ldr.w	r3, [r8]
 800a36c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a370:	3307      	adds	r3, #7
 800a372:	f023 0307 	bic.w	r3, r3, #7
 800a376:	f103 0208 	add.w	r2, r3, #8
 800a37a:	f8c8 2000 	str.w	r2, [r8]
 800a37e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f8cd 8018 	str.w	r8, [sp, #24]
 800a38c:	ee08 0a10 	vmov	s16, r0
 800a390:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a398:	4b9e      	ldr	r3, [pc, #632]	; (800a614 <_printf_float+0x2d8>)
 800a39a:	f04f 32ff 	mov.w	r2, #4294967295
 800a39e:	f7f6 fbd5 	bl	8000b4c <__aeabi_dcmpun>
 800a3a2:	bb88      	cbnz	r0, 800a408 <_printf_float+0xcc>
 800a3a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3a8:	4b9a      	ldr	r3, [pc, #616]	; (800a614 <_printf_float+0x2d8>)
 800a3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ae:	f7f6 fbaf 	bl	8000b10 <__aeabi_dcmple>
 800a3b2:	bb48      	cbnz	r0, 800a408 <_printf_float+0xcc>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f6 fb9e 	bl	8000afc <__aeabi_dcmplt>
 800a3c0:	b110      	cbz	r0, 800a3c8 <_printf_float+0x8c>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c8:	4a93      	ldr	r2, [pc, #588]	; (800a618 <_printf_float+0x2dc>)
 800a3ca:	4b94      	ldr	r3, [pc, #592]	; (800a61c <_printf_float+0x2e0>)
 800a3cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3d0:	bf94      	ite	ls
 800a3d2:	4690      	movls	r8, r2
 800a3d4:	4698      	movhi	r8, r3
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	f023 0304 	bic.w	r3, r3, #4
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	9700      	str	r7, [sp, #0]
 800a3e8:	4633      	mov	r3, r6
 800a3ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 f9da 	bl	800a7a8 <_printf_common>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f040 8090 	bne.w	800a51a <_printf_float+0x1de>
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fe:	b00d      	add	sp, #52	; 0x34
 800a400:	ecbd 8b02 	vpop	{d8}
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	4642      	mov	r2, r8
 800a40a:	464b      	mov	r3, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	4649      	mov	r1, r9
 800a410:	f7f6 fb9c 	bl	8000b4c <__aeabi_dcmpun>
 800a414:	b140      	cbz	r0, 800a428 <_printf_float+0xec>
 800a416:	464b      	mov	r3, r9
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfbc      	itt	lt
 800a41c:	232d      	movlt	r3, #45	; 0x2d
 800a41e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a422:	4a7f      	ldr	r2, [pc, #508]	; (800a620 <_printf_float+0x2e4>)
 800a424:	4b7f      	ldr	r3, [pc, #508]	; (800a624 <_printf_float+0x2e8>)
 800a426:	e7d1      	b.n	800a3cc <_printf_float+0x90>
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a42e:	9206      	str	r2, [sp, #24]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	d13f      	bne.n	800a4b4 <_printf_float+0x178>
 800a434:	2306      	movs	r3, #6
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	9b05      	ldr	r3, [sp, #20]
 800a43a:	6861      	ldr	r1, [r4, #4]
 800a43c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a440:	2300      	movs	r3, #0
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	ab0a      	add	r3, sp, #40	; 0x28
 800a446:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a44a:	ab09      	add	r3, sp, #36	; 0x24
 800a44c:	ec49 8b10 	vmov	d0, r8, r9
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff fecf 	bl	800a1fc <__cvt>
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a462:	2b47      	cmp	r3, #71	; 0x47
 800a464:	4680      	mov	r8, r0
 800a466:	d108      	bne.n	800a47a <_printf_float+0x13e>
 800a468:	1cc8      	adds	r0, r1, #3
 800a46a:	db02      	blt.n	800a472 <_printf_float+0x136>
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	4299      	cmp	r1, r3
 800a470:	dd41      	ble.n	800a4f6 <_printf_float+0x1ba>
 800a472:	f1ab 0302 	sub.w	r3, fp, #2
 800a476:	fa5f fb83 	uxtb.w	fp, r3
 800a47a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a47e:	d820      	bhi.n	800a4c2 <_printf_float+0x186>
 800a480:	3901      	subs	r1, #1
 800a482:	465a      	mov	r2, fp
 800a484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a488:	9109      	str	r1, [sp, #36]	; 0x24
 800a48a:	f7ff ff19 	bl	800a2c0 <__exponent>
 800a48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a490:	1813      	adds	r3, r2, r0
 800a492:	2a01      	cmp	r2, #1
 800a494:	4681      	mov	r9, r0
 800a496:	6123      	str	r3, [r4, #16]
 800a498:	dc02      	bgt.n	800a4a0 <_printf_float+0x164>
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	07d2      	lsls	r2, r2, #31
 800a49e:	d501      	bpl.n	800a4a4 <_printf_float+0x168>
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d09c      	beq.n	800a3e6 <_printf_float+0xaa>
 800a4ac:	232d      	movs	r3, #45	; 0x2d
 800a4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b2:	e798      	b.n	800a3e6 <_printf_float+0xaa>
 800a4b4:	9a06      	ldr	r2, [sp, #24]
 800a4b6:	2a47      	cmp	r2, #71	; 0x47
 800a4b8:	d1be      	bne.n	800a438 <_printf_float+0xfc>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1bc      	bne.n	800a438 <_printf_float+0xfc>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e7b9      	b.n	800a436 <_printf_float+0xfa>
 800a4c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4c6:	d118      	bne.n	800a4fa <_printf_float+0x1be>
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	6863      	ldr	r3, [r4, #4]
 800a4cc:	dd0b      	ble.n	800a4e6 <_printf_float+0x1aa>
 800a4ce:	6121      	str	r1, [r4, #16]
 800a4d0:	b913      	cbnz	r3, 800a4d8 <_printf_float+0x19c>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	07d0      	lsls	r0, r2, #31
 800a4d6:	d502      	bpl.n	800a4de <_printf_float+0x1a2>
 800a4d8:	3301      	adds	r3, #1
 800a4da:	440b      	add	r3, r1
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4e0:	f04f 0900 	mov.w	r9, #0
 800a4e4:	e7de      	b.n	800a4a4 <_printf_float+0x168>
 800a4e6:	b913      	cbnz	r3, 800a4ee <_printf_float+0x1b2>
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	07d2      	lsls	r2, r2, #31
 800a4ec:	d501      	bpl.n	800a4f2 <_printf_float+0x1b6>
 800a4ee:	3302      	adds	r3, #2
 800a4f0:	e7f4      	b.n	800a4dc <_printf_float+0x1a0>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e7f2      	b.n	800a4dc <_printf_float+0x1a0>
 800a4f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	db05      	blt.n	800a50c <_printf_float+0x1d0>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	6121      	str	r1, [r4, #16]
 800a504:	07d8      	lsls	r0, r3, #31
 800a506:	d5ea      	bpl.n	800a4de <_printf_float+0x1a2>
 800a508:	1c4b      	adds	r3, r1, #1
 800a50a:	e7e7      	b.n	800a4dc <_printf_float+0x1a0>
 800a50c:	2900      	cmp	r1, #0
 800a50e:	bfd4      	ite	le
 800a510:	f1c1 0202 	rsble	r2, r1, #2
 800a514:	2201      	movgt	r2, #1
 800a516:	4413      	add	r3, r2
 800a518:	e7e0      	b.n	800a4dc <_printf_float+0x1a0>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	055a      	lsls	r2, r3, #21
 800a51e:	d407      	bmi.n	800a530 <_printf_float+0x1f4>
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	4642      	mov	r2, r8
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	d12c      	bne.n	800a588 <_printf_float+0x24c>
 800a52e:	e764      	b.n	800a3fa <_printf_float+0xbe>
 800a530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a534:	f240 80e0 	bls.w	800a6f8 <_printf_float+0x3bc>
 800a538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a53c:	2200      	movs	r2, #0
 800a53e:	2300      	movs	r3, #0
 800a540:	f7f6 fad2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a544:	2800      	cmp	r0, #0
 800a546:	d034      	beq.n	800a5b2 <_printf_float+0x276>
 800a548:	4a37      	ldr	r2, [pc, #220]	; (800a628 <_printf_float+0x2ec>)
 800a54a:	2301      	movs	r3, #1
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af51 	beq.w	800a3fa <_printf_float+0xbe>
 800a558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a55c:	429a      	cmp	r2, r3
 800a55e:	db02      	blt.n	800a566 <_printf_float+0x22a>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	07d8      	lsls	r0, r3, #31
 800a564:	d510      	bpl.n	800a588 <_printf_float+0x24c>
 800a566:	ee18 3a10 	vmov	r3, s16
 800a56a:	4652      	mov	r2, sl
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	f43f af41 	beq.w	800a3fa <_printf_float+0xbe>
 800a578:	f04f 0800 	mov.w	r8, #0
 800a57c:	f104 091a 	add.w	r9, r4, #26
 800a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a582:	3b01      	subs	r3, #1
 800a584:	4543      	cmp	r3, r8
 800a586:	dc09      	bgt.n	800a59c <_printf_float+0x260>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	079b      	lsls	r3, r3, #30
 800a58c:	f100 8107 	bmi.w	800a79e <_printf_float+0x462>
 800a590:	68e0      	ldr	r0, [r4, #12]
 800a592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a594:	4298      	cmp	r0, r3
 800a596:	bfb8      	it	lt
 800a598:	4618      	movlt	r0, r3
 800a59a:	e730      	b.n	800a3fe <_printf_float+0xc2>
 800a59c:	2301      	movs	r3, #1
 800a59e:	464a      	mov	r2, r9
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af27 	beq.w	800a3fa <_printf_float+0xbe>
 800a5ac:	f108 0801 	add.w	r8, r8, #1
 800a5b0:	e7e6      	b.n	800a580 <_printf_float+0x244>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dc39      	bgt.n	800a62c <_printf_float+0x2f0>
 800a5b8:	4a1b      	ldr	r2, [pc, #108]	; (800a628 <_printf_float+0x2ec>)
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af19 	beq.w	800a3fa <_printf_float+0xbe>
 800a5c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	d102      	bne.n	800a5d6 <_printf_float+0x29a>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d5d8      	bpl.n	800a588 <_printf_float+0x24c>
 800a5d6:	ee18 3a10 	vmov	r3, s16
 800a5da:	4652      	mov	r2, sl
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f af09 	beq.w	800a3fa <_printf_float+0xbe>
 800a5e8:	f04f 0900 	mov.w	r9, #0
 800a5ec:	f104 0a1a 	add.w	sl, r4, #26
 800a5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f2:	425b      	negs	r3, r3
 800a5f4:	454b      	cmp	r3, r9
 800a5f6:	dc01      	bgt.n	800a5fc <_printf_float+0x2c0>
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	e792      	b.n	800a522 <_printf_float+0x1e6>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4652      	mov	r2, sl
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f aef7 	beq.w	800a3fa <_printf_float+0xbe>
 800a60c:	f109 0901 	add.w	r9, r9, #1
 800a610:	e7ee      	b.n	800a5f0 <_printf_float+0x2b4>
 800a612:	bf00      	nop
 800a614:	7fefffff 	.word	0x7fefffff
 800a618:	0800d3cc 	.word	0x0800d3cc
 800a61c:	0800d3d0 	.word	0x0800d3d0
 800a620:	0800d3d4 	.word	0x0800d3d4
 800a624:	0800d3d8 	.word	0x0800d3d8
 800a628:	0800d3dc 	.word	0x0800d3dc
 800a62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a630:	429a      	cmp	r2, r3
 800a632:	bfa8      	it	ge
 800a634:	461a      	movge	r2, r3
 800a636:	2a00      	cmp	r2, #0
 800a638:	4691      	mov	r9, r2
 800a63a:	dc37      	bgt.n	800a6ac <_printf_float+0x370>
 800a63c:	f04f 0b00 	mov.w	fp, #0
 800a640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a644:	f104 021a 	add.w	r2, r4, #26
 800a648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	eba3 0309 	sub.w	r3, r3, r9
 800a650:	455b      	cmp	r3, fp
 800a652:	dc33      	bgt.n	800a6bc <_printf_float+0x380>
 800a654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a658:	429a      	cmp	r2, r3
 800a65a:	db3b      	blt.n	800a6d4 <_printf_float+0x398>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07da      	lsls	r2, r3, #31
 800a660:	d438      	bmi.n	800a6d4 <_printf_float+0x398>
 800a662:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a666:	eba2 0903 	sub.w	r9, r2, r3
 800a66a:	9b05      	ldr	r3, [sp, #20]
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	4591      	cmp	r9, r2
 800a670:	bfa8      	it	ge
 800a672:	4691      	movge	r9, r2
 800a674:	f1b9 0f00 	cmp.w	r9, #0
 800a678:	dc35      	bgt.n	800a6e6 <_printf_float+0x3aa>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	eba3 0309 	sub.w	r3, r3, r9
 800a690:	4543      	cmp	r3, r8
 800a692:	f77f af79 	ble.w	800a588 <_printf_float+0x24c>
 800a696:	2301      	movs	r3, #1
 800a698:	4652      	mov	r2, sl
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f aeaa 	beq.w	800a3fa <_printf_float+0xbe>
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	e7ec      	b.n	800a686 <_printf_float+0x34a>
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	47b8      	blx	r7
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d1c0      	bne.n	800a63c <_printf_float+0x300>
 800a6ba:	e69e      	b.n	800a3fa <_printf_float+0xbe>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	9205      	str	r2, [sp, #20]
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f43f ae97 	beq.w	800a3fa <_printf_float+0xbe>
 800a6cc:	9a05      	ldr	r2, [sp, #20]
 800a6ce:	f10b 0b01 	add.w	fp, fp, #1
 800a6d2:	e7b9      	b.n	800a648 <_printf_float+0x30c>
 800a6d4:	ee18 3a10 	vmov	r3, s16
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1be      	bne.n	800a662 <_printf_float+0x326>
 800a6e4:	e689      	b.n	800a3fa <_printf_float+0xbe>
 800a6e6:	9a05      	ldr	r2, [sp, #20]
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	4442      	add	r2, r8
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d1c1      	bne.n	800a67a <_printf_float+0x33e>
 800a6f6:	e680      	b.n	800a3fa <_printf_float+0xbe>
 800a6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6fa:	2a01      	cmp	r2, #1
 800a6fc:	dc01      	bgt.n	800a702 <_printf_float+0x3c6>
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d53a      	bpl.n	800a778 <_printf_float+0x43c>
 800a702:	2301      	movs	r3, #1
 800a704:	4642      	mov	r2, r8
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f ae74 	beq.w	800a3fa <_printf_float+0xbe>
 800a712:	ee18 3a10 	vmov	r3, s16
 800a716:	4652      	mov	r2, sl
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b8      	blx	r7
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f ae6b 	beq.w	800a3fa <_printf_float+0xbe>
 800a724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a730:	f7f6 f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 800a734:	b9d8      	cbnz	r0, 800a76e <_printf_float+0x432>
 800a736:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a73a:	f108 0201 	add.w	r2, r8, #1
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	d10e      	bne.n	800a766 <_printf_float+0x42a>
 800a748:	e657      	b.n	800a3fa <_printf_float+0xbe>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4652      	mov	r2, sl
 800a74e:	4631      	mov	r1, r6
 800a750:	4628      	mov	r0, r5
 800a752:	47b8      	blx	r7
 800a754:	3001      	adds	r0, #1
 800a756:	f43f ae50 	beq.w	800a3fa <_printf_float+0xbe>
 800a75a:	f108 0801 	add.w	r8, r8, #1
 800a75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a760:	3b01      	subs	r3, #1
 800a762:	4543      	cmp	r3, r8
 800a764:	dcf1      	bgt.n	800a74a <_printf_float+0x40e>
 800a766:	464b      	mov	r3, r9
 800a768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a76c:	e6da      	b.n	800a524 <_printf_float+0x1e8>
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f104 0a1a 	add.w	sl, r4, #26
 800a776:	e7f2      	b.n	800a75e <_printf_float+0x422>
 800a778:	2301      	movs	r3, #1
 800a77a:	4642      	mov	r2, r8
 800a77c:	e7df      	b.n	800a73e <_printf_float+0x402>
 800a77e:	2301      	movs	r3, #1
 800a780:	464a      	mov	r2, r9
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae36 	beq.w	800a3fa <_printf_float+0xbe>
 800a78e:	f108 0801 	add.w	r8, r8, #1
 800a792:	68e3      	ldr	r3, [r4, #12]
 800a794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a796:	1a5b      	subs	r3, r3, r1
 800a798:	4543      	cmp	r3, r8
 800a79a:	dcf0      	bgt.n	800a77e <_printf_float+0x442>
 800a79c:	e6f8      	b.n	800a590 <_printf_float+0x254>
 800a79e:	f04f 0800 	mov.w	r8, #0
 800a7a2:	f104 0919 	add.w	r9, r4, #25
 800a7a6:	e7f4      	b.n	800a792 <_printf_float+0x456>

0800a7a8 <_printf_common>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	688a      	ldr	r2, [r1, #8]
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfb8      	it	lt
 800a7bc:	4613      	movlt	r3, r2
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_printf_common+0x26>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0699      	lsls	r1, r3, #26
 800a7d2:	bf42      	ittt	mi
 800a7d4:	6833      	ldrmi	r3, [r6, #0]
 800a7d6:	3302      	addmi	r3, #2
 800a7d8:	6033      	strmi	r3, [r6, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	f015 0506 	ands.w	r5, r5, #6
 800a7e0:	d106      	bne.n	800a7f0 <_printf_common+0x48>
 800a7e2:	f104 0a19 	add.w	sl, r4, #25
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	6832      	ldr	r2, [r6, #0]
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dc26      	bgt.n	800a83e <_printf_common+0x96>
 800a7f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f4:	1e13      	subs	r3, r2, #0
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	bf18      	it	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	0692      	lsls	r2, r2, #26
 800a7fe:	d42b      	bmi.n	800a858 <_printf_common+0xb0>
 800a800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a804:	4649      	mov	r1, r9
 800a806:	4638      	mov	r0, r7
 800a808:	47c0      	blx	r8
 800a80a:	3001      	adds	r0, #1
 800a80c:	d01e      	beq.n	800a84c <_printf_common+0xa4>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	f003 0306 	and.w	r3, r3, #6
 800a816:	2b04      	cmp	r3, #4
 800a818:	bf02      	ittt	eq
 800a81a:	68e5      	ldreq	r5, [r4, #12]
 800a81c:	6833      	ldreq	r3, [r6, #0]
 800a81e:	1aed      	subeq	r5, r5, r3
 800a820:	68a3      	ldr	r3, [r4, #8]
 800a822:	bf0c      	ite	eq
 800a824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a828:	2500      	movne	r5, #0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bfc4      	itt	gt
 800a82e:	1a9b      	subgt	r3, r3, r2
 800a830:	18ed      	addgt	r5, r5, r3
 800a832:	2600      	movs	r6, #0
 800a834:	341a      	adds	r4, #26
 800a836:	42b5      	cmp	r5, r6
 800a838:	d11a      	bne.n	800a870 <_printf_common+0xc8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e008      	b.n	800a850 <_printf_common+0xa8>
 800a83e:	2301      	movs	r3, #1
 800a840:	4652      	mov	r2, sl
 800a842:	4649      	mov	r1, r9
 800a844:	4638      	mov	r0, r7
 800a846:	47c0      	blx	r8
 800a848:	3001      	adds	r0, #1
 800a84a:	d103      	bne.n	800a854 <_printf_common+0xac>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a854:	3501      	adds	r5, #1
 800a856:	e7c6      	b.n	800a7e6 <_printf_common+0x3e>
 800a858:	18e1      	adds	r1, r4, r3
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	2030      	movs	r0, #48	; 0x30
 800a85e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a862:	4422      	add	r2, r4
 800a864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a86c:	3302      	adds	r3, #2
 800a86e:	e7c7      	b.n	800a800 <_printf_common+0x58>
 800a870:	2301      	movs	r3, #1
 800a872:	4622      	mov	r2, r4
 800a874:	4649      	mov	r1, r9
 800a876:	4638      	mov	r0, r7
 800a878:	47c0      	blx	r8
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa4>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d9      	b.n	800a836 <_printf_common+0x8e>
	...

0800a884 <_printf_i>:
 800a884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	7e0f      	ldrb	r7, [r1, #24]
 800a88a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a88c:	2f78      	cmp	r7, #120	; 0x78
 800a88e:	4691      	mov	r9, r2
 800a890:	4680      	mov	r8, r0
 800a892:	460c      	mov	r4, r1
 800a894:	469a      	mov	sl, r3
 800a896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a89a:	d807      	bhi.n	800a8ac <_printf_i+0x28>
 800a89c:	2f62      	cmp	r7, #98	; 0x62
 800a89e:	d80a      	bhi.n	800a8b6 <_printf_i+0x32>
 800a8a0:	2f00      	cmp	r7, #0
 800a8a2:	f000 80d4 	beq.w	800aa4e <_printf_i+0x1ca>
 800a8a6:	2f58      	cmp	r7, #88	; 0x58
 800a8a8:	f000 80c0 	beq.w	800aa2c <_printf_i+0x1a8>
 800a8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b4:	e03a      	b.n	800a92c <_printf_i+0xa8>
 800a8b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ba:	2b15      	cmp	r3, #21
 800a8bc:	d8f6      	bhi.n	800a8ac <_printf_i+0x28>
 800a8be:	a101      	add	r1, pc, #4	; (adr r1, 800a8c4 <_printf_i+0x40>)
 800a8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c4:	0800a91d 	.word	0x0800a91d
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a8ad 	.word	0x0800a8ad
 800a8d0:	0800a8ad 	.word	0x0800a8ad
 800a8d4:	0800a8ad 	.word	0x0800a8ad
 800a8d8:	0800a8ad 	.word	0x0800a8ad
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a8ad 	.word	0x0800a8ad
 800a8e4:	0800a8ad 	.word	0x0800a8ad
 800a8e8:	0800a8ad 	.word	0x0800a8ad
 800a8ec:	0800a8ad 	.word	0x0800a8ad
 800a8f0:	0800aa35 	.word	0x0800aa35
 800a8f4:	0800a95d 	.word	0x0800a95d
 800a8f8:	0800a9ef 	.word	0x0800a9ef
 800a8fc:	0800a8ad 	.word	0x0800a8ad
 800a900:	0800a8ad 	.word	0x0800a8ad
 800a904:	0800aa57 	.word	0x0800aa57
 800a908:	0800a8ad 	.word	0x0800a8ad
 800a90c:	0800a95d 	.word	0x0800a95d
 800a910:	0800a8ad 	.word	0x0800a8ad
 800a914:	0800a8ad 	.word	0x0800a8ad
 800a918:	0800a9f7 	.word	0x0800a9f7
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	602a      	str	r2, [r5, #0]
 800a924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a92c:	2301      	movs	r3, #1
 800a92e:	e09f      	b.n	800aa70 <_printf_i+0x1ec>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	0607      	lsls	r7, r0, #24
 800a936:	f103 0104 	add.w	r1, r3, #4
 800a93a:	6029      	str	r1, [r5, #0]
 800a93c:	d501      	bpl.n	800a942 <_printf_i+0xbe>
 800a93e:	681e      	ldr	r6, [r3, #0]
 800a940:	e003      	b.n	800a94a <_printf_i+0xc6>
 800a942:	0646      	lsls	r6, r0, #25
 800a944:	d5fb      	bpl.n	800a93e <_printf_i+0xba>
 800a946:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	da03      	bge.n	800a956 <_printf_i+0xd2>
 800a94e:	232d      	movs	r3, #45	; 0x2d
 800a950:	4276      	negs	r6, r6
 800a952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a956:	485a      	ldr	r0, [pc, #360]	; (800aac0 <_printf_i+0x23c>)
 800a958:	230a      	movs	r3, #10
 800a95a:	e012      	b.n	800a982 <_printf_i+0xfe>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	6029      	str	r1, [r5, #0]
 800a964:	0605      	lsls	r5, r0, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xe8>
 800a968:	681e      	ldr	r6, [r3, #0]
 800a96a:	e002      	b.n	800a972 <_printf_i+0xee>
 800a96c:	0641      	lsls	r1, r0, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xe4>
 800a970:	881e      	ldrh	r6, [r3, #0]
 800a972:	4853      	ldr	r0, [pc, #332]	; (800aac0 <_printf_i+0x23c>)
 800a974:	2f6f      	cmp	r7, #111	; 0x6f
 800a976:	bf0c      	ite	eq
 800a978:	2308      	moveq	r3, #8
 800a97a:	230a      	movne	r3, #10
 800a97c:	2100      	movs	r1, #0
 800a97e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a982:	6865      	ldr	r5, [r4, #4]
 800a984:	60a5      	str	r5, [r4, #8]
 800a986:	2d00      	cmp	r5, #0
 800a988:	bfa2      	ittt	ge
 800a98a:	6821      	ldrge	r1, [r4, #0]
 800a98c:	f021 0104 	bicge.w	r1, r1, #4
 800a990:	6021      	strge	r1, [r4, #0]
 800a992:	b90e      	cbnz	r6, 800a998 <_printf_i+0x114>
 800a994:	2d00      	cmp	r5, #0
 800a996:	d04b      	beq.n	800aa30 <_printf_i+0x1ac>
 800a998:	4615      	mov	r5, r2
 800a99a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a99e:	fb03 6711 	mls	r7, r3, r1, r6
 800a9a2:	5dc7      	ldrb	r7, [r0, r7]
 800a9a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9a8:	4637      	mov	r7, r6
 800a9aa:	42bb      	cmp	r3, r7
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	d9f4      	bls.n	800a99a <_printf_i+0x116>
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	d10b      	bne.n	800a9cc <_printf_i+0x148>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	07de      	lsls	r6, r3, #31
 800a9b8:	d508      	bpl.n	800a9cc <_printf_i+0x148>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	6861      	ldr	r1, [r4, #4]
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	bfde      	ittt	le
 800a9c2:	2330      	movle	r3, #48	; 0x30
 800a9c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9cc:	1b52      	subs	r2, r2, r5
 800a9ce:	6122      	str	r2, [r4, #16]
 800a9d0:	f8cd a000 	str.w	sl, [sp]
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	aa03      	add	r2, sp, #12
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4640      	mov	r0, r8
 800a9dc:	f7ff fee4 	bl	800a7a8 <_printf_common>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d14a      	bne.n	800aa7a <_printf_i+0x1f6>
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	b004      	add	sp, #16
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f043 0320 	orr.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	4833      	ldr	r0, [pc, #204]	; (800aac4 <_printf_i+0x240>)
 800a9f8:	2778      	movs	r7, #120	; 0x78
 800a9fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	6829      	ldr	r1, [r5, #0]
 800aa02:	061f      	lsls	r7, r3, #24
 800aa04:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa08:	d402      	bmi.n	800aa10 <_printf_i+0x18c>
 800aa0a:	065f      	lsls	r7, r3, #25
 800aa0c:	bf48      	it	mi
 800aa0e:	b2b6      	uxthmi	r6, r6
 800aa10:	07df      	lsls	r7, r3, #31
 800aa12:	bf48      	it	mi
 800aa14:	f043 0320 	orrmi.w	r3, r3, #32
 800aa18:	6029      	str	r1, [r5, #0]
 800aa1a:	bf48      	it	mi
 800aa1c:	6023      	strmi	r3, [r4, #0]
 800aa1e:	b91e      	cbnz	r6, 800aa28 <_printf_i+0x1a4>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	f023 0320 	bic.w	r3, r3, #32
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	2310      	movs	r3, #16
 800aa2a:	e7a7      	b.n	800a97c <_printf_i+0xf8>
 800aa2c:	4824      	ldr	r0, [pc, #144]	; (800aac0 <_printf_i+0x23c>)
 800aa2e:	e7e4      	b.n	800a9fa <_printf_i+0x176>
 800aa30:	4615      	mov	r5, r2
 800aa32:	e7bd      	b.n	800a9b0 <_printf_i+0x12c>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	6826      	ldr	r6, [r4, #0]
 800aa38:	6961      	ldr	r1, [r4, #20]
 800aa3a:	1d18      	adds	r0, r3, #4
 800aa3c:	6028      	str	r0, [r5, #0]
 800aa3e:	0635      	lsls	r5, r6, #24
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	d501      	bpl.n	800aa48 <_printf_i+0x1c4>
 800aa44:	6019      	str	r1, [r3, #0]
 800aa46:	e002      	b.n	800aa4e <_printf_i+0x1ca>
 800aa48:	0670      	lsls	r0, r6, #25
 800aa4a:	d5fb      	bpl.n	800aa44 <_printf_i+0x1c0>
 800aa4c:	8019      	strh	r1, [r3, #0]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6123      	str	r3, [r4, #16]
 800aa52:	4615      	mov	r5, r2
 800aa54:	e7bc      	b.n	800a9d0 <_printf_i+0x14c>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	1d1a      	adds	r2, r3, #4
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	681d      	ldr	r5, [r3, #0]
 800aa5e:	6862      	ldr	r2, [r4, #4]
 800aa60:	2100      	movs	r1, #0
 800aa62:	4628      	mov	r0, r5
 800aa64:	f7f5 fbc4 	bl	80001f0 <memchr>
 800aa68:	b108      	cbz	r0, 800aa6e <_printf_i+0x1ea>
 800aa6a:	1b40      	subs	r0, r0, r5
 800aa6c:	6060      	str	r0, [r4, #4]
 800aa6e:	6863      	ldr	r3, [r4, #4]
 800aa70:	6123      	str	r3, [r4, #16]
 800aa72:	2300      	movs	r3, #0
 800aa74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa78:	e7aa      	b.n	800a9d0 <_printf_i+0x14c>
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	4649      	mov	r1, r9
 800aa80:	4640      	mov	r0, r8
 800aa82:	47d0      	blx	sl
 800aa84:	3001      	adds	r0, #1
 800aa86:	d0ad      	beq.n	800a9e4 <_printf_i+0x160>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	079b      	lsls	r3, r3, #30
 800aa8c:	d413      	bmi.n	800aab6 <_printf_i+0x232>
 800aa8e:	68e0      	ldr	r0, [r4, #12]
 800aa90:	9b03      	ldr	r3, [sp, #12]
 800aa92:	4298      	cmp	r0, r3
 800aa94:	bfb8      	it	lt
 800aa96:	4618      	movlt	r0, r3
 800aa98:	e7a6      	b.n	800a9e8 <_printf_i+0x164>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	47d0      	blx	sl
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d09d      	beq.n	800a9e4 <_printf_i+0x160>
 800aaa8:	3501      	adds	r5, #1
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	9903      	ldr	r1, [sp, #12]
 800aaae:	1a5b      	subs	r3, r3, r1
 800aab0:	42ab      	cmp	r3, r5
 800aab2:	dcf2      	bgt.n	800aa9a <_printf_i+0x216>
 800aab4:	e7eb      	b.n	800aa8e <_printf_i+0x20a>
 800aab6:	2500      	movs	r5, #0
 800aab8:	f104 0619 	add.w	r6, r4, #25
 800aabc:	e7f5      	b.n	800aaaa <_printf_i+0x226>
 800aabe:	bf00      	nop
 800aac0:	0800d3de 	.word	0x0800d3de
 800aac4:	0800d3ef 	.word	0x0800d3ef

0800aac8 <std>:
 800aac8:	2300      	movs	r3, #0
 800aaca:	b510      	push	{r4, lr}
 800aacc:	4604      	mov	r4, r0
 800aace:	e9c0 3300 	strd	r3, r3, [r0]
 800aad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aad6:	6083      	str	r3, [r0, #8]
 800aad8:	8181      	strh	r1, [r0, #12]
 800aada:	6643      	str	r3, [r0, #100]	; 0x64
 800aadc:	81c2      	strh	r2, [r0, #14]
 800aade:	6183      	str	r3, [r0, #24]
 800aae0:	4619      	mov	r1, r3
 800aae2:	2208      	movs	r2, #8
 800aae4:	305c      	adds	r0, #92	; 0x5c
 800aae6:	f000 fa19 	bl	800af1c <memset>
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <std+0x38>)
 800aaec:	6263      	str	r3, [r4, #36]	; 0x24
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <std+0x3c>)
 800aaf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaf2:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <std+0x40>)
 800aaf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaf6:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <std+0x44>)
 800aaf8:	6224      	str	r4, [r4, #32]
 800aafa:	6323      	str	r3, [r4, #48]	; 0x30
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	bf00      	nop
 800ab00:	0800ad6d 	.word	0x0800ad6d
 800ab04:	0800ad8f 	.word	0x0800ad8f
 800ab08:	0800adc7 	.word	0x0800adc7
 800ab0c:	0800adeb 	.word	0x0800adeb

0800ab10 <stdio_exit_handler>:
 800ab10:	4a02      	ldr	r2, [pc, #8]	; (800ab1c <stdio_exit_handler+0xc>)
 800ab12:	4903      	ldr	r1, [pc, #12]	; (800ab20 <stdio_exit_handler+0x10>)
 800ab14:	4803      	ldr	r0, [pc, #12]	; (800ab24 <stdio_exit_handler+0x14>)
 800ab16:	f000 b869 	b.w	800abec <_fwalk_sglue>
 800ab1a:	bf00      	nop
 800ab1c:	2000009c 	.word	0x2000009c
 800ab20:	0800cd51 	.word	0x0800cd51
 800ab24:	200000a8 	.word	0x200000a8

0800ab28 <cleanup_stdio>:
 800ab28:	6841      	ldr	r1, [r0, #4]
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <cleanup_stdio+0x34>)
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	d001      	beq.n	800ab38 <cleanup_stdio+0x10>
 800ab34:	f002 f90c 	bl	800cd50 <_fflush_r>
 800ab38:	68a1      	ldr	r1, [r4, #8]
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <cleanup_stdio+0x38>)
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	d002      	beq.n	800ab46 <cleanup_stdio+0x1e>
 800ab40:	4620      	mov	r0, r4
 800ab42:	f002 f905 	bl	800cd50 <_fflush_r>
 800ab46:	68e1      	ldr	r1, [r4, #12]
 800ab48:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <cleanup_stdio+0x3c>)
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	d004      	beq.n	800ab58 <cleanup_stdio+0x30>
 800ab4e:	4620      	mov	r0, r4
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f002 b8fc 	b.w	800cd50 <_fflush_r>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	2000e5e4 	.word	0x2000e5e4
 800ab60:	2000e64c 	.word	0x2000e64c
 800ab64:	2000e6b4 	.word	0x2000e6b4

0800ab68 <global_stdio_init.part.0>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <global_stdio_init.part.0+0x30>)
 800ab6c:	4c0b      	ldr	r4, [pc, #44]	; (800ab9c <global_stdio_init.part.0+0x34>)
 800ab6e:	4a0c      	ldr	r2, [pc, #48]	; (800aba0 <global_stdio_init.part.0+0x38>)
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	4620      	mov	r0, r4
 800ab74:	2200      	movs	r2, #0
 800ab76:	2104      	movs	r1, #4
 800ab78:	f7ff ffa6 	bl	800aac8 <std>
 800ab7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab80:	2201      	movs	r2, #1
 800ab82:	2109      	movs	r1, #9
 800ab84:	f7ff ffa0 	bl	800aac8 <std>
 800ab88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab92:	2112      	movs	r1, #18
 800ab94:	f7ff bf98 	b.w	800aac8 <std>
 800ab98:	2000e71c 	.word	0x2000e71c
 800ab9c:	2000e5e4 	.word	0x2000e5e4
 800aba0:	0800ab11 	.word	0x0800ab11

0800aba4 <__sfp_lock_acquire>:
 800aba4:	4801      	ldr	r0, [pc, #4]	; (800abac <__sfp_lock_acquire+0x8>)
 800aba6:	f000 baa1 	b.w	800b0ec <__retarget_lock_acquire_recursive>
 800abaa:	bf00      	nop
 800abac:	2000e725 	.word	0x2000e725

0800abb0 <__sfp_lock_release>:
 800abb0:	4801      	ldr	r0, [pc, #4]	; (800abb8 <__sfp_lock_release+0x8>)
 800abb2:	f000 ba9c 	b.w	800b0ee <__retarget_lock_release_recursive>
 800abb6:	bf00      	nop
 800abb8:	2000e725 	.word	0x2000e725

0800abbc <__sinit>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4604      	mov	r4, r0
 800abc0:	f7ff fff0 	bl	800aba4 <__sfp_lock_acquire>
 800abc4:	6a23      	ldr	r3, [r4, #32]
 800abc6:	b11b      	cbz	r3, 800abd0 <__sinit+0x14>
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abcc:	f7ff bff0 	b.w	800abb0 <__sfp_lock_release>
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <__sinit+0x28>)
 800abd2:	6223      	str	r3, [r4, #32]
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <__sinit+0x2c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f5      	bne.n	800abc8 <__sinit+0xc>
 800abdc:	f7ff ffc4 	bl	800ab68 <global_stdio_init.part.0>
 800abe0:	e7f2      	b.n	800abc8 <__sinit+0xc>
 800abe2:	bf00      	nop
 800abe4:	0800ab29 	.word	0x0800ab29
 800abe8:	2000e71c 	.word	0x2000e71c

0800abec <_fwalk_sglue>:
 800abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf0:	4607      	mov	r7, r0
 800abf2:	4688      	mov	r8, r1
 800abf4:	4614      	mov	r4, r2
 800abf6:	2600      	movs	r6, #0
 800abf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ac00:	d505      	bpl.n	800ac0e <_fwalk_sglue+0x22>
 800ac02:	6824      	ldr	r4, [r4, #0]
 800ac04:	2c00      	cmp	r4, #0
 800ac06:	d1f7      	bne.n	800abf8 <_fwalk_sglue+0xc>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d907      	bls.n	800ac24 <_fwalk_sglue+0x38>
 800ac14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	d003      	beq.n	800ac24 <_fwalk_sglue+0x38>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4638      	mov	r0, r7
 800ac20:	47c0      	blx	r8
 800ac22:	4306      	orrs	r6, r0
 800ac24:	3568      	adds	r5, #104	; 0x68
 800ac26:	e7e9      	b.n	800abfc <_fwalk_sglue+0x10>

0800ac28 <iprintf>:
 800ac28:	b40f      	push	{r0, r1, r2, r3}
 800ac2a:	b507      	push	{r0, r1, r2, lr}
 800ac2c:	4906      	ldr	r1, [pc, #24]	; (800ac48 <iprintf+0x20>)
 800ac2e:	ab04      	add	r3, sp, #16
 800ac30:	6808      	ldr	r0, [r1, #0]
 800ac32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac36:	6881      	ldr	r1, [r0, #8]
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	f001 fee9 	bl	800ca10 <_vfiprintf_r>
 800ac3e:	b003      	add	sp, #12
 800ac40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac44:	b004      	add	sp, #16
 800ac46:	4770      	bx	lr
 800ac48:	200000f4 	.word	0x200000f4

0800ac4c <_puts_r>:
 800ac4c:	6a03      	ldr	r3, [r0, #32]
 800ac4e:	b570      	push	{r4, r5, r6, lr}
 800ac50:	6884      	ldr	r4, [r0, #8]
 800ac52:	4605      	mov	r5, r0
 800ac54:	460e      	mov	r6, r1
 800ac56:	b90b      	cbnz	r3, 800ac5c <_puts_r+0x10>
 800ac58:	f7ff ffb0 	bl	800abbc <__sinit>
 800ac5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5e:	07db      	lsls	r3, r3, #31
 800ac60:	d405      	bmi.n	800ac6e <_puts_r+0x22>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	0598      	lsls	r0, r3, #22
 800ac66:	d402      	bmi.n	800ac6e <_puts_r+0x22>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f000 fa3f 	bl	800b0ec <__retarget_lock_acquire_recursive>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	0719      	lsls	r1, r3, #28
 800ac72:	d513      	bpl.n	800ac9c <_puts_r+0x50>
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b18b      	cbz	r3, 800ac9c <_puts_r+0x50>
 800ac78:	3e01      	subs	r6, #1
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac80:	3b01      	subs	r3, #1
 800ac82:	60a3      	str	r3, [r4, #8]
 800ac84:	b9e9      	cbnz	r1, 800acc2 <_puts_r+0x76>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	da2e      	bge.n	800ace8 <_puts_r+0x9c>
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	210a      	movs	r1, #10
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f8af 	bl	800adf2 <__swbuf_r>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d007      	beq.n	800aca8 <_puts_r+0x5c>
 800ac98:	250a      	movs	r5, #10
 800ac9a:	e007      	b.n	800acac <_puts_r+0x60>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f8e4 	bl	800ae6c <__swsetup_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d0e7      	beq.n	800ac78 <_puts_r+0x2c>
 800aca8:	f04f 35ff 	mov.w	r5, #4294967295
 800acac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acae:	07da      	lsls	r2, r3, #31
 800acb0:	d405      	bmi.n	800acbe <_puts_r+0x72>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	059b      	lsls	r3, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_puts_r+0x72>
 800acb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acba:	f000 fa18 	bl	800b0ee <__retarget_lock_release_recursive>
 800acbe:	4628      	mov	r0, r5
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da04      	bge.n	800acd0 <_puts_r+0x84>
 800acc6:	69a2      	ldr	r2, [r4, #24]
 800acc8:	429a      	cmp	r2, r3
 800acca:	dc06      	bgt.n	800acda <_puts_r+0x8e>
 800accc:	290a      	cmp	r1, #10
 800acce:	d004      	beq.n	800acda <_puts_r+0x8e>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	1c5a      	adds	r2, r3, #1
 800acd4:	6022      	str	r2, [r4, #0]
 800acd6:	7019      	strb	r1, [r3, #0]
 800acd8:	e7cf      	b.n	800ac7a <_puts_r+0x2e>
 800acda:	4622      	mov	r2, r4
 800acdc:	4628      	mov	r0, r5
 800acde:	f000 f888 	bl	800adf2 <__swbuf_r>
 800ace2:	3001      	adds	r0, #1
 800ace4:	d1c9      	bne.n	800ac7a <_puts_r+0x2e>
 800ace6:	e7df      	b.n	800aca8 <_puts_r+0x5c>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	250a      	movs	r5, #10
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	6022      	str	r2, [r4, #0]
 800acf0:	701d      	strb	r5, [r3, #0]
 800acf2:	e7db      	b.n	800acac <_puts_r+0x60>

0800acf4 <puts>:
 800acf4:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <puts+0xc>)
 800acf6:	4601      	mov	r1, r0
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	f7ff bfa7 	b.w	800ac4c <_puts_r>
 800acfe:	bf00      	nop
 800ad00:	200000f4 	.word	0x200000f4

0800ad04 <sniprintf>:
 800ad04:	b40c      	push	{r2, r3}
 800ad06:	b530      	push	{r4, r5, lr}
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <sniprintf+0x64>)
 800ad0a:	1e0c      	subs	r4, r1, #0
 800ad0c:	681d      	ldr	r5, [r3, #0]
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	da08      	bge.n	800ad24 <sniprintf+0x20>
 800ad12:	238b      	movs	r3, #139	; 0x8b
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1a:	b01d      	add	sp, #116	; 0x74
 800ad1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad20:	b002      	add	sp, #8
 800ad22:	4770      	bx	lr
 800ad24:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad2c:	bf14      	ite	ne
 800ad2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad32:	4623      	moveq	r3, r4
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	9307      	str	r3, [sp, #28]
 800ad38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad3c:	9002      	str	r0, [sp, #8]
 800ad3e:	9006      	str	r0, [sp, #24]
 800ad40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad46:	ab21      	add	r3, sp, #132	; 0x84
 800ad48:	a902      	add	r1, sp, #8
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	f001 fd37 	bl	800c7c0 <_svfiprintf_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	bfbc      	itt	lt
 800ad56:	238b      	movlt	r3, #139	; 0x8b
 800ad58:	602b      	strlt	r3, [r5, #0]
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	d0dd      	beq.n	800ad1a <sniprintf+0x16>
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	e7d9      	b.n	800ad1a <sniprintf+0x16>
 800ad66:	bf00      	nop
 800ad68:	200000f4 	.word	0x200000f4

0800ad6c <__sread>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	460c      	mov	r4, r1
 800ad70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad74:	f000 f96c 	bl	800b050 <_read_r>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	bfab      	itete	ge
 800ad7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad80:	181b      	addge	r3, r3, r0
 800ad82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad86:	bfac      	ite	ge
 800ad88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad8a:	81a3      	strhlt	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__swrite>:
 800ad8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	461f      	mov	r7, r3
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	05db      	lsls	r3, r3, #23
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	d505      	bpl.n	800adac <__swrite+0x1e>
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	2302      	movs	r3, #2
 800ada6:	2200      	movs	r2, #0
 800ada8:	f000 f940 	bl	800b02c <_lseek_r>
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	4632      	mov	r2, r6
 800adba:	463b      	mov	r3, r7
 800adbc:	4628      	mov	r0, r5
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	f000 b957 	b.w	800b074 <_write_r>

0800adc6 <__sseek>:
 800adc6:	b510      	push	{r4, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adce:	f000 f92d 	bl	800b02c <_lseek_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	bf15      	itete	ne
 800add8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ade2:	81a3      	strheq	r3, [r4, #12]
 800ade4:	bf18      	it	ne
 800ade6:	81a3      	strhne	r3, [r4, #12]
 800ade8:	bd10      	pop	{r4, pc}

0800adea <__sclose>:
 800adea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adee:	f000 b8b7 	b.w	800af60 <_close_r>

0800adf2 <__swbuf_r>:
 800adf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf4:	460e      	mov	r6, r1
 800adf6:	4614      	mov	r4, r2
 800adf8:	4605      	mov	r5, r0
 800adfa:	b118      	cbz	r0, 800ae04 <__swbuf_r+0x12>
 800adfc:	6a03      	ldr	r3, [r0, #32]
 800adfe:	b90b      	cbnz	r3, 800ae04 <__swbuf_r+0x12>
 800ae00:	f7ff fedc 	bl	800abbc <__sinit>
 800ae04:	69a3      	ldr	r3, [r4, #24]
 800ae06:	60a3      	str	r3, [r4, #8]
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	071a      	lsls	r2, r3, #28
 800ae0c:	d525      	bpl.n	800ae5a <__swbuf_r+0x68>
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	b31b      	cbz	r3, 800ae5a <__swbuf_r+0x68>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	6922      	ldr	r2, [r4, #16]
 800ae16:	1a98      	subs	r0, r3, r2
 800ae18:	6963      	ldr	r3, [r4, #20]
 800ae1a:	b2f6      	uxtb	r6, r6
 800ae1c:	4283      	cmp	r3, r0
 800ae1e:	4637      	mov	r7, r6
 800ae20:	dc04      	bgt.n	800ae2c <__swbuf_r+0x3a>
 800ae22:	4621      	mov	r1, r4
 800ae24:	4628      	mov	r0, r5
 800ae26:	f001 ff93 	bl	800cd50 <_fflush_r>
 800ae2a:	b9e0      	cbnz	r0, 800ae66 <__swbuf_r+0x74>
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	60a3      	str	r3, [r4, #8]
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	6022      	str	r2, [r4, #0]
 800ae38:	701e      	strb	r6, [r3, #0]
 800ae3a:	6962      	ldr	r2, [r4, #20]
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d004      	beq.n	800ae4c <__swbuf_r+0x5a>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	07db      	lsls	r3, r3, #31
 800ae46:	d506      	bpl.n	800ae56 <__swbuf_r+0x64>
 800ae48:	2e0a      	cmp	r6, #10
 800ae4a:	d104      	bne.n	800ae56 <__swbuf_r+0x64>
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f001 ff7e 	bl	800cd50 <_fflush_r>
 800ae54:	b938      	cbnz	r0, 800ae66 <__swbuf_r+0x74>
 800ae56:	4638      	mov	r0, r7
 800ae58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	f000 f805 	bl	800ae6c <__swsetup_r>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0d5      	beq.n	800ae12 <__swbuf_r+0x20>
 800ae66:	f04f 37ff 	mov.w	r7, #4294967295
 800ae6a:	e7f4      	b.n	800ae56 <__swbuf_r+0x64>

0800ae6c <__swsetup_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4b2a      	ldr	r3, [pc, #168]	; (800af18 <__swsetup_r+0xac>)
 800ae70:	4605      	mov	r5, r0
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	460c      	mov	r4, r1
 800ae76:	b118      	cbz	r0, 800ae80 <__swsetup_r+0x14>
 800ae78:	6a03      	ldr	r3, [r0, #32]
 800ae7a:	b90b      	cbnz	r3, 800ae80 <__swsetup_r+0x14>
 800ae7c:	f7ff fe9e 	bl	800abbc <__sinit>
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae86:	0718      	lsls	r0, r3, #28
 800ae88:	d422      	bmi.n	800aed0 <__swsetup_r+0x64>
 800ae8a:	06d9      	lsls	r1, r3, #27
 800ae8c:	d407      	bmi.n	800ae9e <__swsetup_r+0x32>
 800ae8e:	2309      	movs	r3, #9
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	e034      	b.n	800af08 <__swsetup_r+0x9c>
 800ae9e:	0758      	lsls	r0, r3, #29
 800aea0:	d512      	bpl.n	800aec8 <__swsetup_r+0x5c>
 800aea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aea4:	b141      	cbz	r1, 800aeb8 <__swsetup_r+0x4c>
 800aea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	d002      	beq.n	800aeb4 <__swsetup_r+0x48>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 ffb0 	bl	800be14 <_free_r>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6363      	str	r3, [r4, #52]	; 0x34
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	2300      	movs	r3, #0
 800aec2:	6063      	str	r3, [r4, #4]
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	6023      	str	r3, [r4, #0]
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f043 0308 	orr.w	r3, r3, #8
 800aece:	81a3      	strh	r3, [r4, #12]
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	b94b      	cbnz	r3, 800aee8 <__swsetup_r+0x7c>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aeda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aede:	d003      	beq.n	800aee8 <__swsetup_r+0x7c>
 800aee0:	4621      	mov	r1, r4
 800aee2:	4628      	mov	r0, r5
 800aee4:	f001 ff82 	bl	800cdec <__smakebuf_r>
 800aee8:	89a0      	ldrh	r0, [r4, #12]
 800aeea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeee:	f010 0301 	ands.w	r3, r0, #1
 800aef2:	d00a      	beq.n	800af0a <__swsetup_r+0x9e>
 800aef4:	2300      	movs	r3, #0
 800aef6:	60a3      	str	r3, [r4, #8]
 800aef8:	6963      	ldr	r3, [r4, #20]
 800aefa:	425b      	negs	r3, r3
 800aefc:	61a3      	str	r3, [r4, #24]
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	b943      	cbnz	r3, 800af14 <__swsetup_r+0xa8>
 800af02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af06:	d1c4      	bne.n	800ae92 <__swsetup_r+0x26>
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	0781      	lsls	r1, r0, #30
 800af0c:	bf58      	it	pl
 800af0e:	6963      	ldrpl	r3, [r4, #20]
 800af10:	60a3      	str	r3, [r4, #8]
 800af12:	e7f4      	b.n	800aefe <__swsetup_r+0x92>
 800af14:	2000      	movs	r0, #0
 800af16:	e7f7      	b.n	800af08 <__swsetup_r+0x9c>
 800af18:	200000f4 	.word	0x200000f4

0800af1c <memset>:
 800af1c:	4402      	add	r2, r0
 800af1e:	4603      	mov	r3, r0
 800af20:	4293      	cmp	r3, r2
 800af22:	d100      	bne.n	800af26 <memset+0xa>
 800af24:	4770      	bx	lr
 800af26:	f803 1b01 	strb.w	r1, [r3], #1
 800af2a:	e7f9      	b.n	800af20 <memset+0x4>

0800af2c <strstr>:
 800af2c:	780a      	ldrb	r2, [r1, #0]
 800af2e:	b570      	push	{r4, r5, r6, lr}
 800af30:	b96a      	cbnz	r2, 800af4e <strstr+0x22>
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	429a      	cmp	r2, r3
 800af36:	d109      	bne.n	800af4c <strstr+0x20>
 800af38:	460c      	mov	r4, r1
 800af3a:	4605      	mov	r5, r0
 800af3c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0f6      	beq.n	800af32 <strstr+0x6>
 800af44:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800af48:	429e      	cmp	r6, r3
 800af4a:	d0f7      	beq.n	800af3c <strstr+0x10>
 800af4c:	3001      	adds	r0, #1
 800af4e:	7803      	ldrb	r3, [r0, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1ef      	bne.n	800af34 <strstr+0x8>
 800af54:	4618      	mov	r0, r3
 800af56:	e7ec      	b.n	800af32 <strstr+0x6>

0800af58 <_localeconv_r>:
 800af58:	4800      	ldr	r0, [pc, #0]	; (800af5c <_localeconv_r+0x4>)
 800af5a:	4770      	bx	lr
 800af5c:	200001e8 	.word	0x200001e8

0800af60 <_close_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d06      	ldr	r5, [pc, #24]	; (800af7c <_close_r+0x1c>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	602b      	str	r3, [r5, #0]
 800af6c:	f7f6 fc49 	bl	8001802 <_close>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_close_r+0x1a>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_close_r+0x1a>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	2000e720 	.word	0x2000e720

0800af80 <_reclaim_reent>:
 800af80:	4b29      	ldr	r3, [pc, #164]	; (800b028 <_reclaim_reent+0xa8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4283      	cmp	r3, r0
 800af86:	b570      	push	{r4, r5, r6, lr}
 800af88:	4604      	mov	r4, r0
 800af8a:	d04b      	beq.n	800b024 <_reclaim_reent+0xa4>
 800af8c:	69c3      	ldr	r3, [r0, #28]
 800af8e:	b143      	cbz	r3, 800afa2 <_reclaim_reent+0x22>
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d144      	bne.n	800b020 <_reclaim_reent+0xa0>
 800af96:	69e3      	ldr	r3, [r4, #28]
 800af98:	6819      	ldr	r1, [r3, #0]
 800af9a:	b111      	cbz	r1, 800afa2 <_reclaim_reent+0x22>
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 ff39 	bl	800be14 <_free_r>
 800afa2:	6961      	ldr	r1, [r4, #20]
 800afa4:	b111      	cbz	r1, 800afac <_reclaim_reent+0x2c>
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 ff34 	bl	800be14 <_free_r>
 800afac:	69e1      	ldr	r1, [r4, #28]
 800afae:	b111      	cbz	r1, 800afb6 <_reclaim_reent+0x36>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 ff2f 	bl	800be14 <_free_r>
 800afb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afb8:	b111      	cbz	r1, 800afc0 <_reclaim_reent+0x40>
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 ff2a 	bl	800be14 <_free_r>
 800afc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afc2:	b111      	cbz	r1, 800afca <_reclaim_reent+0x4a>
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 ff25 	bl	800be14 <_free_r>
 800afca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800afcc:	b111      	cbz	r1, 800afd4 <_reclaim_reent+0x54>
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 ff20 	bl	800be14 <_free_r>
 800afd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800afd6:	b111      	cbz	r1, 800afde <_reclaim_reent+0x5e>
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 ff1b 	bl	800be14 <_free_r>
 800afde:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800afe0:	b111      	cbz	r1, 800afe8 <_reclaim_reent+0x68>
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 ff16 	bl	800be14 <_free_r>
 800afe8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800afea:	b111      	cbz	r1, 800aff2 <_reclaim_reent+0x72>
 800afec:	4620      	mov	r0, r4
 800afee:	f000 ff11 	bl	800be14 <_free_r>
 800aff2:	6a23      	ldr	r3, [r4, #32]
 800aff4:	b1b3      	cbz	r3, 800b024 <_reclaim_reent+0xa4>
 800aff6:	4620      	mov	r0, r4
 800aff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800affc:	4718      	bx	r3
 800affe:	5949      	ldr	r1, [r1, r5]
 800b000:	b941      	cbnz	r1, 800b014 <_reclaim_reent+0x94>
 800b002:	3504      	adds	r5, #4
 800b004:	69e3      	ldr	r3, [r4, #28]
 800b006:	2d80      	cmp	r5, #128	; 0x80
 800b008:	68d9      	ldr	r1, [r3, #12]
 800b00a:	d1f8      	bne.n	800affe <_reclaim_reent+0x7e>
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 ff01 	bl	800be14 <_free_r>
 800b012:	e7c0      	b.n	800af96 <_reclaim_reent+0x16>
 800b014:	680e      	ldr	r6, [r1, #0]
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fefc 	bl	800be14 <_free_r>
 800b01c:	4631      	mov	r1, r6
 800b01e:	e7ef      	b.n	800b000 <_reclaim_reent+0x80>
 800b020:	2500      	movs	r5, #0
 800b022:	e7ef      	b.n	800b004 <_reclaim_reent+0x84>
 800b024:	bd70      	pop	{r4, r5, r6, pc}
 800b026:	bf00      	nop
 800b028:	200000f4 	.word	0x200000f4

0800b02c <_lseek_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d07      	ldr	r5, [pc, #28]	; (800b04c <_lseek_r+0x20>)
 800b030:	4604      	mov	r4, r0
 800b032:	4608      	mov	r0, r1
 800b034:	4611      	mov	r1, r2
 800b036:	2200      	movs	r2, #0
 800b038:	602a      	str	r2, [r5, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	f7f6 fc08 	bl	8001850 <_lseek>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_lseek_r+0x1e>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_lseek_r+0x1e>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	2000e720 	.word	0x2000e720

0800b050 <_read_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	; (800b070 <_read_r+0x20>)
 800b054:	4604      	mov	r4, r0
 800b056:	4608      	mov	r0, r1
 800b058:	4611      	mov	r1, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	f7f6 fbb2 	bl	80017c8 <_read>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_read_r+0x1e>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_read_r+0x1e>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	2000e720 	.word	0x2000e720

0800b074 <_write_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	; (800b094 <_write_r+0x20>)
 800b078:	4604      	mov	r4, r0
 800b07a:	4608      	mov	r0, r1
 800b07c:	4611      	mov	r1, r2
 800b07e:	2200      	movs	r2, #0
 800b080:	602a      	str	r2, [r5, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	f7f7 f814 	bl	80020b0 <_write>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_write_r+0x1e>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_write_r+0x1e>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	2000e720 	.word	0x2000e720

0800b098 <__errno>:
 800b098:	4b01      	ldr	r3, [pc, #4]	; (800b0a0 <__errno+0x8>)
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	200000f4 	.word	0x200000f4

0800b0a4 <__libc_init_array>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4d0d      	ldr	r5, [pc, #52]	; (800b0dc <__libc_init_array+0x38>)
 800b0a8:	4c0d      	ldr	r4, [pc, #52]	; (800b0e0 <__libc_init_array+0x3c>)
 800b0aa:	1b64      	subs	r4, r4, r5
 800b0ac:	10a4      	asrs	r4, r4, #2
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	42a6      	cmp	r6, r4
 800b0b2:	d109      	bne.n	800b0c8 <__libc_init_array+0x24>
 800b0b4:	4d0b      	ldr	r5, [pc, #44]	; (800b0e4 <__libc_init_array+0x40>)
 800b0b6:	4c0c      	ldr	r4, [pc, #48]	; (800b0e8 <__libc_init_array+0x44>)
 800b0b8:	f002 f808 	bl	800d0cc <_init>
 800b0bc:	1b64      	subs	r4, r4, r5
 800b0be:	10a4      	asrs	r4, r4, #2
 800b0c0:	2600      	movs	r6, #0
 800b0c2:	42a6      	cmp	r6, r4
 800b0c4:	d105      	bne.n	800b0d2 <__libc_init_array+0x2e>
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
 800b0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0cc:	4798      	blx	r3
 800b0ce:	3601      	adds	r6, #1
 800b0d0:	e7ee      	b.n	800b0b0 <__libc_init_array+0xc>
 800b0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d6:	4798      	blx	r3
 800b0d8:	3601      	adds	r6, #1
 800b0da:	e7f2      	b.n	800b0c2 <__libc_init_array+0x1e>
 800b0dc:	0800d744 	.word	0x0800d744
 800b0e0:	0800d744 	.word	0x0800d744
 800b0e4:	0800d744 	.word	0x0800d744
 800b0e8:	0800d748 	.word	0x0800d748

0800b0ec <__retarget_lock_acquire_recursive>:
 800b0ec:	4770      	bx	lr

0800b0ee <__retarget_lock_release_recursive>:
 800b0ee:	4770      	bx	lr

0800b0f0 <strcpy>:
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0f6:	f803 2b01 	strb.w	r2, [r3], #1
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	d1f9      	bne.n	800b0f2 <strcpy+0x2>
 800b0fe:	4770      	bx	lr

0800b100 <memcpy>:
 800b100:	440a      	add	r2, r1
 800b102:	4291      	cmp	r1, r2
 800b104:	f100 33ff 	add.w	r3, r0, #4294967295
 800b108:	d100      	bne.n	800b10c <memcpy+0xc>
 800b10a:	4770      	bx	lr
 800b10c:	b510      	push	{r4, lr}
 800b10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b116:	4291      	cmp	r1, r2
 800b118:	d1f9      	bne.n	800b10e <memcpy+0xe>
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <quorem>:
 800b11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	6903      	ldr	r3, [r0, #16]
 800b122:	690c      	ldr	r4, [r1, #16]
 800b124:	42a3      	cmp	r3, r4
 800b126:	4607      	mov	r7, r0
 800b128:	db7e      	blt.n	800b228 <quorem+0x10c>
 800b12a:	3c01      	subs	r4, #1
 800b12c:	f101 0814 	add.w	r8, r1, #20
 800b130:	f100 0514 	add.w	r5, r0, #20
 800b134:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b13e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b142:	3301      	adds	r3, #1
 800b144:	429a      	cmp	r2, r3
 800b146:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b14a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b14e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b152:	d331      	bcc.n	800b1b8 <quorem+0x9c>
 800b154:	f04f 0e00 	mov.w	lr, #0
 800b158:	4640      	mov	r0, r8
 800b15a:	46ac      	mov	ip, r5
 800b15c:	46f2      	mov	sl, lr
 800b15e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b162:	b293      	uxth	r3, r2
 800b164:	fb06 e303 	mla	r3, r6, r3, lr
 800b168:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b16c:	0c1a      	lsrs	r2, r3, #16
 800b16e:	b29b      	uxth	r3, r3
 800b170:	ebaa 0303 	sub.w	r3, sl, r3
 800b174:	f8dc a000 	ldr.w	sl, [ip]
 800b178:	fa13 f38a 	uxtah	r3, r3, sl
 800b17c:	fb06 220e 	mla	r2, r6, lr, r2
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	9b00      	ldr	r3, [sp, #0]
 800b184:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b188:	b292      	uxth	r2, r2
 800b18a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b18e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b192:	f8bd 3000 	ldrh.w	r3, [sp]
 800b196:	4581      	cmp	r9, r0
 800b198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b19c:	f84c 3b04 	str.w	r3, [ip], #4
 800b1a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1a4:	d2db      	bcs.n	800b15e <quorem+0x42>
 800b1a6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1aa:	b92b      	cbnz	r3, 800b1b8 <quorem+0x9c>
 800b1ac:	9b01      	ldr	r3, [sp, #4]
 800b1ae:	3b04      	subs	r3, #4
 800b1b0:	429d      	cmp	r5, r3
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	d32c      	bcc.n	800b210 <quorem+0xf4>
 800b1b6:	613c      	str	r4, [r7, #16]
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f001 f9a7 	bl	800c50c <__mcmp>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	db22      	blt.n	800b208 <quorem+0xec>
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1cc:	f8d1 c000 	ldr.w	ip, [r1]
 800b1d0:	b293      	uxth	r3, r2
 800b1d2:	1ac3      	subs	r3, r0, r3
 800b1d4:	0c12      	lsrs	r2, r2, #16
 800b1d6:	fa13 f38c 	uxtah	r3, r3, ip
 800b1da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b1de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1e8:	45c1      	cmp	r9, r8
 800b1ea:	f841 3b04 	str.w	r3, [r1], #4
 800b1ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1f2:	d2e9      	bcs.n	800b1c8 <quorem+0xac>
 800b1f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fc:	b922      	cbnz	r2, 800b208 <quorem+0xec>
 800b1fe:	3b04      	subs	r3, #4
 800b200:	429d      	cmp	r5, r3
 800b202:	461a      	mov	r2, r3
 800b204:	d30a      	bcc.n	800b21c <quorem+0x100>
 800b206:	613c      	str	r4, [r7, #16]
 800b208:	4630      	mov	r0, r6
 800b20a:	b003      	add	sp, #12
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	6812      	ldr	r2, [r2, #0]
 800b212:	3b04      	subs	r3, #4
 800b214:	2a00      	cmp	r2, #0
 800b216:	d1ce      	bne.n	800b1b6 <quorem+0x9a>
 800b218:	3c01      	subs	r4, #1
 800b21a:	e7c9      	b.n	800b1b0 <quorem+0x94>
 800b21c:	6812      	ldr	r2, [r2, #0]
 800b21e:	3b04      	subs	r3, #4
 800b220:	2a00      	cmp	r2, #0
 800b222:	d1f0      	bne.n	800b206 <quorem+0xea>
 800b224:	3c01      	subs	r4, #1
 800b226:	e7eb      	b.n	800b200 <quorem+0xe4>
 800b228:	2000      	movs	r0, #0
 800b22a:	e7ee      	b.n	800b20a <quorem+0xee>
 800b22c:	0000      	movs	r0, r0
	...

0800b230 <_dtoa_r>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	ed2d 8b04 	vpush	{d8-d9}
 800b238:	69c5      	ldr	r5, [r0, #28]
 800b23a:	b093      	sub	sp, #76	; 0x4c
 800b23c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b240:	ec57 6b10 	vmov	r6, r7, d0
 800b244:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b248:	9107      	str	r1, [sp, #28]
 800b24a:	4604      	mov	r4, r0
 800b24c:	920a      	str	r2, [sp, #40]	; 0x28
 800b24e:	930d      	str	r3, [sp, #52]	; 0x34
 800b250:	b975      	cbnz	r5, 800b270 <_dtoa_r+0x40>
 800b252:	2010      	movs	r0, #16
 800b254:	f000 fe2a 	bl	800beac <malloc>
 800b258:	4602      	mov	r2, r0
 800b25a:	61e0      	str	r0, [r4, #28]
 800b25c:	b920      	cbnz	r0, 800b268 <_dtoa_r+0x38>
 800b25e:	4bae      	ldr	r3, [pc, #696]	; (800b518 <_dtoa_r+0x2e8>)
 800b260:	21ef      	movs	r1, #239	; 0xef
 800b262:	48ae      	ldr	r0, [pc, #696]	; (800b51c <_dtoa_r+0x2ec>)
 800b264:	f001 fe4a 	bl	800cefc <__assert_func>
 800b268:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b26c:	6005      	str	r5, [r0, #0]
 800b26e:	60c5      	str	r5, [r0, #12]
 800b270:	69e3      	ldr	r3, [r4, #28]
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	b151      	cbz	r1, 800b28c <_dtoa_r+0x5c>
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	604a      	str	r2, [r1, #4]
 800b27a:	2301      	movs	r3, #1
 800b27c:	4093      	lsls	r3, r2
 800b27e:	608b      	str	r3, [r1, #8]
 800b280:	4620      	mov	r0, r4
 800b282:	f000 ff07 	bl	800c094 <_Bfree>
 800b286:	69e3      	ldr	r3, [r4, #28]
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	1e3b      	subs	r3, r7, #0
 800b28e:	bfbb      	ittet	lt
 800b290:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b294:	9303      	strlt	r3, [sp, #12]
 800b296:	2300      	movge	r3, #0
 800b298:	2201      	movlt	r2, #1
 800b29a:	bfac      	ite	ge
 800b29c:	f8c8 3000 	strge.w	r3, [r8]
 800b2a0:	f8c8 2000 	strlt.w	r2, [r8]
 800b2a4:	4b9e      	ldr	r3, [pc, #632]	; (800b520 <_dtoa_r+0x2f0>)
 800b2a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2aa:	ea33 0308 	bics.w	r3, r3, r8
 800b2ae:	d11b      	bne.n	800b2e8 <_dtoa_r+0xb8>
 800b2b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2b6:	6013      	str	r3, [r2, #0]
 800b2b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b2bc:	4333      	orrs	r3, r6
 800b2be:	f000 8593 	beq.w	800bde8 <_dtoa_r+0xbb8>
 800b2c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2c4:	b963      	cbnz	r3, 800b2e0 <_dtoa_r+0xb0>
 800b2c6:	4b97      	ldr	r3, [pc, #604]	; (800b524 <_dtoa_r+0x2f4>)
 800b2c8:	e027      	b.n	800b31a <_dtoa_r+0xea>
 800b2ca:	4b97      	ldr	r3, [pc, #604]	; (800b528 <_dtoa_r+0x2f8>)
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	9800      	ldr	r0, [sp, #0]
 800b2d6:	b013      	add	sp, #76	; 0x4c
 800b2d8:	ecbd 8b04 	vpop	{d8-d9}
 800b2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e0:	4b90      	ldr	r3, [pc, #576]	; (800b524 <_dtoa_r+0x2f4>)
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	3303      	adds	r3, #3
 800b2e6:	e7f3      	b.n	800b2d0 <_dtoa_r+0xa0>
 800b2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	ec51 0b17 	vmov	r0, r1, d7
 800b2f2:	eeb0 8a47 	vmov.f32	s16, s14
 800b2f6:	eef0 8a67 	vmov.f32	s17, s15
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f7f5 fbf4 	bl	8000ae8 <__aeabi_dcmpeq>
 800b300:	4681      	mov	r9, r0
 800b302:	b160      	cbz	r0, 800b31e <_dtoa_r+0xee>
 800b304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b306:	2301      	movs	r3, #1
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 8568 	beq.w	800bde2 <_dtoa_r+0xbb2>
 800b312:	4b86      	ldr	r3, [pc, #536]	; (800b52c <_dtoa_r+0x2fc>)
 800b314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	3b01      	subs	r3, #1
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	e7da      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b31e:	aa10      	add	r2, sp, #64	; 0x40
 800b320:	a911      	add	r1, sp, #68	; 0x44
 800b322:	4620      	mov	r0, r4
 800b324:	eeb0 0a48 	vmov.f32	s0, s16
 800b328:	eef0 0a68 	vmov.f32	s1, s17
 800b32c:	f001 f994 	bl	800c658 <__d2b>
 800b330:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b334:	4682      	mov	sl, r0
 800b336:	2d00      	cmp	r5, #0
 800b338:	d07f      	beq.n	800b43a <_dtoa_r+0x20a>
 800b33a:	ee18 3a90 	vmov	r3, s17
 800b33e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b342:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b346:	ec51 0b18 	vmov	r0, r1, d8
 800b34a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b34e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b352:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b356:	4619      	mov	r1, r3
 800b358:	2200      	movs	r2, #0
 800b35a:	4b75      	ldr	r3, [pc, #468]	; (800b530 <_dtoa_r+0x300>)
 800b35c:	f7f4 ffa4 	bl	80002a8 <__aeabi_dsub>
 800b360:	a367      	add	r3, pc, #412	; (adr r3, 800b500 <_dtoa_r+0x2d0>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 f957 	bl	8000618 <__aeabi_dmul>
 800b36a:	a367      	add	r3, pc, #412	; (adr r3, 800b508 <_dtoa_r+0x2d8>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f4 ff9c 	bl	80002ac <__adddf3>
 800b374:	4606      	mov	r6, r0
 800b376:	4628      	mov	r0, r5
 800b378:	460f      	mov	r7, r1
 800b37a:	f7f5 f8e3 	bl	8000544 <__aeabi_i2d>
 800b37e:	a364      	add	r3, pc, #400	; (adr r3, 800b510 <_dtoa_r+0x2e0>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f5 f948 	bl	8000618 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f4 ff8c 	bl	80002ac <__adddf3>
 800b394:	4606      	mov	r6, r0
 800b396:	460f      	mov	r7, r1
 800b398:	f7f5 fbee 	bl	8000b78 <__aeabi_d2iz>
 800b39c:	2200      	movs	r2, #0
 800b39e:	4683      	mov	fp, r0
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 fba9 	bl	8000afc <__aeabi_dcmplt>
 800b3aa:	b148      	cbz	r0, 800b3c0 <_dtoa_r+0x190>
 800b3ac:	4658      	mov	r0, fp
 800b3ae:	f7f5 f8c9 	bl	8000544 <__aeabi_i2d>
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	463b      	mov	r3, r7
 800b3b6:	f7f5 fb97 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3ba:	b908      	cbnz	r0, 800b3c0 <_dtoa_r+0x190>
 800b3bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3c0:	f1bb 0f16 	cmp.w	fp, #22
 800b3c4:	d857      	bhi.n	800b476 <_dtoa_r+0x246>
 800b3c6:	4b5b      	ldr	r3, [pc, #364]	; (800b534 <_dtoa_r+0x304>)
 800b3c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	ec51 0b18 	vmov	r0, r1, d8
 800b3d4:	f7f5 fb92 	bl	8000afc <__aeabi_dcmplt>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	d04e      	beq.n	800b47a <_dtoa_r+0x24a>
 800b3dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3e6:	1b5b      	subs	r3, r3, r5
 800b3e8:	1e5a      	subs	r2, r3, #1
 800b3ea:	bf45      	ittet	mi
 800b3ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800b3f0:	9305      	strmi	r3, [sp, #20]
 800b3f2:	2300      	movpl	r3, #0
 800b3f4:	2300      	movmi	r3, #0
 800b3f6:	9206      	str	r2, [sp, #24]
 800b3f8:	bf54      	ite	pl
 800b3fa:	9305      	strpl	r3, [sp, #20]
 800b3fc:	9306      	strmi	r3, [sp, #24]
 800b3fe:	f1bb 0f00 	cmp.w	fp, #0
 800b402:	db3c      	blt.n	800b47e <_dtoa_r+0x24e>
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b40a:	445b      	add	r3, fp
 800b40c:	9306      	str	r3, [sp, #24]
 800b40e:	2300      	movs	r3, #0
 800b410:	9308      	str	r3, [sp, #32]
 800b412:	9b07      	ldr	r3, [sp, #28]
 800b414:	2b09      	cmp	r3, #9
 800b416:	d868      	bhi.n	800b4ea <_dtoa_r+0x2ba>
 800b418:	2b05      	cmp	r3, #5
 800b41a:	bfc4      	itt	gt
 800b41c:	3b04      	subgt	r3, #4
 800b41e:	9307      	strgt	r3, [sp, #28]
 800b420:	9b07      	ldr	r3, [sp, #28]
 800b422:	f1a3 0302 	sub.w	r3, r3, #2
 800b426:	bfcc      	ite	gt
 800b428:	2500      	movgt	r5, #0
 800b42a:	2501      	movle	r5, #1
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	f200 8085 	bhi.w	800b53c <_dtoa_r+0x30c>
 800b432:	e8df f003 	tbb	[pc, r3]
 800b436:	3b2e      	.short	0x3b2e
 800b438:	5839      	.short	0x5839
 800b43a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b43e:	441d      	add	r5, r3
 800b440:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b444:	2b20      	cmp	r3, #32
 800b446:	bfc1      	itttt	gt
 800b448:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b44c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b450:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b454:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b458:	bfd6      	itet	le
 800b45a:	f1c3 0320 	rsble	r3, r3, #32
 800b45e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b462:	fa06 f003 	lslle.w	r0, r6, r3
 800b466:	f7f5 f85d 	bl	8000524 <__aeabi_ui2d>
 800b46a:	2201      	movs	r2, #1
 800b46c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b470:	3d01      	subs	r5, #1
 800b472:	920e      	str	r2, [sp, #56]	; 0x38
 800b474:	e76f      	b.n	800b356 <_dtoa_r+0x126>
 800b476:	2301      	movs	r3, #1
 800b478:	e7b3      	b.n	800b3e2 <_dtoa_r+0x1b2>
 800b47a:	900c      	str	r0, [sp, #48]	; 0x30
 800b47c:	e7b2      	b.n	800b3e4 <_dtoa_r+0x1b4>
 800b47e:	9b05      	ldr	r3, [sp, #20]
 800b480:	eba3 030b 	sub.w	r3, r3, fp
 800b484:	9305      	str	r3, [sp, #20]
 800b486:	f1cb 0300 	rsb	r3, fp, #0
 800b48a:	9308      	str	r3, [sp, #32]
 800b48c:	2300      	movs	r3, #0
 800b48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b490:	e7bf      	b.n	800b412 <_dtoa_r+0x1e2>
 800b492:	2300      	movs	r3, #0
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dc52      	bgt.n	800b542 <_dtoa_r+0x312>
 800b49c:	2301      	movs	r3, #1
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b4a6:	e00b      	b.n	800b4c0 <_dtoa_r+0x290>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e7f3      	b.n	800b494 <_dtoa_r+0x264>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	445b      	add	r3, fp
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	bfb8      	it	lt
 800b4be:	2301      	movlt	r3, #1
 800b4c0:	69e0      	ldr	r0, [r4, #28]
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	f102 0614 	add.w	r6, r2, #20
 800b4ca:	429e      	cmp	r6, r3
 800b4cc:	d93d      	bls.n	800b54a <_dtoa_r+0x31a>
 800b4ce:	6041      	str	r1, [r0, #4]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fd9f 	bl	800c014 <_Balloc>
 800b4d6:	9000      	str	r0, [sp, #0]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d139      	bne.n	800b550 <_dtoa_r+0x320>
 800b4dc:	4b16      	ldr	r3, [pc, #88]	; (800b538 <_dtoa_r+0x308>)
 800b4de:	4602      	mov	r2, r0
 800b4e0:	f240 11af 	movw	r1, #431	; 0x1af
 800b4e4:	e6bd      	b.n	800b262 <_dtoa_r+0x32>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e7e1      	b.n	800b4ae <_dtoa_r+0x27e>
 800b4ea:	2501      	movs	r5, #1
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	9509      	str	r5, [sp, #36]	; 0x24
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2312      	movs	r3, #18
 800b4fe:	e7d1      	b.n	800b4a4 <_dtoa_r+0x274>
 800b500:	636f4361 	.word	0x636f4361
 800b504:	3fd287a7 	.word	0x3fd287a7
 800b508:	8b60c8b3 	.word	0x8b60c8b3
 800b50c:	3fc68a28 	.word	0x3fc68a28
 800b510:	509f79fb 	.word	0x509f79fb
 800b514:	3fd34413 	.word	0x3fd34413
 800b518:	0800d40d 	.word	0x0800d40d
 800b51c:	0800d424 	.word	0x0800d424
 800b520:	7ff00000 	.word	0x7ff00000
 800b524:	0800d409 	.word	0x0800d409
 800b528:	0800d400 	.word	0x0800d400
 800b52c:	0800d3dd 	.word	0x0800d3dd
 800b530:	3ff80000 	.word	0x3ff80000
 800b534:	0800d510 	.word	0x0800d510
 800b538:	0800d47c 	.word	0x0800d47c
 800b53c:	2301      	movs	r3, #1
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	e7d7      	b.n	800b4f2 <_dtoa_r+0x2c2>
 800b542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	e7ba      	b.n	800b4c0 <_dtoa_r+0x290>
 800b54a:	3101      	adds	r1, #1
 800b54c:	0052      	lsls	r2, r2, #1
 800b54e:	e7ba      	b.n	800b4c6 <_dtoa_r+0x296>
 800b550:	69e3      	ldr	r3, [r4, #28]
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	2b0e      	cmp	r3, #14
 800b55a:	f200 80a8 	bhi.w	800b6ae <_dtoa_r+0x47e>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	f000 80a5 	beq.w	800b6ae <_dtoa_r+0x47e>
 800b564:	f1bb 0f00 	cmp.w	fp, #0
 800b568:	dd38      	ble.n	800b5dc <_dtoa_r+0x3ac>
 800b56a:	4bc0      	ldr	r3, [pc, #768]	; (800b86c <_dtoa_r+0x63c>)
 800b56c:	f00b 020f 	and.w	r2, fp, #15
 800b570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b574:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b578:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b57c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b580:	d019      	beq.n	800b5b6 <_dtoa_r+0x386>
 800b582:	4bbb      	ldr	r3, [pc, #748]	; (800b870 <_dtoa_r+0x640>)
 800b584:	ec51 0b18 	vmov	r0, r1, d8
 800b588:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b58c:	f7f5 f96e 	bl	800086c <__aeabi_ddiv>
 800b590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b594:	f008 080f 	and.w	r8, r8, #15
 800b598:	2503      	movs	r5, #3
 800b59a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b870 <_dtoa_r+0x640>
 800b59e:	f1b8 0f00 	cmp.w	r8, #0
 800b5a2:	d10a      	bne.n	800b5ba <_dtoa_r+0x38a>
 800b5a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	f7f5 f95e 	bl	800086c <__aeabi_ddiv>
 800b5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5b4:	e02b      	b.n	800b60e <_dtoa_r+0x3de>
 800b5b6:	2502      	movs	r5, #2
 800b5b8:	e7ef      	b.n	800b59a <_dtoa_r+0x36a>
 800b5ba:	f018 0f01 	tst.w	r8, #1
 800b5be:	d008      	beq.n	800b5d2 <_dtoa_r+0x3a2>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5c8:	f7f5 f826 	bl	8000618 <__aeabi_dmul>
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	460f      	mov	r7, r1
 800b5d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5d6:	f109 0908 	add.w	r9, r9, #8
 800b5da:	e7e0      	b.n	800b59e <_dtoa_r+0x36e>
 800b5dc:	f000 809f 	beq.w	800b71e <_dtoa_r+0x4ee>
 800b5e0:	f1cb 0600 	rsb	r6, fp, #0
 800b5e4:	4ba1      	ldr	r3, [pc, #644]	; (800b86c <_dtoa_r+0x63c>)
 800b5e6:	4fa2      	ldr	r7, [pc, #648]	; (800b870 <_dtoa_r+0x640>)
 800b5e8:	f006 020f 	and.w	r2, r6, #15
 800b5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	ec51 0b18 	vmov	r0, r1, d8
 800b5f8:	f7f5 f80e 	bl	8000618 <__aeabi_dmul>
 800b5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b600:	1136      	asrs	r6, r6, #4
 800b602:	2300      	movs	r3, #0
 800b604:	2502      	movs	r5, #2
 800b606:	2e00      	cmp	r6, #0
 800b608:	d17e      	bne.n	800b708 <_dtoa_r+0x4d8>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1d0      	bne.n	800b5b0 <_dtoa_r+0x380>
 800b60e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b610:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8084 	beq.w	800b722 <_dtoa_r+0x4f2>
 800b61a:	4b96      	ldr	r3, [pc, #600]	; (800b874 <_dtoa_r+0x644>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	4640      	mov	r0, r8
 800b620:	4649      	mov	r1, r9
 800b622:	f7f5 fa6b 	bl	8000afc <__aeabi_dcmplt>
 800b626:	2800      	cmp	r0, #0
 800b628:	d07b      	beq.n	800b722 <_dtoa_r+0x4f2>
 800b62a:	9b04      	ldr	r3, [sp, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d078      	beq.n	800b722 <_dtoa_r+0x4f2>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dd39      	ble.n	800b6aa <_dtoa_r+0x47a>
 800b636:	4b90      	ldr	r3, [pc, #576]	; (800b878 <_dtoa_r+0x648>)
 800b638:	2200      	movs	r2, #0
 800b63a:	4640      	mov	r0, r8
 800b63c:	4649      	mov	r1, r9
 800b63e:	f7f4 ffeb 	bl	8000618 <__aeabi_dmul>
 800b642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b646:	9e01      	ldr	r6, [sp, #4]
 800b648:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b64c:	3501      	adds	r5, #1
 800b64e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 ff76 	bl	8000544 <__aeabi_i2d>
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	f7f4 ffdc 	bl	8000618 <__aeabi_dmul>
 800b660:	4b86      	ldr	r3, [pc, #536]	; (800b87c <_dtoa_r+0x64c>)
 800b662:	2200      	movs	r2, #0
 800b664:	f7f4 fe22 	bl	80002ac <__adddf3>
 800b668:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	2e00      	cmp	r6, #0
 800b674:	d158      	bne.n	800b728 <_dtoa_r+0x4f8>
 800b676:	4b82      	ldr	r3, [pc, #520]	; (800b880 <_dtoa_r+0x650>)
 800b678:	2200      	movs	r2, #0
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f4 fe13 	bl	80002a8 <__aeabi_dsub>
 800b682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b686:	4680      	mov	r8, r0
 800b688:	4689      	mov	r9, r1
 800b68a:	f7f5 fa55 	bl	8000b38 <__aeabi_dcmpgt>
 800b68e:	2800      	cmp	r0, #0
 800b690:	f040 8296 	bne.w	800bbc0 <_dtoa_r+0x990>
 800b694:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b698:	4640      	mov	r0, r8
 800b69a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f5 fa2c 	bl	8000afc <__aeabi_dcmplt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f040 8289 	bne.w	800bbbc <_dtoa_r+0x98c>
 800b6aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b6ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f2c0 814e 	blt.w	800b952 <_dtoa_r+0x722>
 800b6b6:	f1bb 0f0e 	cmp.w	fp, #14
 800b6ba:	f300 814a 	bgt.w	800b952 <_dtoa_r+0x722>
 800b6be:	4b6b      	ldr	r3, [pc, #428]	; (800b86c <_dtoa_r+0x63c>)
 800b6c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f280 80dc 	bge.w	800b888 <_dtoa_r+0x658>
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f300 80d8 	bgt.w	800b888 <_dtoa_r+0x658>
 800b6d8:	f040 826f 	bne.w	800bbba <_dtoa_r+0x98a>
 800b6dc:	4b68      	ldr	r3, [pc, #416]	; (800b880 <_dtoa_r+0x650>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 ff98 	bl	8000618 <__aeabi_dmul>
 800b6e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6ec:	f7f5 fa1a 	bl	8000b24 <__aeabi_dcmpge>
 800b6f0:	9e04      	ldr	r6, [sp, #16]
 800b6f2:	4637      	mov	r7, r6
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f040 8245 	bne.w	800bb84 <_dtoa_r+0x954>
 800b6fa:	9d00      	ldr	r5, [sp, #0]
 800b6fc:	2331      	movs	r3, #49	; 0x31
 800b6fe:	f805 3b01 	strb.w	r3, [r5], #1
 800b702:	f10b 0b01 	add.w	fp, fp, #1
 800b706:	e241      	b.n	800bb8c <_dtoa_r+0x95c>
 800b708:	07f2      	lsls	r2, r6, #31
 800b70a:	d505      	bpl.n	800b718 <_dtoa_r+0x4e8>
 800b70c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b710:	f7f4 ff82 	bl	8000618 <__aeabi_dmul>
 800b714:	3501      	adds	r5, #1
 800b716:	2301      	movs	r3, #1
 800b718:	1076      	asrs	r6, r6, #1
 800b71a:	3708      	adds	r7, #8
 800b71c:	e773      	b.n	800b606 <_dtoa_r+0x3d6>
 800b71e:	2502      	movs	r5, #2
 800b720:	e775      	b.n	800b60e <_dtoa_r+0x3de>
 800b722:	9e04      	ldr	r6, [sp, #16]
 800b724:	465f      	mov	r7, fp
 800b726:	e792      	b.n	800b64e <_dtoa_r+0x41e>
 800b728:	9900      	ldr	r1, [sp, #0]
 800b72a:	4b50      	ldr	r3, [pc, #320]	; (800b86c <_dtoa_r+0x63c>)
 800b72c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b730:	4431      	add	r1, r6
 800b732:	9102      	str	r1, [sp, #8]
 800b734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b736:	eeb0 9a47 	vmov.f32	s18, s14
 800b73a:	eef0 9a67 	vmov.f32	s19, s15
 800b73e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b746:	2900      	cmp	r1, #0
 800b748:	d044      	beq.n	800b7d4 <_dtoa_r+0x5a4>
 800b74a:	494e      	ldr	r1, [pc, #312]	; (800b884 <_dtoa_r+0x654>)
 800b74c:	2000      	movs	r0, #0
 800b74e:	f7f5 f88d 	bl	800086c <__aeabi_ddiv>
 800b752:	ec53 2b19 	vmov	r2, r3, d9
 800b756:	f7f4 fda7 	bl	80002a8 <__aeabi_dsub>
 800b75a:	9d00      	ldr	r5, [sp, #0]
 800b75c:	ec41 0b19 	vmov	d9, r0, r1
 800b760:	4649      	mov	r1, r9
 800b762:	4640      	mov	r0, r8
 800b764:	f7f5 fa08 	bl	8000b78 <__aeabi_d2iz>
 800b768:	4606      	mov	r6, r0
 800b76a:	f7f4 feeb 	bl	8000544 <__aeabi_i2d>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4640      	mov	r0, r8
 800b774:	4649      	mov	r1, r9
 800b776:	f7f4 fd97 	bl	80002a8 <__aeabi_dsub>
 800b77a:	3630      	adds	r6, #48	; 0x30
 800b77c:	f805 6b01 	strb.w	r6, [r5], #1
 800b780:	ec53 2b19 	vmov	r2, r3, d9
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	f7f5 f9b8 	bl	8000afc <__aeabi_dcmplt>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d164      	bne.n	800b85a <_dtoa_r+0x62a>
 800b790:	4642      	mov	r2, r8
 800b792:	464b      	mov	r3, r9
 800b794:	4937      	ldr	r1, [pc, #220]	; (800b874 <_dtoa_r+0x644>)
 800b796:	2000      	movs	r0, #0
 800b798:	f7f4 fd86 	bl	80002a8 <__aeabi_dsub>
 800b79c:	ec53 2b19 	vmov	r2, r3, d9
 800b7a0:	f7f5 f9ac 	bl	8000afc <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f040 80b6 	bne.w	800b916 <_dtoa_r+0x6e6>
 800b7aa:	9b02      	ldr	r3, [sp, #8]
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	f43f af7c 	beq.w	800b6aa <_dtoa_r+0x47a>
 800b7b2:	4b31      	ldr	r3, [pc, #196]	; (800b878 <_dtoa_r+0x648>)
 800b7b4:	ec51 0b19 	vmov	r0, r1, d9
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f7f4 ff2d 	bl	8000618 <__aeabi_dmul>
 800b7be:	4b2e      	ldr	r3, [pc, #184]	; (800b878 <_dtoa_r+0x648>)
 800b7c0:	ec41 0b19 	vmov	d9, r0, r1
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 ff25 	bl	8000618 <__aeabi_dmul>
 800b7ce:	4680      	mov	r8, r0
 800b7d0:	4689      	mov	r9, r1
 800b7d2:	e7c5      	b.n	800b760 <_dtoa_r+0x530>
 800b7d4:	ec51 0b17 	vmov	r0, r1, d7
 800b7d8:	f7f4 ff1e 	bl	8000618 <__aeabi_dmul>
 800b7dc:	9b02      	ldr	r3, [sp, #8]
 800b7de:	9d00      	ldr	r5, [sp, #0]
 800b7e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e2:	ec41 0b19 	vmov	d9, r0, r1
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f7f5 f9c5 	bl	8000b78 <__aeabi_d2iz>
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	f7f4 fea8 	bl	8000544 <__aeabi_i2d>
 800b7f4:	3630      	adds	r6, #48	; 0x30
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f4 fd53 	bl	80002a8 <__aeabi_dsub>
 800b802:	f805 6b01 	strb.w	r6, [r5], #1
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	429d      	cmp	r5, r3
 800b80a:	4680      	mov	r8, r0
 800b80c:	4689      	mov	r9, r1
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	d124      	bne.n	800b85e <_dtoa_r+0x62e>
 800b814:	4b1b      	ldr	r3, [pc, #108]	; (800b884 <_dtoa_r+0x654>)
 800b816:	ec51 0b19 	vmov	r0, r1, d9
 800b81a:	f7f4 fd47 	bl	80002ac <__adddf3>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f5 f987 	bl	8000b38 <__aeabi_dcmpgt>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d173      	bne.n	800b916 <_dtoa_r+0x6e6>
 800b82e:	ec53 2b19 	vmov	r2, r3, d9
 800b832:	4914      	ldr	r1, [pc, #80]	; (800b884 <_dtoa_r+0x654>)
 800b834:	2000      	movs	r0, #0
 800b836:	f7f4 fd37 	bl	80002a8 <__aeabi_dsub>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4640      	mov	r0, r8
 800b840:	4649      	mov	r1, r9
 800b842:	f7f5 f95b 	bl	8000afc <__aeabi_dcmplt>
 800b846:	2800      	cmp	r0, #0
 800b848:	f43f af2f 	beq.w	800b6aa <_dtoa_r+0x47a>
 800b84c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b84e:	1e6b      	subs	r3, r5, #1
 800b850:	930f      	str	r3, [sp, #60]	; 0x3c
 800b852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b856:	2b30      	cmp	r3, #48	; 0x30
 800b858:	d0f8      	beq.n	800b84c <_dtoa_r+0x61c>
 800b85a:	46bb      	mov	fp, r7
 800b85c:	e04a      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800b85e:	4b06      	ldr	r3, [pc, #24]	; (800b878 <_dtoa_r+0x648>)
 800b860:	f7f4 feda 	bl	8000618 <__aeabi_dmul>
 800b864:	4680      	mov	r8, r0
 800b866:	4689      	mov	r9, r1
 800b868:	e7bd      	b.n	800b7e6 <_dtoa_r+0x5b6>
 800b86a:	bf00      	nop
 800b86c:	0800d510 	.word	0x0800d510
 800b870:	0800d4e8 	.word	0x0800d4e8
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	40240000 	.word	0x40240000
 800b87c:	401c0000 	.word	0x401c0000
 800b880:	40140000 	.word	0x40140000
 800b884:	3fe00000 	.word	0x3fe00000
 800b888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b88c:	9d00      	ldr	r5, [sp, #0]
 800b88e:	4642      	mov	r2, r8
 800b890:	464b      	mov	r3, r9
 800b892:	4630      	mov	r0, r6
 800b894:	4639      	mov	r1, r7
 800b896:	f7f4 ffe9 	bl	800086c <__aeabi_ddiv>
 800b89a:	f7f5 f96d 	bl	8000b78 <__aeabi_d2iz>
 800b89e:	9001      	str	r0, [sp, #4]
 800b8a0:	f7f4 fe50 	bl	8000544 <__aeabi_i2d>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	f7f4 feb6 	bl	8000618 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 fcf8 	bl	80002a8 <__aeabi_dsub>
 800b8b8:	9e01      	ldr	r6, [sp, #4]
 800b8ba:	9f04      	ldr	r7, [sp, #16]
 800b8bc:	3630      	adds	r6, #48	; 0x30
 800b8be:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c2:	9e00      	ldr	r6, [sp, #0]
 800b8c4:	1bae      	subs	r6, r5, r6
 800b8c6:	42b7      	cmp	r7, r6
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	d134      	bne.n	800b938 <_dtoa_r+0x708>
 800b8ce:	f7f4 fced 	bl	80002ac <__adddf3>
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	464b      	mov	r3, r9
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	460f      	mov	r7, r1
 800b8da:	f7f5 f92d 	bl	8000b38 <__aeabi_dcmpgt>
 800b8de:	b9c8      	cbnz	r0, 800b914 <_dtoa_r+0x6e4>
 800b8e0:	4642      	mov	r2, r8
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f7f5 f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8ec:	b110      	cbz	r0, 800b8f4 <_dtoa_r+0x6c4>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	07db      	lsls	r3, r3, #31
 800b8f2:	d40f      	bmi.n	800b914 <_dtoa_r+0x6e4>
 800b8f4:	4651      	mov	r1, sl
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fbcc 	bl	800c094 <_Bfree>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b900:	702b      	strb	r3, [r5, #0]
 800b902:	f10b 0301 	add.w	r3, fp, #1
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f43f ace2 	beq.w	800b2d4 <_dtoa_r+0xa4>
 800b910:	601d      	str	r5, [r3, #0]
 800b912:	e4df      	b.n	800b2d4 <_dtoa_r+0xa4>
 800b914:	465f      	mov	r7, fp
 800b916:	462b      	mov	r3, r5
 800b918:	461d      	mov	r5, r3
 800b91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b91e:	2a39      	cmp	r2, #57	; 0x39
 800b920:	d106      	bne.n	800b930 <_dtoa_r+0x700>
 800b922:	9a00      	ldr	r2, [sp, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d1f7      	bne.n	800b918 <_dtoa_r+0x6e8>
 800b928:	9900      	ldr	r1, [sp, #0]
 800b92a:	2230      	movs	r2, #48	; 0x30
 800b92c:	3701      	adds	r7, #1
 800b92e:	700a      	strb	r2, [r1, #0]
 800b930:	781a      	ldrb	r2, [r3, #0]
 800b932:	3201      	adds	r2, #1
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e790      	b.n	800b85a <_dtoa_r+0x62a>
 800b938:	4ba3      	ldr	r3, [pc, #652]	; (800bbc8 <_dtoa_r+0x998>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	f7f4 fe6c 	bl	8000618 <__aeabi_dmul>
 800b940:	2200      	movs	r2, #0
 800b942:	2300      	movs	r3, #0
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	f7f5 f8ce 	bl	8000ae8 <__aeabi_dcmpeq>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d09e      	beq.n	800b88e <_dtoa_r+0x65e>
 800b950:	e7d0      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800b952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b954:	2a00      	cmp	r2, #0
 800b956:	f000 80ca 	beq.w	800baee <_dtoa_r+0x8be>
 800b95a:	9a07      	ldr	r2, [sp, #28]
 800b95c:	2a01      	cmp	r2, #1
 800b95e:	f300 80ad 	bgt.w	800babc <_dtoa_r+0x88c>
 800b962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b964:	2a00      	cmp	r2, #0
 800b966:	f000 80a5 	beq.w	800bab4 <_dtoa_r+0x884>
 800b96a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b96e:	9e08      	ldr	r6, [sp, #32]
 800b970:	9d05      	ldr	r5, [sp, #20]
 800b972:	9a05      	ldr	r2, [sp, #20]
 800b974:	441a      	add	r2, r3
 800b976:	9205      	str	r2, [sp, #20]
 800b978:	9a06      	ldr	r2, [sp, #24]
 800b97a:	2101      	movs	r1, #1
 800b97c:	441a      	add	r2, r3
 800b97e:	4620      	mov	r0, r4
 800b980:	9206      	str	r2, [sp, #24]
 800b982:	f000 fc3d 	bl	800c200 <__i2b>
 800b986:	4607      	mov	r7, r0
 800b988:	b165      	cbz	r5, 800b9a4 <_dtoa_r+0x774>
 800b98a:	9b06      	ldr	r3, [sp, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	dd09      	ble.n	800b9a4 <_dtoa_r+0x774>
 800b990:	42ab      	cmp	r3, r5
 800b992:	9a05      	ldr	r2, [sp, #20]
 800b994:	bfa8      	it	ge
 800b996:	462b      	movge	r3, r5
 800b998:	1ad2      	subs	r2, r2, r3
 800b99a:	9205      	str	r2, [sp, #20]
 800b99c:	9a06      	ldr	r2, [sp, #24]
 800b99e:	1aed      	subs	r5, r5, r3
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	9306      	str	r3, [sp, #24]
 800b9a4:	9b08      	ldr	r3, [sp, #32]
 800b9a6:	b1f3      	cbz	r3, 800b9e6 <_dtoa_r+0x7b6>
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80a3 	beq.w	800baf6 <_dtoa_r+0x8c6>
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	dd10      	ble.n	800b9d6 <_dtoa_r+0x7a6>
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fce1 	bl	800c380 <__pow5mult>
 800b9be:	4652      	mov	r2, sl
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fc31 	bl	800c22c <__multiply>
 800b9ca:	4651      	mov	r1, sl
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fb60 	bl	800c094 <_Bfree>
 800b9d4:	46c2      	mov	sl, r8
 800b9d6:	9b08      	ldr	r3, [sp, #32]
 800b9d8:	1b9a      	subs	r2, r3, r6
 800b9da:	d004      	beq.n	800b9e6 <_dtoa_r+0x7b6>
 800b9dc:	4651      	mov	r1, sl
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f000 fcce 	bl	800c380 <__pow5mult>
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 fc09 	bl	800c200 <__i2b>
 800b9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	f340 8081 	ble.w	800bafa <_dtoa_r+0x8ca>
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fcbf 	bl	800c380 <__pow5mult>
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	4606      	mov	r6, r0
 800ba08:	dd7a      	ble.n	800bb00 <_dtoa_r+0x8d0>
 800ba0a:	f04f 0800 	mov.w	r8, #0
 800ba0e:	6933      	ldr	r3, [r6, #16]
 800ba10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba14:	6918      	ldr	r0, [r3, #16]
 800ba16:	f000 fba5 	bl	800c164 <__hi0bits>
 800ba1a:	f1c0 0020 	rsb	r0, r0, #32
 800ba1e:	9b06      	ldr	r3, [sp, #24]
 800ba20:	4418      	add	r0, r3
 800ba22:	f010 001f 	ands.w	r0, r0, #31
 800ba26:	f000 8094 	beq.w	800bb52 <_dtoa_r+0x922>
 800ba2a:	f1c0 0320 	rsb	r3, r0, #32
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	f340 8085 	ble.w	800bb3e <_dtoa_r+0x90e>
 800ba34:	9b05      	ldr	r3, [sp, #20]
 800ba36:	f1c0 001c 	rsb	r0, r0, #28
 800ba3a:	4403      	add	r3, r0
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	4403      	add	r3, r0
 800ba42:	4405      	add	r5, r0
 800ba44:	9306      	str	r3, [sp, #24]
 800ba46:	9b05      	ldr	r3, [sp, #20]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dd05      	ble.n	800ba58 <_dtoa_r+0x828>
 800ba4c:	4651      	mov	r1, sl
 800ba4e:	461a      	mov	r2, r3
 800ba50:	4620      	mov	r0, r4
 800ba52:	f000 fcef 	bl	800c434 <__lshift>
 800ba56:	4682      	mov	sl, r0
 800ba58:	9b06      	ldr	r3, [sp, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	dd05      	ble.n	800ba6a <_dtoa_r+0x83a>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	461a      	mov	r2, r3
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 fce6 	bl	800c434 <__lshift>
 800ba68:	4606      	mov	r6, r0
 800ba6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d072      	beq.n	800bb56 <_dtoa_r+0x926>
 800ba70:	4631      	mov	r1, r6
 800ba72:	4650      	mov	r0, sl
 800ba74:	f000 fd4a 	bl	800c50c <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	da6c      	bge.n	800bb56 <_dtoa_r+0x926>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4651      	mov	r1, sl
 800ba80:	220a      	movs	r2, #10
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fb28 	bl	800c0d8 <__multadd>
 800ba88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba8e:	4682      	mov	sl, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 81b0 	beq.w	800bdf6 <_dtoa_r+0xbc6>
 800ba96:	2300      	movs	r3, #0
 800ba98:	4639      	mov	r1, r7
 800ba9a:	220a      	movs	r2, #10
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	f000 fb1b 	bl	800c0d8 <__multadd>
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	4607      	mov	r7, r0
 800baa8:	f300 8096 	bgt.w	800bbd8 <_dtoa_r+0x9a8>
 800baac:	9b07      	ldr	r3, [sp, #28]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	dc59      	bgt.n	800bb66 <_dtoa_r+0x936>
 800bab2:	e091      	b.n	800bbd8 <_dtoa_r+0x9a8>
 800bab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800baba:	e758      	b.n	800b96e <_dtoa_r+0x73e>
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	1e5e      	subs	r6, r3, #1
 800bac0:	9b08      	ldr	r3, [sp, #32]
 800bac2:	42b3      	cmp	r3, r6
 800bac4:	bfbf      	itttt	lt
 800bac6:	9b08      	ldrlt	r3, [sp, #32]
 800bac8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800baca:	9608      	strlt	r6, [sp, #32]
 800bacc:	1af3      	sublt	r3, r6, r3
 800bace:	bfb4      	ite	lt
 800bad0:	18d2      	addlt	r2, r2, r3
 800bad2:	1b9e      	subge	r6, r3, r6
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	bfbc      	itt	lt
 800bad8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bada:	2600      	movlt	r6, #0
 800badc:	2b00      	cmp	r3, #0
 800bade:	bfb7      	itett	lt
 800bae0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bae4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bae8:	1a9d      	sublt	r5, r3, r2
 800baea:	2300      	movlt	r3, #0
 800baec:	e741      	b.n	800b972 <_dtoa_r+0x742>
 800baee:	9e08      	ldr	r6, [sp, #32]
 800baf0:	9d05      	ldr	r5, [sp, #20]
 800baf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800baf4:	e748      	b.n	800b988 <_dtoa_r+0x758>
 800baf6:	9a08      	ldr	r2, [sp, #32]
 800baf8:	e770      	b.n	800b9dc <_dtoa_r+0x7ac>
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	dc19      	bgt.n	800bb34 <_dtoa_r+0x904>
 800bb00:	9b02      	ldr	r3, [sp, #8]
 800bb02:	b9bb      	cbnz	r3, 800bb34 <_dtoa_r+0x904>
 800bb04:	9b03      	ldr	r3, [sp, #12]
 800bb06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb0a:	b99b      	cbnz	r3, 800bb34 <_dtoa_r+0x904>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	0d1b      	lsrs	r3, r3, #20
 800bb14:	051b      	lsls	r3, r3, #20
 800bb16:	b183      	cbz	r3, 800bb3a <_dtoa_r+0x90a>
 800bb18:	9b05      	ldr	r3, [sp, #20]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	9b06      	ldr	r3, [sp, #24]
 800bb20:	3301      	adds	r3, #1
 800bb22:	9306      	str	r3, [sp, #24]
 800bb24:	f04f 0801 	mov.w	r8, #1
 800bb28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	f47f af6f 	bne.w	800ba0e <_dtoa_r+0x7de>
 800bb30:	2001      	movs	r0, #1
 800bb32:	e774      	b.n	800ba1e <_dtoa_r+0x7ee>
 800bb34:	f04f 0800 	mov.w	r8, #0
 800bb38:	e7f6      	b.n	800bb28 <_dtoa_r+0x8f8>
 800bb3a:	4698      	mov	r8, r3
 800bb3c:	e7f4      	b.n	800bb28 <_dtoa_r+0x8f8>
 800bb3e:	d082      	beq.n	800ba46 <_dtoa_r+0x816>
 800bb40:	9a05      	ldr	r2, [sp, #20]
 800bb42:	331c      	adds	r3, #28
 800bb44:	441a      	add	r2, r3
 800bb46:	9205      	str	r2, [sp, #20]
 800bb48:	9a06      	ldr	r2, [sp, #24]
 800bb4a:	441a      	add	r2, r3
 800bb4c:	441d      	add	r5, r3
 800bb4e:	9206      	str	r2, [sp, #24]
 800bb50:	e779      	b.n	800ba46 <_dtoa_r+0x816>
 800bb52:	4603      	mov	r3, r0
 800bb54:	e7f4      	b.n	800bb40 <_dtoa_r+0x910>
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc37      	bgt.n	800bbcc <_dtoa_r+0x99c>
 800bb5c:	9b07      	ldr	r3, [sp, #28]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	dd34      	ble.n	800bbcc <_dtoa_r+0x99c>
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	b963      	cbnz	r3, 800bb84 <_dtoa_r+0x954>
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	2205      	movs	r2, #5
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fab2 	bl	800c0d8 <__multadd>
 800bb74:	4601      	mov	r1, r0
 800bb76:	4606      	mov	r6, r0
 800bb78:	4650      	mov	r0, sl
 800bb7a:	f000 fcc7 	bl	800c50c <__mcmp>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f73f adbb 	bgt.w	800b6fa <_dtoa_r+0x4ca>
 800bb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb86:	9d00      	ldr	r5, [sp, #0]
 800bb88:	ea6f 0b03 	mvn.w	fp, r3
 800bb8c:	f04f 0800 	mov.w	r8, #0
 800bb90:	4631      	mov	r1, r6
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 fa7e 	bl	800c094 <_Bfree>
 800bb98:	2f00      	cmp	r7, #0
 800bb9a:	f43f aeab 	beq.w	800b8f4 <_dtoa_r+0x6c4>
 800bb9e:	f1b8 0f00 	cmp.w	r8, #0
 800bba2:	d005      	beq.n	800bbb0 <_dtoa_r+0x980>
 800bba4:	45b8      	cmp	r8, r7
 800bba6:	d003      	beq.n	800bbb0 <_dtoa_r+0x980>
 800bba8:	4641      	mov	r1, r8
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 fa72 	bl	800c094 <_Bfree>
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fa6e 	bl	800c094 <_Bfree>
 800bbb8:	e69c      	b.n	800b8f4 <_dtoa_r+0x6c4>
 800bbba:	2600      	movs	r6, #0
 800bbbc:	4637      	mov	r7, r6
 800bbbe:	e7e1      	b.n	800bb84 <_dtoa_r+0x954>
 800bbc0:	46bb      	mov	fp, r7
 800bbc2:	4637      	mov	r7, r6
 800bbc4:	e599      	b.n	800b6fa <_dtoa_r+0x4ca>
 800bbc6:	bf00      	nop
 800bbc8:	40240000 	.word	0x40240000
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80c8 	beq.w	800bd64 <_dtoa_r+0xb34>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	2d00      	cmp	r5, #0
 800bbda:	dd05      	ble.n	800bbe8 <_dtoa_r+0x9b8>
 800bbdc:	4639      	mov	r1, r7
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fc27 	bl	800c434 <__lshift>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	f1b8 0f00 	cmp.w	r8, #0
 800bbec:	d05b      	beq.n	800bca6 <_dtoa_r+0xa76>
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 fa0f 	bl	800c014 <_Balloc>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	b928      	cbnz	r0, 800bc06 <_dtoa_r+0x9d6>
 800bbfa:	4b83      	ldr	r3, [pc, #524]	; (800be08 <_dtoa_r+0xbd8>)
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bc02:	f7ff bb2e 	b.w	800b262 <_dtoa_r+0x32>
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	3202      	adds	r2, #2
 800bc0a:	0092      	lsls	r2, r2, #2
 800bc0c:	f107 010c 	add.w	r1, r7, #12
 800bc10:	300c      	adds	r0, #12
 800bc12:	f7ff fa75 	bl	800b100 <memcpy>
 800bc16:	2201      	movs	r2, #1
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fc0a 	bl	800c434 <__lshift>
 800bc20:	9b00      	ldr	r3, [sp, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	46b8      	mov	r8, r7
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	4607      	mov	r7, r0
 800bc3a:	9b04      	ldr	r3, [sp, #16]
 800bc3c:	4631      	mov	r1, r6
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4650      	mov	r0, sl
 800bc42:	9301      	str	r3, [sp, #4]
 800bc44:	f7ff fa6a 	bl	800b11c <quorem>
 800bc48:	4641      	mov	r1, r8
 800bc4a:	9002      	str	r0, [sp, #8]
 800bc4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc50:	4650      	mov	r0, sl
 800bc52:	f000 fc5b 	bl	800c50c <__mcmp>
 800bc56:	463a      	mov	r2, r7
 800bc58:	9005      	str	r0, [sp, #20]
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fc71 	bl	800c544 <__mdiff>
 800bc62:	68c2      	ldr	r2, [r0, #12]
 800bc64:	4605      	mov	r5, r0
 800bc66:	bb02      	cbnz	r2, 800bcaa <_dtoa_r+0xa7a>
 800bc68:	4601      	mov	r1, r0
 800bc6a:	4650      	mov	r0, sl
 800bc6c:	f000 fc4e 	bl	800c50c <__mcmp>
 800bc70:	4602      	mov	r2, r0
 800bc72:	4629      	mov	r1, r5
 800bc74:	4620      	mov	r0, r4
 800bc76:	9209      	str	r2, [sp, #36]	; 0x24
 800bc78:	f000 fa0c 	bl	800c094 <_Bfree>
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc80:	9d04      	ldr	r5, [sp, #16]
 800bc82:	ea43 0102 	orr.w	r1, r3, r2
 800bc86:	9b06      	ldr	r3, [sp, #24]
 800bc88:	4319      	orrs	r1, r3
 800bc8a:	d110      	bne.n	800bcae <_dtoa_r+0xa7e>
 800bc8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc90:	d029      	beq.n	800bce6 <_dtoa_r+0xab6>
 800bc92:	9b05      	ldr	r3, [sp, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dd02      	ble.n	800bc9e <_dtoa_r+0xa6e>
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bc9e:	9b01      	ldr	r3, [sp, #4]
 800bca0:	f883 9000 	strb.w	r9, [r3]
 800bca4:	e774      	b.n	800bb90 <_dtoa_r+0x960>
 800bca6:	4638      	mov	r0, r7
 800bca8:	e7ba      	b.n	800bc20 <_dtoa_r+0x9f0>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	e7e1      	b.n	800bc72 <_dtoa_r+0xa42>
 800bcae:	9b05      	ldr	r3, [sp, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	db04      	blt.n	800bcbe <_dtoa_r+0xa8e>
 800bcb4:	9907      	ldr	r1, [sp, #28]
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	9906      	ldr	r1, [sp, #24]
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	d120      	bne.n	800bd00 <_dtoa_r+0xad0>
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	dded      	ble.n	800bc9e <_dtoa_r+0xa6e>
 800bcc2:	4651      	mov	r1, sl
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 fbb4 	bl	800c434 <__lshift>
 800bccc:	4631      	mov	r1, r6
 800bcce:	4682      	mov	sl, r0
 800bcd0:	f000 fc1c 	bl	800c50c <__mcmp>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	dc03      	bgt.n	800bce0 <_dtoa_r+0xab0>
 800bcd8:	d1e1      	bne.n	800bc9e <_dtoa_r+0xa6e>
 800bcda:	f019 0f01 	tst.w	r9, #1
 800bcde:	d0de      	beq.n	800bc9e <_dtoa_r+0xa6e>
 800bce0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bce4:	d1d8      	bne.n	800bc98 <_dtoa_r+0xa68>
 800bce6:	9a01      	ldr	r2, [sp, #4]
 800bce8:	2339      	movs	r3, #57	; 0x39
 800bcea:	7013      	strb	r3, [r2, #0]
 800bcec:	462b      	mov	r3, r5
 800bcee:	461d      	mov	r5, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcf6:	2a39      	cmp	r2, #57	; 0x39
 800bcf8:	d06c      	beq.n	800bdd4 <_dtoa_r+0xba4>
 800bcfa:	3201      	adds	r2, #1
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e747      	b.n	800bb90 <_dtoa_r+0x960>
 800bd00:	2a00      	cmp	r2, #0
 800bd02:	dd07      	ble.n	800bd14 <_dtoa_r+0xae4>
 800bd04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd08:	d0ed      	beq.n	800bce6 <_dtoa_r+0xab6>
 800bd0a:	9a01      	ldr	r2, [sp, #4]
 800bd0c:	f109 0301 	add.w	r3, r9, #1
 800bd10:	7013      	strb	r3, [r2, #0]
 800bd12:	e73d      	b.n	800bb90 <_dtoa_r+0x960>
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	9a08      	ldr	r2, [sp, #32]
 800bd18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d043      	beq.n	800bda8 <_dtoa_r+0xb78>
 800bd20:	4651      	mov	r1, sl
 800bd22:	2300      	movs	r3, #0
 800bd24:	220a      	movs	r2, #10
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 f9d6 	bl	800c0d8 <__multadd>
 800bd2c:	45b8      	cmp	r8, r7
 800bd2e:	4682      	mov	sl, r0
 800bd30:	f04f 0300 	mov.w	r3, #0
 800bd34:	f04f 020a 	mov.w	r2, #10
 800bd38:	4641      	mov	r1, r8
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	d107      	bne.n	800bd4e <_dtoa_r+0xb1e>
 800bd3e:	f000 f9cb 	bl	800c0d8 <__multadd>
 800bd42:	4680      	mov	r8, r0
 800bd44:	4607      	mov	r7, r0
 800bd46:	9b04      	ldr	r3, [sp, #16]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	e775      	b.n	800bc3a <_dtoa_r+0xa0a>
 800bd4e:	f000 f9c3 	bl	800c0d8 <__multadd>
 800bd52:	4639      	mov	r1, r7
 800bd54:	4680      	mov	r8, r0
 800bd56:	2300      	movs	r3, #0
 800bd58:	220a      	movs	r2, #10
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 f9bc 	bl	800c0d8 <__multadd>
 800bd60:	4607      	mov	r7, r0
 800bd62:	e7f0      	b.n	800bd46 <_dtoa_r+0xb16>
 800bd64:	9b04      	ldr	r3, [sp, #16]
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	9d00      	ldr	r5, [sp, #0]
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	f7ff f9d5 	bl	800b11c <quorem>
 800bd72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bd76:	9b00      	ldr	r3, [sp, #0]
 800bd78:	f805 9b01 	strb.w	r9, [r5], #1
 800bd7c:	1aea      	subs	r2, r5, r3
 800bd7e:	9b01      	ldr	r3, [sp, #4]
 800bd80:	4293      	cmp	r3, r2
 800bd82:	dd07      	ble.n	800bd94 <_dtoa_r+0xb64>
 800bd84:	4651      	mov	r1, sl
 800bd86:	2300      	movs	r3, #0
 800bd88:	220a      	movs	r2, #10
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f9a4 	bl	800c0d8 <__multadd>
 800bd90:	4682      	mov	sl, r0
 800bd92:	e7ea      	b.n	800bd6a <_dtoa_r+0xb3a>
 800bd94:	9b01      	ldr	r3, [sp, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfc8      	it	gt
 800bd9a:	461d      	movgt	r5, r3
 800bd9c:	9b00      	ldr	r3, [sp, #0]
 800bd9e:	bfd8      	it	le
 800bda0:	2501      	movle	r5, #1
 800bda2:	441d      	add	r5, r3
 800bda4:	f04f 0800 	mov.w	r8, #0
 800bda8:	4651      	mov	r1, sl
 800bdaa:	2201      	movs	r2, #1
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fb41 	bl	800c434 <__lshift>
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4682      	mov	sl, r0
 800bdb6:	f000 fba9 	bl	800c50c <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	dc96      	bgt.n	800bcec <_dtoa_r+0xabc>
 800bdbe:	d102      	bne.n	800bdc6 <_dtoa_r+0xb96>
 800bdc0:	f019 0f01 	tst.w	r9, #1
 800bdc4:	d192      	bne.n	800bcec <_dtoa_r+0xabc>
 800bdc6:	462b      	mov	r3, r5
 800bdc8:	461d      	mov	r5, r3
 800bdca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdce:	2a30      	cmp	r2, #48	; 0x30
 800bdd0:	d0fa      	beq.n	800bdc8 <_dtoa_r+0xb98>
 800bdd2:	e6dd      	b.n	800bb90 <_dtoa_r+0x960>
 800bdd4:	9a00      	ldr	r2, [sp, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d189      	bne.n	800bcee <_dtoa_r+0xabe>
 800bdda:	f10b 0b01 	add.w	fp, fp, #1
 800bdde:	2331      	movs	r3, #49	; 0x31
 800bde0:	e796      	b.n	800bd10 <_dtoa_r+0xae0>
 800bde2:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <_dtoa_r+0xbdc>)
 800bde4:	f7ff ba99 	b.w	800b31a <_dtoa_r+0xea>
 800bde8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f47f aa6d 	bne.w	800b2ca <_dtoa_r+0x9a>
 800bdf0:	4b07      	ldr	r3, [pc, #28]	; (800be10 <_dtoa_r+0xbe0>)
 800bdf2:	f7ff ba92 	b.w	800b31a <_dtoa_r+0xea>
 800bdf6:	9b01      	ldr	r3, [sp, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	dcb5      	bgt.n	800bd68 <_dtoa_r+0xb38>
 800bdfc:	9b07      	ldr	r3, [sp, #28]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	f73f aeb1 	bgt.w	800bb66 <_dtoa_r+0x936>
 800be04:	e7b0      	b.n	800bd68 <_dtoa_r+0xb38>
 800be06:	bf00      	nop
 800be08:	0800d47c 	.word	0x0800d47c
 800be0c:	0800d3dc 	.word	0x0800d3dc
 800be10:	0800d400 	.word	0x0800d400

0800be14 <_free_r>:
 800be14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be16:	2900      	cmp	r1, #0
 800be18:	d044      	beq.n	800bea4 <_free_r+0x90>
 800be1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be1e:	9001      	str	r0, [sp, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f1a1 0404 	sub.w	r4, r1, #4
 800be26:	bfb8      	it	lt
 800be28:	18e4      	addlt	r4, r4, r3
 800be2a:	f000 f8e7 	bl	800bffc <__malloc_lock>
 800be2e:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <_free_r+0x94>)
 800be30:	9801      	ldr	r0, [sp, #4]
 800be32:	6813      	ldr	r3, [r2, #0]
 800be34:	b933      	cbnz	r3, 800be44 <_free_r+0x30>
 800be36:	6063      	str	r3, [r4, #4]
 800be38:	6014      	str	r4, [r2, #0]
 800be3a:	b003      	add	sp, #12
 800be3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be40:	f000 b8e2 	b.w	800c008 <__malloc_unlock>
 800be44:	42a3      	cmp	r3, r4
 800be46:	d908      	bls.n	800be5a <_free_r+0x46>
 800be48:	6825      	ldr	r5, [r4, #0]
 800be4a:	1961      	adds	r1, r4, r5
 800be4c:	428b      	cmp	r3, r1
 800be4e:	bf01      	itttt	eq
 800be50:	6819      	ldreq	r1, [r3, #0]
 800be52:	685b      	ldreq	r3, [r3, #4]
 800be54:	1949      	addeq	r1, r1, r5
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	e7ed      	b.n	800be36 <_free_r+0x22>
 800be5a:	461a      	mov	r2, r3
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	b10b      	cbz	r3, 800be64 <_free_r+0x50>
 800be60:	42a3      	cmp	r3, r4
 800be62:	d9fa      	bls.n	800be5a <_free_r+0x46>
 800be64:	6811      	ldr	r1, [r2, #0]
 800be66:	1855      	adds	r5, r2, r1
 800be68:	42a5      	cmp	r5, r4
 800be6a:	d10b      	bne.n	800be84 <_free_r+0x70>
 800be6c:	6824      	ldr	r4, [r4, #0]
 800be6e:	4421      	add	r1, r4
 800be70:	1854      	adds	r4, r2, r1
 800be72:	42a3      	cmp	r3, r4
 800be74:	6011      	str	r1, [r2, #0]
 800be76:	d1e0      	bne.n	800be3a <_free_r+0x26>
 800be78:	681c      	ldr	r4, [r3, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	6053      	str	r3, [r2, #4]
 800be7e:	440c      	add	r4, r1
 800be80:	6014      	str	r4, [r2, #0]
 800be82:	e7da      	b.n	800be3a <_free_r+0x26>
 800be84:	d902      	bls.n	800be8c <_free_r+0x78>
 800be86:	230c      	movs	r3, #12
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	e7d6      	b.n	800be3a <_free_r+0x26>
 800be8c:	6825      	ldr	r5, [r4, #0]
 800be8e:	1961      	adds	r1, r4, r5
 800be90:	428b      	cmp	r3, r1
 800be92:	bf04      	itt	eq
 800be94:	6819      	ldreq	r1, [r3, #0]
 800be96:	685b      	ldreq	r3, [r3, #4]
 800be98:	6063      	str	r3, [r4, #4]
 800be9a:	bf04      	itt	eq
 800be9c:	1949      	addeq	r1, r1, r5
 800be9e:	6021      	streq	r1, [r4, #0]
 800bea0:	6054      	str	r4, [r2, #4]
 800bea2:	e7ca      	b.n	800be3a <_free_r+0x26>
 800bea4:	b003      	add	sp, #12
 800bea6:	bd30      	pop	{r4, r5, pc}
 800bea8:	2000e728 	.word	0x2000e728

0800beac <malloc>:
 800beac:	4b02      	ldr	r3, [pc, #8]	; (800beb8 <malloc+0xc>)
 800beae:	4601      	mov	r1, r0
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f000 b823 	b.w	800befc <_malloc_r>
 800beb6:	bf00      	nop
 800beb8:	200000f4 	.word	0x200000f4

0800bebc <sbrk_aligned>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	4e0e      	ldr	r6, [pc, #56]	; (800bef8 <sbrk_aligned+0x3c>)
 800bec0:	460c      	mov	r4, r1
 800bec2:	6831      	ldr	r1, [r6, #0]
 800bec4:	4605      	mov	r5, r0
 800bec6:	b911      	cbnz	r1, 800bece <sbrk_aligned+0x12>
 800bec8:	f001 f808 	bl	800cedc <_sbrk_r>
 800becc:	6030      	str	r0, [r6, #0]
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f001 f803 	bl	800cedc <_sbrk_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d00a      	beq.n	800bef0 <sbrk_aligned+0x34>
 800beda:	1cc4      	adds	r4, r0, #3
 800bedc:	f024 0403 	bic.w	r4, r4, #3
 800bee0:	42a0      	cmp	r0, r4
 800bee2:	d007      	beq.n	800bef4 <sbrk_aligned+0x38>
 800bee4:	1a21      	subs	r1, r4, r0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 fff8 	bl	800cedc <_sbrk_r>
 800beec:	3001      	adds	r0, #1
 800beee:	d101      	bne.n	800bef4 <sbrk_aligned+0x38>
 800bef0:	f04f 34ff 	mov.w	r4, #4294967295
 800bef4:	4620      	mov	r0, r4
 800bef6:	bd70      	pop	{r4, r5, r6, pc}
 800bef8:	2000e72c 	.word	0x2000e72c

0800befc <_malloc_r>:
 800befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf00:	1ccd      	adds	r5, r1, #3
 800bf02:	f025 0503 	bic.w	r5, r5, #3
 800bf06:	3508      	adds	r5, #8
 800bf08:	2d0c      	cmp	r5, #12
 800bf0a:	bf38      	it	cc
 800bf0c:	250c      	movcc	r5, #12
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	4607      	mov	r7, r0
 800bf12:	db01      	blt.n	800bf18 <_malloc_r+0x1c>
 800bf14:	42a9      	cmp	r1, r5
 800bf16:	d905      	bls.n	800bf24 <_malloc_r+0x28>
 800bf18:	230c      	movs	r3, #12
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	2600      	movs	r6, #0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bff8 <_malloc_r+0xfc>
 800bf28:	f000 f868 	bl	800bffc <__malloc_lock>
 800bf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf30:	461c      	mov	r4, r3
 800bf32:	bb5c      	cbnz	r4, 800bf8c <_malloc_r+0x90>
 800bf34:	4629      	mov	r1, r5
 800bf36:	4638      	mov	r0, r7
 800bf38:	f7ff ffc0 	bl	800bebc <sbrk_aligned>
 800bf3c:	1c43      	adds	r3, r0, #1
 800bf3e:	4604      	mov	r4, r0
 800bf40:	d155      	bne.n	800bfee <_malloc_r+0xf2>
 800bf42:	f8d8 4000 	ldr.w	r4, [r8]
 800bf46:	4626      	mov	r6, r4
 800bf48:	2e00      	cmp	r6, #0
 800bf4a:	d145      	bne.n	800bfd8 <_malloc_r+0xdc>
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	d048      	beq.n	800bfe2 <_malloc_r+0xe6>
 800bf50:	6823      	ldr	r3, [r4, #0]
 800bf52:	4631      	mov	r1, r6
 800bf54:	4638      	mov	r0, r7
 800bf56:	eb04 0903 	add.w	r9, r4, r3
 800bf5a:	f000 ffbf 	bl	800cedc <_sbrk_r>
 800bf5e:	4581      	cmp	r9, r0
 800bf60:	d13f      	bne.n	800bfe2 <_malloc_r+0xe6>
 800bf62:	6821      	ldr	r1, [r4, #0]
 800bf64:	1a6d      	subs	r5, r5, r1
 800bf66:	4629      	mov	r1, r5
 800bf68:	4638      	mov	r0, r7
 800bf6a:	f7ff ffa7 	bl	800bebc <sbrk_aligned>
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d037      	beq.n	800bfe2 <_malloc_r+0xe6>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	442b      	add	r3, r5
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	f8d8 3000 	ldr.w	r3, [r8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d038      	beq.n	800bff2 <_malloc_r+0xf6>
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	42a2      	cmp	r2, r4
 800bf84:	d12b      	bne.n	800bfde <_malloc_r+0xe2>
 800bf86:	2200      	movs	r2, #0
 800bf88:	605a      	str	r2, [r3, #4]
 800bf8a:	e00f      	b.n	800bfac <_malloc_r+0xb0>
 800bf8c:	6822      	ldr	r2, [r4, #0]
 800bf8e:	1b52      	subs	r2, r2, r5
 800bf90:	d41f      	bmi.n	800bfd2 <_malloc_r+0xd6>
 800bf92:	2a0b      	cmp	r2, #11
 800bf94:	d917      	bls.n	800bfc6 <_malloc_r+0xca>
 800bf96:	1961      	adds	r1, r4, r5
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	6025      	str	r5, [r4, #0]
 800bf9c:	bf18      	it	ne
 800bf9e:	6059      	strne	r1, [r3, #4]
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	bf08      	it	eq
 800bfa4:	f8c8 1000 	streq.w	r1, [r8]
 800bfa8:	5162      	str	r2, [r4, r5]
 800bfaa:	604b      	str	r3, [r1, #4]
 800bfac:	4638      	mov	r0, r7
 800bfae:	f104 060b 	add.w	r6, r4, #11
 800bfb2:	f000 f829 	bl	800c008 <__malloc_unlock>
 800bfb6:	f026 0607 	bic.w	r6, r6, #7
 800bfba:	1d23      	adds	r3, r4, #4
 800bfbc:	1af2      	subs	r2, r6, r3
 800bfbe:	d0ae      	beq.n	800bf1e <_malloc_r+0x22>
 800bfc0:	1b9b      	subs	r3, r3, r6
 800bfc2:	50a3      	str	r3, [r4, r2]
 800bfc4:	e7ab      	b.n	800bf1e <_malloc_r+0x22>
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	6862      	ldr	r2, [r4, #4]
 800bfca:	d1dd      	bne.n	800bf88 <_malloc_r+0x8c>
 800bfcc:	f8c8 2000 	str.w	r2, [r8]
 800bfd0:	e7ec      	b.n	800bfac <_malloc_r+0xb0>
 800bfd2:	4623      	mov	r3, r4
 800bfd4:	6864      	ldr	r4, [r4, #4]
 800bfd6:	e7ac      	b.n	800bf32 <_malloc_r+0x36>
 800bfd8:	4634      	mov	r4, r6
 800bfda:	6876      	ldr	r6, [r6, #4]
 800bfdc:	e7b4      	b.n	800bf48 <_malloc_r+0x4c>
 800bfde:	4613      	mov	r3, r2
 800bfe0:	e7cc      	b.n	800bf7c <_malloc_r+0x80>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	f000 f80e 	bl	800c008 <__malloc_unlock>
 800bfec:	e797      	b.n	800bf1e <_malloc_r+0x22>
 800bfee:	6025      	str	r5, [r4, #0]
 800bff0:	e7dc      	b.n	800bfac <_malloc_r+0xb0>
 800bff2:	605b      	str	r3, [r3, #4]
 800bff4:	deff      	udf	#255	; 0xff
 800bff6:	bf00      	nop
 800bff8:	2000e728 	.word	0x2000e728

0800bffc <__malloc_lock>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__malloc_lock+0x8>)
 800bffe:	f7ff b875 	b.w	800b0ec <__retarget_lock_acquire_recursive>
 800c002:	bf00      	nop
 800c004:	2000e724 	.word	0x2000e724

0800c008 <__malloc_unlock>:
 800c008:	4801      	ldr	r0, [pc, #4]	; (800c010 <__malloc_unlock+0x8>)
 800c00a:	f7ff b870 	b.w	800b0ee <__retarget_lock_release_recursive>
 800c00e:	bf00      	nop
 800c010:	2000e724 	.word	0x2000e724

0800c014 <_Balloc>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	69c6      	ldr	r6, [r0, #28]
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	b976      	cbnz	r6, 800c03c <_Balloc+0x28>
 800c01e:	2010      	movs	r0, #16
 800c020:	f7ff ff44 	bl	800beac <malloc>
 800c024:	4602      	mov	r2, r0
 800c026:	61e0      	str	r0, [r4, #28]
 800c028:	b920      	cbnz	r0, 800c034 <_Balloc+0x20>
 800c02a:	4b18      	ldr	r3, [pc, #96]	; (800c08c <_Balloc+0x78>)
 800c02c:	4818      	ldr	r0, [pc, #96]	; (800c090 <_Balloc+0x7c>)
 800c02e:	216b      	movs	r1, #107	; 0x6b
 800c030:	f000 ff64 	bl	800cefc <__assert_func>
 800c034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c038:	6006      	str	r6, [r0, #0]
 800c03a:	60c6      	str	r6, [r0, #12]
 800c03c:	69e6      	ldr	r6, [r4, #28]
 800c03e:	68f3      	ldr	r3, [r6, #12]
 800c040:	b183      	cbz	r3, 800c064 <_Balloc+0x50>
 800c042:	69e3      	ldr	r3, [r4, #28]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c04a:	b9b8      	cbnz	r0, 800c07c <_Balloc+0x68>
 800c04c:	2101      	movs	r1, #1
 800c04e:	fa01 f605 	lsl.w	r6, r1, r5
 800c052:	1d72      	adds	r2, r6, #5
 800c054:	0092      	lsls	r2, r2, #2
 800c056:	4620      	mov	r0, r4
 800c058:	f000 ff6e 	bl	800cf38 <_calloc_r>
 800c05c:	b160      	cbz	r0, 800c078 <_Balloc+0x64>
 800c05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c062:	e00e      	b.n	800c082 <_Balloc+0x6e>
 800c064:	2221      	movs	r2, #33	; 0x21
 800c066:	2104      	movs	r1, #4
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 ff65 	bl	800cf38 <_calloc_r>
 800c06e:	69e3      	ldr	r3, [r4, #28]
 800c070:	60f0      	str	r0, [r6, #12]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e4      	bne.n	800c042 <_Balloc+0x2e>
 800c078:	2000      	movs	r0, #0
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	6802      	ldr	r2, [r0, #0]
 800c07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c082:	2300      	movs	r3, #0
 800c084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c088:	e7f7      	b.n	800c07a <_Balloc+0x66>
 800c08a:	bf00      	nop
 800c08c:	0800d40d 	.word	0x0800d40d
 800c090:	0800d48d 	.word	0x0800d48d

0800c094 <_Bfree>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	69c6      	ldr	r6, [r0, #28]
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b976      	cbnz	r6, 800c0bc <_Bfree+0x28>
 800c09e:	2010      	movs	r0, #16
 800c0a0:	f7ff ff04 	bl	800beac <malloc>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	61e8      	str	r0, [r5, #28]
 800c0a8:	b920      	cbnz	r0, 800c0b4 <_Bfree+0x20>
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <_Bfree+0x3c>)
 800c0ac:	4809      	ldr	r0, [pc, #36]	; (800c0d4 <_Bfree+0x40>)
 800c0ae:	218f      	movs	r1, #143	; 0x8f
 800c0b0:	f000 ff24 	bl	800cefc <__assert_func>
 800c0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b8:	6006      	str	r6, [r0, #0]
 800c0ba:	60c6      	str	r6, [r0, #12]
 800c0bc:	b13c      	cbz	r4, 800c0ce <_Bfree+0x3a>
 800c0be:	69eb      	ldr	r3, [r5, #28]
 800c0c0:	6862      	ldr	r2, [r4, #4]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0c8:	6021      	str	r1, [r4, #0]
 800c0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	0800d40d 	.word	0x0800d40d
 800c0d4:	0800d48d 	.word	0x0800d48d

0800c0d8 <__multadd>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	690d      	ldr	r5, [r1, #16]
 800c0de:	4607      	mov	r7, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	461e      	mov	r6, r3
 800c0e4:	f101 0c14 	add.w	ip, r1, #20
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ee:	b299      	uxth	r1, r3
 800c0f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0f4:	0c1e      	lsrs	r6, r3, #16
 800c0f6:	0c0b      	lsrs	r3, r1, #16
 800c0f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0fc:	b289      	uxth	r1, r1
 800c0fe:	3001      	adds	r0, #1
 800c100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c104:	4285      	cmp	r5, r0
 800c106:	f84c 1b04 	str.w	r1, [ip], #4
 800c10a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c10e:	dcec      	bgt.n	800c0ea <__multadd+0x12>
 800c110:	b30e      	cbz	r6, 800c156 <__multadd+0x7e>
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc19      	bgt.n	800c14c <__multadd+0x74>
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	4638      	mov	r0, r7
 800c11c:	3101      	adds	r1, #1
 800c11e:	f7ff ff79 	bl	800c014 <_Balloc>
 800c122:	4680      	mov	r8, r0
 800c124:	b928      	cbnz	r0, 800c132 <__multadd+0x5a>
 800c126:	4602      	mov	r2, r0
 800c128:	4b0c      	ldr	r3, [pc, #48]	; (800c15c <__multadd+0x84>)
 800c12a:	480d      	ldr	r0, [pc, #52]	; (800c160 <__multadd+0x88>)
 800c12c:	21ba      	movs	r1, #186	; 0xba
 800c12e:	f000 fee5 	bl	800cefc <__assert_func>
 800c132:	6922      	ldr	r2, [r4, #16]
 800c134:	3202      	adds	r2, #2
 800c136:	f104 010c 	add.w	r1, r4, #12
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	300c      	adds	r0, #12
 800c13e:	f7fe ffdf 	bl	800b100 <memcpy>
 800c142:	4621      	mov	r1, r4
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff ffa5 	bl	800c094 <_Bfree>
 800c14a:	4644      	mov	r4, r8
 800c14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c150:	3501      	adds	r5, #1
 800c152:	615e      	str	r6, [r3, #20]
 800c154:	6125      	str	r5, [r4, #16]
 800c156:	4620      	mov	r0, r4
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	0800d47c 	.word	0x0800d47c
 800c160:	0800d48d 	.word	0x0800d48d

0800c164 <__hi0bits>:
 800c164:	0c03      	lsrs	r3, r0, #16
 800c166:	041b      	lsls	r3, r3, #16
 800c168:	b9d3      	cbnz	r3, 800c1a0 <__hi0bits+0x3c>
 800c16a:	0400      	lsls	r0, r0, #16
 800c16c:	2310      	movs	r3, #16
 800c16e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c172:	bf04      	itt	eq
 800c174:	0200      	lsleq	r0, r0, #8
 800c176:	3308      	addeq	r3, #8
 800c178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c17c:	bf04      	itt	eq
 800c17e:	0100      	lsleq	r0, r0, #4
 800c180:	3304      	addeq	r3, #4
 800c182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c186:	bf04      	itt	eq
 800c188:	0080      	lsleq	r0, r0, #2
 800c18a:	3302      	addeq	r3, #2
 800c18c:	2800      	cmp	r0, #0
 800c18e:	db05      	blt.n	800c19c <__hi0bits+0x38>
 800c190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c194:	f103 0301 	add.w	r3, r3, #1
 800c198:	bf08      	it	eq
 800c19a:	2320      	moveq	r3, #32
 800c19c:	4618      	mov	r0, r3
 800c19e:	4770      	bx	lr
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e7e4      	b.n	800c16e <__hi0bits+0xa>

0800c1a4 <__lo0bits>:
 800c1a4:	6803      	ldr	r3, [r0, #0]
 800c1a6:	f013 0207 	ands.w	r2, r3, #7
 800c1aa:	d00c      	beq.n	800c1c6 <__lo0bits+0x22>
 800c1ac:	07d9      	lsls	r1, r3, #31
 800c1ae:	d422      	bmi.n	800c1f6 <__lo0bits+0x52>
 800c1b0:	079a      	lsls	r2, r3, #30
 800c1b2:	bf49      	itett	mi
 800c1b4:	085b      	lsrmi	r3, r3, #1
 800c1b6:	089b      	lsrpl	r3, r3, #2
 800c1b8:	6003      	strmi	r3, [r0, #0]
 800c1ba:	2201      	movmi	r2, #1
 800c1bc:	bf5c      	itt	pl
 800c1be:	6003      	strpl	r3, [r0, #0]
 800c1c0:	2202      	movpl	r2, #2
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	4770      	bx	lr
 800c1c6:	b299      	uxth	r1, r3
 800c1c8:	b909      	cbnz	r1, 800c1ce <__lo0bits+0x2a>
 800c1ca:	0c1b      	lsrs	r3, r3, #16
 800c1cc:	2210      	movs	r2, #16
 800c1ce:	b2d9      	uxtb	r1, r3
 800c1d0:	b909      	cbnz	r1, 800c1d6 <__lo0bits+0x32>
 800c1d2:	3208      	adds	r2, #8
 800c1d4:	0a1b      	lsrs	r3, r3, #8
 800c1d6:	0719      	lsls	r1, r3, #28
 800c1d8:	bf04      	itt	eq
 800c1da:	091b      	lsreq	r3, r3, #4
 800c1dc:	3204      	addeq	r2, #4
 800c1de:	0799      	lsls	r1, r3, #30
 800c1e0:	bf04      	itt	eq
 800c1e2:	089b      	lsreq	r3, r3, #2
 800c1e4:	3202      	addeq	r2, #2
 800c1e6:	07d9      	lsls	r1, r3, #31
 800c1e8:	d403      	bmi.n	800c1f2 <__lo0bits+0x4e>
 800c1ea:	085b      	lsrs	r3, r3, #1
 800c1ec:	f102 0201 	add.w	r2, r2, #1
 800c1f0:	d003      	beq.n	800c1fa <__lo0bits+0x56>
 800c1f2:	6003      	str	r3, [r0, #0]
 800c1f4:	e7e5      	b.n	800c1c2 <__lo0bits+0x1e>
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	e7e3      	b.n	800c1c2 <__lo0bits+0x1e>
 800c1fa:	2220      	movs	r2, #32
 800c1fc:	e7e1      	b.n	800c1c2 <__lo0bits+0x1e>
	...

0800c200 <__i2b>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	2101      	movs	r1, #1
 800c206:	f7ff ff05 	bl	800c014 <_Balloc>
 800c20a:	4602      	mov	r2, r0
 800c20c:	b928      	cbnz	r0, 800c21a <__i2b+0x1a>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <__i2b+0x24>)
 800c210:	4805      	ldr	r0, [pc, #20]	; (800c228 <__i2b+0x28>)
 800c212:	f240 1145 	movw	r1, #325	; 0x145
 800c216:	f000 fe71 	bl	800cefc <__assert_func>
 800c21a:	2301      	movs	r3, #1
 800c21c:	6144      	str	r4, [r0, #20]
 800c21e:	6103      	str	r3, [r0, #16]
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	0800d47c 	.word	0x0800d47c
 800c228:	0800d48d 	.word	0x0800d48d

0800c22c <__multiply>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	4691      	mov	r9, r2
 800c232:	690a      	ldr	r2, [r1, #16]
 800c234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c238:	429a      	cmp	r2, r3
 800c23a:	bfb8      	it	lt
 800c23c:	460b      	movlt	r3, r1
 800c23e:	460c      	mov	r4, r1
 800c240:	bfbc      	itt	lt
 800c242:	464c      	movlt	r4, r9
 800c244:	4699      	movlt	r9, r3
 800c246:	6927      	ldr	r7, [r4, #16]
 800c248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	6861      	ldr	r1, [r4, #4]
 800c250:	eb07 060a 	add.w	r6, r7, sl
 800c254:	42b3      	cmp	r3, r6
 800c256:	b085      	sub	sp, #20
 800c258:	bfb8      	it	lt
 800c25a:	3101      	addlt	r1, #1
 800c25c:	f7ff feda 	bl	800c014 <_Balloc>
 800c260:	b930      	cbnz	r0, 800c270 <__multiply+0x44>
 800c262:	4602      	mov	r2, r0
 800c264:	4b44      	ldr	r3, [pc, #272]	; (800c378 <__multiply+0x14c>)
 800c266:	4845      	ldr	r0, [pc, #276]	; (800c37c <__multiply+0x150>)
 800c268:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c26c:	f000 fe46 	bl	800cefc <__assert_func>
 800c270:	f100 0514 	add.w	r5, r0, #20
 800c274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c278:	462b      	mov	r3, r5
 800c27a:	2200      	movs	r2, #0
 800c27c:	4543      	cmp	r3, r8
 800c27e:	d321      	bcc.n	800c2c4 <__multiply+0x98>
 800c280:	f104 0314 	add.w	r3, r4, #20
 800c284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c288:	f109 0314 	add.w	r3, r9, #20
 800c28c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c290:	9202      	str	r2, [sp, #8]
 800c292:	1b3a      	subs	r2, r7, r4
 800c294:	3a15      	subs	r2, #21
 800c296:	f022 0203 	bic.w	r2, r2, #3
 800c29a:	3204      	adds	r2, #4
 800c29c:	f104 0115 	add.w	r1, r4, #21
 800c2a0:	428f      	cmp	r7, r1
 800c2a2:	bf38      	it	cc
 800c2a4:	2204      	movcc	r2, #4
 800c2a6:	9201      	str	r2, [sp, #4]
 800c2a8:	9a02      	ldr	r2, [sp, #8]
 800c2aa:	9303      	str	r3, [sp, #12]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d80c      	bhi.n	800c2ca <__multiply+0x9e>
 800c2b0:	2e00      	cmp	r6, #0
 800c2b2:	dd03      	ble.n	800c2bc <__multiply+0x90>
 800c2b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d05b      	beq.n	800c374 <__multiply+0x148>
 800c2bc:	6106      	str	r6, [r0, #16]
 800c2be:	b005      	add	sp, #20
 800c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c4:	f843 2b04 	str.w	r2, [r3], #4
 800c2c8:	e7d8      	b.n	800c27c <__multiply+0x50>
 800c2ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2ce:	f1ba 0f00 	cmp.w	sl, #0
 800c2d2:	d024      	beq.n	800c31e <__multiply+0xf2>
 800c2d4:	f104 0e14 	add.w	lr, r4, #20
 800c2d8:	46a9      	mov	r9, r5
 800c2da:	f04f 0c00 	mov.w	ip, #0
 800c2de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2e2:	f8d9 1000 	ldr.w	r1, [r9]
 800c2e6:	fa1f fb82 	uxth.w	fp, r2
 800c2ea:	b289      	uxth	r1, r1
 800c2ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2f4:	f8d9 2000 	ldr.w	r2, [r9]
 800c2f8:	4461      	add	r1, ip
 800c2fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800c302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c306:	b289      	uxth	r1, r1
 800c308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c30c:	4577      	cmp	r7, lr
 800c30e:	f849 1b04 	str.w	r1, [r9], #4
 800c312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c316:	d8e2      	bhi.n	800c2de <__multiply+0xb2>
 800c318:	9a01      	ldr	r2, [sp, #4]
 800c31a:	f845 c002 	str.w	ip, [r5, r2]
 800c31e:	9a03      	ldr	r2, [sp, #12]
 800c320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c324:	3304      	adds	r3, #4
 800c326:	f1b9 0f00 	cmp.w	r9, #0
 800c32a:	d021      	beq.n	800c370 <__multiply+0x144>
 800c32c:	6829      	ldr	r1, [r5, #0]
 800c32e:	f104 0c14 	add.w	ip, r4, #20
 800c332:	46ae      	mov	lr, r5
 800c334:	f04f 0a00 	mov.w	sl, #0
 800c338:	f8bc b000 	ldrh.w	fp, [ip]
 800c33c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c340:	fb09 220b 	mla	r2, r9, fp, r2
 800c344:	4452      	add	r2, sl
 800c346:	b289      	uxth	r1, r1
 800c348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c34c:	f84e 1b04 	str.w	r1, [lr], #4
 800c350:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c358:	f8be 1000 	ldrh.w	r1, [lr]
 800c35c:	fb09 110a 	mla	r1, r9, sl, r1
 800c360:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c364:	4567      	cmp	r7, ip
 800c366:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c36a:	d8e5      	bhi.n	800c338 <__multiply+0x10c>
 800c36c:	9a01      	ldr	r2, [sp, #4]
 800c36e:	50a9      	str	r1, [r5, r2]
 800c370:	3504      	adds	r5, #4
 800c372:	e799      	b.n	800c2a8 <__multiply+0x7c>
 800c374:	3e01      	subs	r6, #1
 800c376:	e79b      	b.n	800c2b0 <__multiply+0x84>
 800c378:	0800d47c 	.word	0x0800d47c
 800c37c:	0800d48d 	.word	0x0800d48d

0800c380 <__pow5mult>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4615      	mov	r5, r2
 800c386:	f012 0203 	ands.w	r2, r2, #3
 800c38a:	4606      	mov	r6, r0
 800c38c:	460f      	mov	r7, r1
 800c38e:	d007      	beq.n	800c3a0 <__pow5mult+0x20>
 800c390:	4c25      	ldr	r4, [pc, #148]	; (800c428 <__pow5mult+0xa8>)
 800c392:	3a01      	subs	r2, #1
 800c394:	2300      	movs	r3, #0
 800c396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c39a:	f7ff fe9d 	bl	800c0d8 <__multadd>
 800c39e:	4607      	mov	r7, r0
 800c3a0:	10ad      	asrs	r5, r5, #2
 800c3a2:	d03d      	beq.n	800c420 <__pow5mult+0xa0>
 800c3a4:	69f4      	ldr	r4, [r6, #28]
 800c3a6:	b97c      	cbnz	r4, 800c3c8 <__pow5mult+0x48>
 800c3a8:	2010      	movs	r0, #16
 800c3aa:	f7ff fd7f 	bl	800beac <malloc>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	61f0      	str	r0, [r6, #28]
 800c3b2:	b928      	cbnz	r0, 800c3c0 <__pow5mult+0x40>
 800c3b4:	4b1d      	ldr	r3, [pc, #116]	; (800c42c <__pow5mult+0xac>)
 800c3b6:	481e      	ldr	r0, [pc, #120]	; (800c430 <__pow5mult+0xb0>)
 800c3b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c3bc:	f000 fd9e 	bl	800cefc <__assert_func>
 800c3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3c4:	6004      	str	r4, [r0, #0]
 800c3c6:	60c4      	str	r4, [r0, #12]
 800c3c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3d0:	b94c      	cbnz	r4, 800c3e6 <__pow5mult+0x66>
 800c3d2:	f240 2171 	movw	r1, #625	; 0x271
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff ff12 	bl	800c200 <__i2b>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	07eb      	lsls	r3, r5, #31
 800c3ec:	d50a      	bpl.n	800c404 <__pow5mult+0x84>
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7ff ff1a 	bl	800c22c <__multiply>
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff fe49 	bl	800c094 <_Bfree>
 800c402:	4647      	mov	r7, r8
 800c404:	106d      	asrs	r5, r5, #1
 800c406:	d00b      	beq.n	800c420 <__pow5mult+0xa0>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	b938      	cbnz	r0, 800c41c <__pow5mult+0x9c>
 800c40c:	4622      	mov	r2, r4
 800c40e:	4621      	mov	r1, r4
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ff0b 	bl	800c22c <__multiply>
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	f8c0 9000 	str.w	r9, [r0]
 800c41c:	4604      	mov	r4, r0
 800c41e:	e7e4      	b.n	800c3ea <__pow5mult+0x6a>
 800c420:	4638      	mov	r0, r7
 800c422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c426:	bf00      	nop
 800c428:	0800d5d8 	.word	0x0800d5d8
 800c42c:	0800d40d 	.word	0x0800d40d
 800c430:	0800d48d 	.word	0x0800d48d

0800c434 <__lshift>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	460c      	mov	r4, r1
 800c43a:	6849      	ldr	r1, [r1, #4]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	4607      	mov	r7, r0
 800c446:	4691      	mov	r9, r2
 800c448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c44c:	f108 0601 	add.w	r6, r8, #1
 800c450:	42b3      	cmp	r3, r6
 800c452:	db0b      	blt.n	800c46c <__lshift+0x38>
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff fddd 	bl	800c014 <_Balloc>
 800c45a:	4605      	mov	r5, r0
 800c45c:	b948      	cbnz	r0, 800c472 <__lshift+0x3e>
 800c45e:	4602      	mov	r2, r0
 800c460:	4b28      	ldr	r3, [pc, #160]	; (800c504 <__lshift+0xd0>)
 800c462:	4829      	ldr	r0, [pc, #164]	; (800c508 <__lshift+0xd4>)
 800c464:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c468:	f000 fd48 	bl	800cefc <__assert_func>
 800c46c:	3101      	adds	r1, #1
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	e7ee      	b.n	800c450 <__lshift+0x1c>
 800c472:	2300      	movs	r3, #0
 800c474:	f100 0114 	add.w	r1, r0, #20
 800c478:	f100 0210 	add.w	r2, r0, #16
 800c47c:	4618      	mov	r0, r3
 800c47e:	4553      	cmp	r3, sl
 800c480:	db33      	blt.n	800c4ea <__lshift+0xb6>
 800c482:	6920      	ldr	r0, [r4, #16]
 800c484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c488:	f104 0314 	add.w	r3, r4, #20
 800c48c:	f019 091f 	ands.w	r9, r9, #31
 800c490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c498:	d02b      	beq.n	800c4f2 <__lshift+0xbe>
 800c49a:	f1c9 0e20 	rsb	lr, r9, #32
 800c49e:	468a      	mov	sl, r1
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	6818      	ldr	r0, [r3, #0]
 800c4a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c4a8:	4310      	orrs	r0, r2
 800c4aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c4ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b2:	459c      	cmp	ip, r3
 800c4b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4b8:	d8f3      	bhi.n	800c4a2 <__lshift+0x6e>
 800c4ba:	ebac 0304 	sub.w	r3, ip, r4
 800c4be:	3b15      	subs	r3, #21
 800c4c0:	f023 0303 	bic.w	r3, r3, #3
 800c4c4:	3304      	adds	r3, #4
 800c4c6:	f104 0015 	add.w	r0, r4, #21
 800c4ca:	4584      	cmp	ip, r0
 800c4cc:	bf38      	it	cc
 800c4ce:	2304      	movcc	r3, #4
 800c4d0:	50ca      	str	r2, [r1, r3]
 800c4d2:	b10a      	cbz	r2, 800c4d8 <__lshift+0xa4>
 800c4d4:	f108 0602 	add.w	r6, r8, #2
 800c4d8:	3e01      	subs	r6, #1
 800c4da:	4638      	mov	r0, r7
 800c4dc:	612e      	str	r6, [r5, #16]
 800c4de:	4621      	mov	r1, r4
 800c4e0:	f7ff fdd8 	bl	800c094 <_Bfree>
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	e7c5      	b.n	800c47e <__lshift+0x4a>
 800c4f2:	3904      	subs	r1, #4
 800c4f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4fc:	459c      	cmp	ip, r3
 800c4fe:	d8f9      	bhi.n	800c4f4 <__lshift+0xc0>
 800c500:	e7ea      	b.n	800c4d8 <__lshift+0xa4>
 800c502:	bf00      	nop
 800c504:	0800d47c 	.word	0x0800d47c
 800c508:	0800d48d 	.word	0x0800d48d

0800c50c <__mcmp>:
 800c50c:	b530      	push	{r4, r5, lr}
 800c50e:	6902      	ldr	r2, [r0, #16]
 800c510:	690c      	ldr	r4, [r1, #16]
 800c512:	1b12      	subs	r2, r2, r4
 800c514:	d10e      	bne.n	800c534 <__mcmp+0x28>
 800c516:	f100 0314 	add.w	r3, r0, #20
 800c51a:	3114      	adds	r1, #20
 800c51c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c520:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c524:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c528:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c52c:	42a5      	cmp	r5, r4
 800c52e:	d003      	beq.n	800c538 <__mcmp+0x2c>
 800c530:	d305      	bcc.n	800c53e <__mcmp+0x32>
 800c532:	2201      	movs	r2, #1
 800c534:	4610      	mov	r0, r2
 800c536:	bd30      	pop	{r4, r5, pc}
 800c538:	4283      	cmp	r3, r0
 800c53a:	d3f3      	bcc.n	800c524 <__mcmp+0x18>
 800c53c:	e7fa      	b.n	800c534 <__mcmp+0x28>
 800c53e:	f04f 32ff 	mov.w	r2, #4294967295
 800c542:	e7f7      	b.n	800c534 <__mcmp+0x28>

0800c544 <__mdiff>:
 800c544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	4606      	mov	r6, r0
 800c54c:	4611      	mov	r1, r2
 800c54e:	4620      	mov	r0, r4
 800c550:	4690      	mov	r8, r2
 800c552:	f7ff ffdb 	bl	800c50c <__mcmp>
 800c556:	1e05      	subs	r5, r0, #0
 800c558:	d110      	bne.n	800c57c <__mdiff+0x38>
 800c55a:	4629      	mov	r1, r5
 800c55c:	4630      	mov	r0, r6
 800c55e:	f7ff fd59 	bl	800c014 <_Balloc>
 800c562:	b930      	cbnz	r0, 800c572 <__mdiff+0x2e>
 800c564:	4b3a      	ldr	r3, [pc, #232]	; (800c650 <__mdiff+0x10c>)
 800c566:	4602      	mov	r2, r0
 800c568:	f240 2137 	movw	r1, #567	; 0x237
 800c56c:	4839      	ldr	r0, [pc, #228]	; (800c654 <__mdiff+0x110>)
 800c56e:	f000 fcc5 	bl	800cefc <__assert_func>
 800c572:	2301      	movs	r3, #1
 800c574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57c:	bfa4      	itt	ge
 800c57e:	4643      	movge	r3, r8
 800c580:	46a0      	movge	r8, r4
 800c582:	4630      	mov	r0, r6
 800c584:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c588:	bfa6      	itte	ge
 800c58a:	461c      	movge	r4, r3
 800c58c:	2500      	movge	r5, #0
 800c58e:	2501      	movlt	r5, #1
 800c590:	f7ff fd40 	bl	800c014 <_Balloc>
 800c594:	b920      	cbnz	r0, 800c5a0 <__mdiff+0x5c>
 800c596:	4b2e      	ldr	r3, [pc, #184]	; (800c650 <__mdiff+0x10c>)
 800c598:	4602      	mov	r2, r0
 800c59a:	f240 2145 	movw	r1, #581	; 0x245
 800c59e:	e7e5      	b.n	800c56c <__mdiff+0x28>
 800c5a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5a4:	6926      	ldr	r6, [r4, #16]
 800c5a6:	60c5      	str	r5, [r0, #12]
 800c5a8:	f104 0914 	add.w	r9, r4, #20
 800c5ac:	f108 0514 	add.w	r5, r8, #20
 800c5b0:	f100 0e14 	add.w	lr, r0, #20
 800c5b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5bc:	f108 0210 	add.w	r2, r8, #16
 800c5c0:	46f2      	mov	sl, lr
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5cc:	fa11 f88b 	uxtah	r8, r1, fp
 800c5d0:	b299      	uxth	r1, r3
 800c5d2:	0c1b      	lsrs	r3, r3, #16
 800c5d4:	eba8 0801 	sub.w	r8, r8, r1
 800c5d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5e0:	fa1f f888 	uxth.w	r8, r8
 800c5e4:	1419      	asrs	r1, r3, #16
 800c5e6:	454e      	cmp	r6, r9
 800c5e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c5f0:	d8e8      	bhi.n	800c5c4 <__mdiff+0x80>
 800c5f2:	1b33      	subs	r3, r6, r4
 800c5f4:	3b15      	subs	r3, #21
 800c5f6:	f023 0303 	bic.w	r3, r3, #3
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	3415      	adds	r4, #21
 800c5fe:	42a6      	cmp	r6, r4
 800c600:	bf38      	it	cc
 800c602:	2304      	movcc	r3, #4
 800c604:	441d      	add	r5, r3
 800c606:	4473      	add	r3, lr
 800c608:	469e      	mov	lr, r3
 800c60a:	462e      	mov	r6, r5
 800c60c:	4566      	cmp	r6, ip
 800c60e:	d30e      	bcc.n	800c62e <__mdiff+0xea>
 800c610:	f10c 0203 	add.w	r2, ip, #3
 800c614:	1b52      	subs	r2, r2, r5
 800c616:	f022 0203 	bic.w	r2, r2, #3
 800c61a:	3d03      	subs	r5, #3
 800c61c:	45ac      	cmp	ip, r5
 800c61e:	bf38      	it	cc
 800c620:	2200      	movcc	r2, #0
 800c622:	4413      	add	r3, r2
 800c624:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c628:	b17a      	cbz	r2, 800c64a <__mdiff+0x106>
 800c62a:	6107      	str	r7, [r0, #16]
 800c62c:	e7a4      	b.n	800c578 <__mdiff+0x34>
 800c62e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c632:	fa11 f288 	uxtah	r2, r1, r8
 800c636:	1414      	asrs	r4, r2, #16
 800c638:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c63c:	b292      	uxth	r2, r2
 800c63e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c642:	f84e 2b04 	str.w	r2, [lr], #4
 800c646:	1421      	asrs	r1, r4, #16
 800c648:	e7e0      	b.n	800c60c <__mdiff+0xc8>
 800c64a:	3f01      	subs	r7, #1
 800c64c:	e7ea      	b.n	800c624 <__mdiff+0xe0>
 800c64e:	bf00      	nop
 800c650:	0800d47c 	.word	0x0800d47c
 800c654:	0800d48d 	.word	0x0800d48d

0800c658 <__d2b>:
 800c658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c65c:	460f      	mov	r7, r1
 800c65e:	2101      	movs	r1, #1
 800c660:	ec59 8b10 	vmov	r8, r9, d0
 800c664:	4616      	mov	r6, r2
 800c666:	f7ff fcd5 	bl	800c014 <_Balloc>
 800c66a:	4604      	mov	r4, r0
 800c66c:	b930      	cbnz	r0, 800c67c <__d2b+0x24>
 800c66e:	4602      	mov	r2, r0
 800c670:	4b24      	ldr	r3, [pc, #144]	; (800c704 <__d2b+0xac>)
 800c672:	4825      	ldr	r0, [pc, #148]	; (800c708 <__d2b+0xb0>)
 800c674:	f240 310f 	movw	r1, #783	; 0x30f
 800c678:	f000 fc40 	bl	800cefc <__assert_func>
 800c67c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c684:	bb2d      	cbnz	r5, 800c6d2 <__d2b+0x7a>
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	f1b8 0300 	subs.w	r3, r8, #0
 800c68c:	d026      	beq.n	800c6dc <__d2b+0x84>
 800c68e:	4668      	mov	r0, sp
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	f7ff fd87 	bl	800c1a4 <__lo0bits>
 800c696:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c69a:	b1e8      	cbz	r0, 800c6d8 <__d2b+0x80>
 800c69c:	f1c0 0320 	rsb	r3, r0, #32
 800c6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	40c2      	lsrs	r2, r0
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	9201      	str	r2, [sp, #4]
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	61a3      	str	r3, [r4, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	bf14      	ite	ne
 800c6b4:	2202      	movne	r2, #2
 800c6b6:	2201      	moveq	r2, #1
 800c6b8:	6122      	str	r2, [r4, #16]
 800c6ba:	b1bd      	cbz	r5, 800c6ec <__d2b+0x94>
 800c6bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6c0:	4405      	add	r5, r0
 800c6c2:	603d      	str	r5, [r7, #0]
 800c6c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6c8:	6030      	str	r0, [r6, #0]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	b003      	add	sp, #12
 800c6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6d6:	e7d6      	b.n	800c686 <__d2b+0x2e>
 800c6d8:	6161      	str	r1, [r4, #20]
 800c6da:	e7e7      	b.n	800c6ac <__d2b+0x54>
 800c6dc:	a801      	add	r0, sp, #4
 800c6de:	f7ff fd61 	bl	800c1a4 <__lo0bits>
 800c6e2:	9b01      	ldr	r3, [sp, #4]
 800c6e4:	6163      	str	r3, [r4, #20]
 800c6e6:	3020      	adds	r0, #32
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	e7e5      	b.n	800c6b8 <__d2b+0x60>
 800c6ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6f4:	6038      	str	r0, [r7, #0]
 800c6f6:	6918      	ldr	r0, [r3, #16]
 800c6f8:	f7ff fd34 	bl	800c164 <__hi0bits>
 800c6fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c700:	e7e2      	b.n	800c6c8 <__d2b+0x70>
 800c702:	bf00      	nop
 800c704:	0800d47c 	.word	0x0800d47c
 800c708:	0800d48d 	.word	0x0800d48d

0800c70c <__ssputs_r>:
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c710:	688e      	ldr	r6, [r1, #8]
 800c712:	461f      	mov	r7, r3
 800c714:	42be      	cmp	r6, r7
 800c716:	680b      	ldr	r3, [r1, #0]
 800c718:	4682      	mov	sl, r0
 800c71a:	460c      	mov	r4, r1
 800c71c:	4690      	mov	r8, r2
 800c71e:	d82c      	bhi.n	800c77a <__ssputs_r+0x6e>
 800c720:	898a      	ldrh	r2, [r1, #12]
 800c722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c726:	d026      	beq.n	800c776 <__ssputs_r+0x6a>
 800c728:	6965      	ldr	r5, [r4, #20]
 800c72a:	6909      	ldr	r1, [r1, #16]
 800c72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c730:	eba3 0901 	sub.w	r9, r3, r1
 800c734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c738:	1c7b      	adds	r3, r7, #1
 800c73a:	444b      	add	r3, r9
 800c73c:	106d      	asrs	r5, r5, #1
 800c73e:	429d      	cmp	r5, r3
 800c740:	bf38      	it	cc
 800c742:	461d      	movcc	r5, r3
 800c744:	0553      	lsls	r3, r2, #21
 800c746:	d527      	bpl.n	800c798 <__ssputs_r+0x8c>
 800c748:	4629      	mov	r1, r5
 800c74a:	f7ff fbd7 	bl	800befc <_malloc_r>
 800c74e:	4606      	mov	r6, r0
 800c750:	b360      	cbz	r0, 800c7ac <__ssputs_r+0xa0>
 800c752:	6921      	ldr	r1, [r4, #16]
 800c754:	464a      	mov	r2, r9
 800c756:	f7fe fcd3 	bl	800b100 <memcpy>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c764:	81a3      	strh	r3, [r4, #12]
 800c766:	6126      	str	r6, [r4, #16]
 800c768:	6165      	str	r5, [r4, #20]
 800c76a:	444e      	add	r6, r9
 800c76c:	eba5 0509 	sub.w	r5, r5, r9
 800c770:	6026      	str	r6, [r4, #0]
 800c772:	60a5      	str	r5, [r4, #8]
 800c774:	463e      	mov	r6, r7
 800c776:	42be      	cmp	r6, r7
 800c778:	d900      	bls.n	800c77c <__ssputs_r+0x70>
 800c77a:	463e      	mov	r6, r7
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	4632      	mov	r2, r6
 800c780:	4641      	mov	r1, r8
 800c782:	f000 fb6f 	bl	800ce64 <memmove>
 800c786:	68a3      	ldr	r3, [r4, #8]
 800c788:	1b9b      	subs	r3, r3, r6
 800c78a:	60a3      	str	r3, [r4, #8]
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	4433      	add	r3, r6
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	2000      	movs	r0, #0
 800c794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c798:	462a      	mov	r2, r5
 800c79a:	f000 fbf5 	bl	800cf88 <_realloc_r>
 800c79e:	4606      	mov	r6, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d1e0      	bne.n	800c766 <__ssputs_r+0x5a>
 800c7a4:	6921      	ldr	r1, [r4, #16]
 800c7a6:	4650      	mov	r0, sl
 800c7a8:	f7ff fb34 	bl	800be14 <_free_r>
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	f8ca 3000 	str.w	r3, [sl]
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c7be:	e7e9      	b.n	800c794 <__ssputs_r+0x88>

0800c7c0 <_svfiprintf_r>:
 800c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c4:	4698      	mov	r8, r3
 800c7c6:	898b      	ldrh	r3, [r1, #12]
 800c7c8:	061b      	lsls	r3, r3, #24
 800c7ca:	b09d      	sub	sp, #116	; 0x74
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	d50e      	bpl.n	800c7f2 <_svfiprintf_r+0x32>
 800c7d4:	690b      	ldr	r3, [r1, #16]
 800c7d6:	b963      	cbnz	r3, 800c7f2 <_svfiprintf_r+0x32>
 800c7d8:	2140      	movs	r1, #64	; 0x40
 800c7da:	f7ff fb8f 	bl	800befc <_malloc_r>
 800c7de:	6028      	str	r0, [r5, #0]
 800c7e0:	6128      	str	r0, [r5, #16]
 800c7e2:	b920      	cbnz	r0, 800c7ee <_svfiprintf_r+0x2e>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	e0d0      	b.n	800c990 <_svfiprintf_r+0x1d0>
 800c7ee:	2340      	movs	r3, #64	; 0x40
 800c7f0:	616b      	str	r3, [r5, #20]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f6:	2320      	movs	r3, #32
 800c7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c800:	2330      	movs	r3, #48	; 0x30
 800c802:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c9a8 <_svfiprintf_r+0x1e8>
 800c806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c80a:	f04f 0901 	mov.w	r9, #1
 800c80e:	4623      	mov	r3, r4
 800c810:	469a      	mov	sl, r3
 800c812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c816:	b10a      	cbz	r2, 800c81c <_svfiprintf_r+0x5c>
 800c818:	2a25      	cmp	r2, #37	; 0x25
 800c81a:	d1f9      	bne.n	800c810 <_svfiprintf_r+0x50>
 800c81c:	ebba 0b04 	subs.w	fp, sl, r4
 800c820:	d00b      	beq.n	800c83a <_svfiprintf_r+0x7a>
 800c822:	465b      	mov	r3, fp
 800c824:	4622      	mov	r2, r4
 800c826:	4629      	mov	r1, r5
 800c828:	4638      	mov	r0, r7
 800c82a:	f7ff ff6f 	bl	800c70c <__ssputs_r>
 800c82e:	3001      	adds	r0, #1
 800c830:	f000 80a9 	beq.w	800c986 <_svfiprintf_r+0x1c6>
 800c834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c836:	445a      	add	r2, fp
 800c838:	9209      	str	r2, [sp, #36]	; 0x24
 800c83a:	f89a 3000 	ldrb.w	r3, [sl]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 80a1 	beq.w	800c986 <_svfiprintf_r+0x1c6>
 800c844:	2300      	movs	r3, #0
 800c846:	f04f 32ff 	mov.w	r2, #4294967295
 800c84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c84e:	f10a 0a01 	add.w	sl, sl, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	9307      	str	r3, [sp, #28]
 800c856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c85a:	931a      	str	r3, [sp, #104]	; 0x68
 800c85c:	4654      	mov	r4, sl
 800c85e:	2205      	movs	r2, #5
 800c860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c864:	4850      	ldr	r0, [pc, #320]	; (800c9a8 <_svfiprintf_r+0x1e8>)
 800c866:	f7f3 fcc3 	bl	80001f0 <memchr>
 800c86a:	9a04      	ldr	r2, [sp, #16]
 800c86c:	b9d8      	cbnz	r0, 800c8a6 <_svfiprintf_r+0xe6>
 800c86e:	06d0      	lsls	r0, r2, #27
 800c870:	bf44      	itt	mi
 800c872:	2320      	movmi	r3, #32
 800c874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c878:	0711      	lsls	r1, r2, #28
 800c87a:	bf44      	itt	mi
 800c87c:	232b      	movmi	r3, #43	; 0x2b
 800c87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c882:	f89a 3000 	ldrb.w	r3, [sl]
 800c886:	2b2a      	cmp	r3, #42	; 0x2a
 800c888:	d015      	beq.n	800c8b6 <_svfiprintf_r+0xf6>
 800c88a:	9a07      	ldr	r2, [sp, #28]
 800c88c:	4654      	mov	r4, sl
 800c88e:	2000      	movs	r0, #0
 800c890:	f04f 0c0a 	mov.w	ip, #10
 800c894:	4621      	mov	r1, r4
 800c896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c89a:	3b30      	subs	r3, #48	; 0x30
 800c89c:	2b09      	cmp	r3, #9
 800c89e:	d94d      	bls.n	800c93c <_svfiprintf_r+0x17c>
 800c8a0:	b1b0      	cbz	r0, 800c8d0 <_svfiprintf_r+0x110>
 800c8a2:	9207      	str	r2, [sp, #28]
 800c8a4:	e014      	b.n	800c8d0 <_svfiprintf_r+0x110>
 800c8a6:	eba0 0308 	sub.w	r3, r0, r8
 800c8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	46a2      	mov	sl, r4
 800c8b4:	e7d2      	b.n	800c85c <_svfiprintf_r+0x9c>
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	1d19      	adds	r1, r3, #4
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	9103      	str	r1, [sp, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfbb      	ittet	lt
 800c8c2:	425b      	neglt	r3, r3
 800c8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8c8:	9307      	strge	r3, [sp, #28]
 800c8ca:	9307      	strlt	r3, [sp, #28]
 800c8cc:	bfb8      	it	lt
 800c8ce:	9204      	strlt	r2, [sp, #16]
 800c8d0:	7823      	ldrb	r3, [r4, #0]
 800c8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d4:	d10c      	bne.n	800c8f0 <_svfiprintf_r+0x130>
 800c8d6:	7863      	ldrb	r3, [r4, #1]
 800c8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8da:	d134      	bne.n	800c946 <_svfiprintf_r+0x186>
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	1d1a      	adds	r2, r3, #4
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	9203      	str	r2, [sp, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bfb8      	it	lt
 800c8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8ec:	3402      	adds	r4, #2
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9b8 <_svfiprintf_r+0x1f8>
 800c8f4:	7821      	ldrb	r1, [r4, #0]
 800c8f6:	2203      	movs	r2, #3
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	f7f3 fc79 	bl	80001f0 <memchr>
 800c8fe:	b138      	cbz	r0, 800c910 <_svfiprintf_r+0x150>
 800c900:	9b04      	ldr	r3, [sp, #16]
 800c902:	eba0 000a 	sub.w	r0, r0, sl
 800c906:	2240      	movs	r2, #64	; 0x40
 800c908:	4082      	lsls	r2, r0
 800c90a:	4313      	orrs	r3, r2
 800c90c:	3401      	adds	r4, #1
 800c90e:	9304      	str	r3, [sp, #16]
 800c910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c914:	4825      	ldr	r0, [pc, #148]	; (800c9ac <_svfiprintf_r+0x1ec>)
 800c916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c91a:	2206      	movs	r2, #6
 800c91c:	f7f3 fc68 	bl	80001f0 <memchr>
 800c920:	2800      	cmp	r0, #0
 800c922:	d038      	beq.n	800c996 <_svfiprintf_r+0x1d6>
 800c924:	4b22      	ldr	r3, [pc, #136]	; (800c9b0 <_svfiprintf_r+0x1f0>)
 800c926:	bb1b      	cbnz	r3, 800c970 <_svfiprintf_r+0x1b0>
 800c928:	9b03      	ldr	r3, [sp, #12]
 800c92a:	3307      	adds	r3, #7
 800c92c:	f023 0307 	bic.w	r3, r3, #7
 800c930:	3308      	adds	r3, #8
 800c932:	9303      	str	r3, [sp, #12]
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	4433      	add	r3, r6
 800c938:	9309      	str	r3, [sp, #36]	; 0x24
 800c93a:	e768      	b.n	800c80e <_svfiprintf_r+0x4e>
 800c93c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c940:	460c      	mov	r4, r1
 800c942:	2001      	movs	r0, #1
 800c944:	e7a6      	b.n	800c894 <_svfiprintf_r+0xd4>
 800c946:	2300      	movs	r3, #0
 800c948:	3401      	adds	r4, #1
 800c94a:	9305      	str	r3, [sp, #20]
 800c94c:	4619      	mov	r1, r3
 800c94e:	f04f 0c0a 	mov.w	ip, #10
 800c952:	4620      	mov	r0, r4
 800c954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c958:	3a30      	subs	r2, #48	; 0x30
 800c95a:	2a09      	cmp	r2, #9
 800c95c:	d903      	bls.n	800c966 <_svfiprintf_r+0x1a6>
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0c6      	beq.n	800c8f0 <_svfiprintf_r+0x130>
 800c962:	9105      	str	r1, [sp, #20]
 800c964:	e7c4      	b.n	800c8f0 <_svfiprintf_r+0x130>
 800c966:	fb0c 2101 	mla	r1, ip, r1, r2
 800c96a:	4604      	mov	r4, r0
 800c96c:	2301      	movs	r3, #1
 800c96e:	e7f0      	b.n	800c952 <_svfiprintf_r+0x192>
 800c970:	ab03      	add	r3, sp, #12
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	462a      	mov	r2, r5
 800c976:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <_svfiprintf_r+0x1f4>)
 800c978:	a904      	add	r1, sp, #16
 800c97a:	4638      	mov	r0, r7
 800c97c:	f7fd fcde 	bl	800a33c <_printf_float>
 800c980:	1c42      	adds	r2, r0, #1
 800c982:	4606      	mov	r6, r0
 800c984:	d1d6      	bne.n	800c934 <_svfiprintf_r+0x174>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	065b      	lsls	r3, r3, #25
 800c98a:	f53f af2d 	bmi.w	800c7e8 <_svfiprintf_r+0x28>
 800c98e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c990:	b01d      	add	sp, #116	; 0x74
 800c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	ab03      	add	r3, sp, #12
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	462a      	mov	r2, r5
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <_svfiprintf_r+0x1f4>)
 800c99e:	a904      	add	r1, sp, #16
 800c9a0:	4638      	mov	r0, r7
 800c9a2:	f7fd ff6f 	bl	800a884 <_printf_i>
 800c9a6:	e7eb      	b.n	800c980 <_svfiprintf_r+0x1c0>
 800c9a8:	0800d5e4 	.word	0x0800d5e4
 800c9ac:	0800d5ee 	.word	0x0800d5ee
 800c9b0:	0800a33d 	.word	0x0800a33d
 800c9b4:	0800c70d 	.word	0x0800c70d
 800c9b8:	0800d5ea 	.word	0x0800d5ea

0800c9bc <__sfputc_r>:
 800c9bc:	6893      	ldr	r3, [r2, #8]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	b410      	push	{r4}
 800c9c4:	6093      	str	r3, [r2, #8]
 800c9c6:	da08      	bge.n	800c9da <__sfputc_r+0x1e>
 800c9c8:	6994      	ldr	r4, [r2, #24]
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	db01      	blt.n	800c9d2 <__sfputc_r+0x16>
 800c9ce:	290a      	cmp	r1, #10
 800c9d0:	d103      	bne.n	800c9da <__sfputc_r+0x1e>
 800c9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9d6:	f7fe ba0c 	b.w	800adf2 <__swbuf_r>
 800c9da:	6813      	ldr	r3, [r2, #0]
 800c9dc:	1c58      	adds	r0, r3, #1
 800c9de:	6010      	str	r0, [r2, #0]
 800c9e0:	7019      	strb	r1, [r3, #0]
 800c9e2:	4608      	mov	r0, r1
 800c9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <__sfputs_r>:
 800c9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	4614      	mov	r4, r2
 800c9f2:	18d5      	adds	r5, r2, r3
 800c9f4:	42ac      	cmp	r4, r5
 800c9f6:	d101      	bne.n	800c9fc <__sfputs_r+0x12>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e007      	b.n	800ca0c <__sfputs_r+0x22>
 800c9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca00:	463a      	mov	r2, r7
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7ff ffda 	bl	800c9bc <__sfputc_r>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d1f3      	bne.n	800c9f4 <__sfputs_r+0xa>
 800ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca10 <_vfiprintf_r>:
 800ca10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	460d      	mov	r5, r1
 800ca16:	b09d      	sub	sp, #116	; 0x74
 800ca18:	4614      	mov	r4, r2
 800ca1a:	4698      	mov	r8, r3
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	b118      	cbz	r0, 800ca28 <_vfiprintf_r+0x18>
 800ca20:	6a03      	ldr	r3, [r0, #32]
 800ca22:	b90b      	cbnz	r3, 800ca28 <_vfiprintf_r+0x18>
 800ca24:	f7fe f8ca 	bl	800abbc <__sinit>
 800ca28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2a:	07d9      	lsls	r1, r3, #31
 800ca2c:	d405      	bmi.n	800ca3a <_vfiprintf_r+0x2a>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	059a      	lsls	r2, r3, #22
 800ca32:	d402      	bmi.n	800ca3a <_vfiprintf_r+0x2a>
 800ca34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca36:	f7fe fb59 	bl	800b0ec <__retarget_lock_acquire_recursive>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	071b      	lsls	r3, r3, #28
 800ca3e:	d501      	bpl.n	800ca44 <_vfiprintf_r+0x34>
 800ca40:	692b      	ldr	r3, [r5, #16]
 800ca42:	b99b      	cbnz	r3, 800ca6c <_vfiprintf_r+0x5c>
 800ca44:	4629      	mov	r1, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7fe fa10 	bl	800ae6c <__swsetup_r>
 800ca4c:	b170      	cbz	r0, 800ca6c <_vfiprintf_r+0x5c>
 800ca4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca50:	07dc      	lsls	r4, r3, #31
 800ca52:	d504      	bpl.n	800ca5e <_vfiprintf_r+0x4e>
 800ca54:	f04f 30ff 	mov.w	r0, #4294967295
 800ca58:	b01d      	add	sp, #116	; 0x74
 800ca5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5e:	89ab      	ldrh	r3, [r5, #12]
 800ca60:	0598      	lsls	r0, r3, #22
 800ca62:	d4f7      	bmi.n	800ca54 <_vfiprintf_r+0x44>
 800ca64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca66:	f7fe fb42 	bl	800b0ee <__retarget_lock_release_recursive>
 800ca6a:	e7f3      	b.n	800ca54 <_vfiprintf_r+0x44>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca70:	2320      	movs	r3, #32
 800ca72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca7a:	2330      	movs	r3, #48	; 0x30
 800ca7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc30 <_vfiprintf_r+0x220>
 800ca80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca84:	f04f 0901 	mov.w	r9, #1
 800ca88:	4623      	mov	r3, r4
 800ca8a:	469a      	mov	sl, r3
 800ca8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca90:	b10a      	cbz	r2, 800ca96 <_vfiprintf_r+0x86>
 800ca92:	2a25      	cmp	r2, #37	; 0x25
 800ca94:	d1f9      	bne.n	800ca8a <_vfiprintf_r+0x7a>
 800ca96:	ebba 0b04 	subs.w	fp, sl, r4
 800ca9a:	d00b      	beq.n	800cab4 <_vfiprintf_r+0xa4>
 800ca9c:	465b      	mov	r3, fp
 800ca9e:	4622      	mov	r2, r4
 800caa0:	4629      	mov	r1, r5
 800caa2:	4630      	mov	r0, r6
 800caa4:	f7ff ffa1 	bl	800c9ea <__sfputs_r>
 800caa8:	3001      	adds	r0, #1
 800caaa:	f000 80a9 	beq.w	800cc00 <_vfiprintf_r+0x1f0>
 800caae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab0:	445a      	add	r2, fp
 800cab2:	9209      	str	r2, [sp, #36]	; 0x24
 800cab4:	f89a 3000 	ldrb.w	r3, [sl]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 80a1 	beq.w	800cc00 <_vfiprintf_r+0x1f0>
 800cabe:	2300      	movs	r3, #0
 800cac0:	f04f 32ff 	mov.w	r2, #4294967295
 800cac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cac8:	f10a 0a01 	add.w	sl, sl, #1
 800cacc:	9304      	str	r3, [sp, #16]
 800cace:	9307      	str	r3, [sp, #28]
 800cad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cad4:	931a      	str	r3, [sp, #104]	; 0x68
 800cad6:	4654      	mov	r4, sl
 800cad8:	2205      	movs	r2, #5
 800cada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cade:	4854      	ldr	r0, [pc, #336]	; (800cc30 <_vfiprintf_r+0x220>)
 800cae0:	f7f3 fb86 	bl	80001f0 <memchr>
 800cae4:	9a04      	ldr	r2, [sp, #16]
 800cae6:	b9d8      	cbnz	r0, 800cb20 <_vfiprintf_r+0x110>
 800cae8:	06d1      	lsls	r1, r2, #27
 800caea:	bf44      	itt	mi
 800caec:	2320      	movmi	r3, #32
 800caee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf2:	0713      	lsls	r3, r2, #28
 800caf4:	bf44      	itt	mi
 800caf6:	232b      	movmi	r3, #43	; 0x2b
 800caf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cafc:	f89a 3000 	ldrb.w	r3, [sl]
 800cb00:	2b2a      	cmp	r3, #42	; 0x2a
 800cb02:	d015      	beq.n	800cb30 <_vfiprintf_r+0x120>
 800cb04:	9a07      	ldr	r2, [sp, #28]
 800cb06:	4654      	mov	r4, sl
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f04f 0c0a 	mov.w	ip, #10
 800cb0e:	4621      	mov	r1, r4
 800cb10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb14:	3b30      	subs	r3, #48	; 0x30
 800cb16:	2b09      	cmp	r3, #9
 800cb18:	d94d      	bls.n	800cbb6 <_vfiprintf_r+0x1a6>
 800cb1a:	b1b0      	cbz	r0, 800cb4a <_vfiprintf_r+0x13a>
 800cb1c:	9207      	str	r2, [sp, #28]
 800cb1e:	e014      	b.n	800cb4a <_vfiprintf_r+0x13a>
 800cb20:	eba0 0308 	sub.w	r3, r0, r8
 800cb24:	fa09 f303 	lsl.w	r3, r9, r3
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	46a2      	mov	sl, r4
 800cb2e:	e7d2      	b.n	800cad6 <_vfiprintf_r+0xc6>
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	1d19      	adds	r1, r3, #4
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	9103      	str	r1, [sp, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	bfbb      	ittet	lt
 800cb3c:	425b      	neglt	r3, r3
 800cb3e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb42:	9307      	strge	r3, [sp, #28]
 800cb44:	9307      	strlt	r3, [sp, #28]
 800cb46:	bfb8      	it	lt
 800cb48:	9204      	strlt	r2, [sp, #16]
 800cb4a:	7823      	ldrb	r3, [r4, #0]
 800cb4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb4e:	d10c      	bne.n	800cb6a <_vfiprintf_r+0x15a>
 800cb50:	7863      	ldrb	r3, [r4, #1]
 800cb52:	2b2a      	cmp	r3, #42	; 0x2a
 800cb54:	d134      	bne.n	800cbc0 <_vfiprintf_r+0x1b0>
 800cb56:	9b03      	ldr	r3, [sp, #12]
 800cb58:	1d1a      	adds	r2, r3, #4
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	9203      	str	r2, [sp, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bfb8      	it	lt
 800cb62:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb66:	3402      	adds	r4, #2
 800cb68:	9305      	str	r3, [sp, #20]
 800cb6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc40 <_vfiprintf_r+0x230>
 800cb6e:	7821      	ldrb	r1, [r4, #0]
 800cb70:	2203      	movs	r2, #3
 800cb72:	4650      	mov	r0, sl
 800cb74:	f7f3 fb3c 	bl	80001f0 <memchr>
 800cb78:	b138      	cbz	r0, 800cb8a <_vfiprintf_r+0x17a>
 800cb7a:	9b04      	ldr	r3, [sp, #16]
 800cb7c:	eba0 000a 	sub.w	r0, r0, sl
 800cb80:	2240      	movs	r2, #64	; 0x40
 800cb82:	4082      	lsls	r2, r0
 800cb84:	4313      	orrs	r3, r2
 800cb86:	3401      	adds	r4, #1
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8e:	4829      	ldr	r0, [pc, #164]	; (800cc34 <_vfiprintf_r+0x224>)
 800cb90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb94:	2206      	movs	r2, #6
 800cb96:	f7f3 fb2b 	bl	80001f0 <memchr>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d03f      	beq.n	800cc1e <_vfiprintf_r+0x20e>
 800cb9e:	4b26      	ldr	r3, [pc, #152]	; (800cc38 <_vfiprintf_r+0x228>)
 800cba0:	bb1b      	cbnz	r3, 800cbea <_vfiprintf_r+0x1da>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	3307      	adds	r3, #7
 800cba6:	f023 0307 	bic.w	r3, r3, #7
 800cbaa:	3308      	adds	r3, #8
 800cbac:	9303      	str	r3, [sp, #12]
 800cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb0:	443b      	add	r3, r7
 800cbb2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb4:	e768      	b.n	800ca88 <_vfiprintf_r+0x78>
 800cbb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbba:	460c      	mov	r4, r1
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	e7a6      	b.n	800cb0e <_vfiprintf_r+0xfe>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	3401      	adds	r4, #1
 800cbc4:	9305      	str	r3, [sp, #20]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	f04f 0c0a 	mov.w	ip, #10
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd2:	3a30      	subs	r2, #48	; 0x30
 800cbd4:	2a09      	cmp	r2, #9
 800cbd6:	d903      	bls.n	800cbe0 <_vfiprintf_r+0x1d0>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0c6      	beq.n	800cb6a <_vfiprintf_r+0x15a>
 800cbdc:	9105      	str	r1, [sp, #20]
 800cbde:	e7c4      	b.n	800cb6a <_vfiprintf_r+0x15a>
 800cbe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e7f0      	b.n	800cbcc <_vfiprintf_r+0x1bc>
 800cbea:	ab03      	add	r3, sp, #12
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <_vfiprintf_r+0x22c>)
 800cbf2:	a904      	add	r1, sp, #16
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7fd fba1 	bl	800a33c <_printf_float>
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	1c78      	adds	r0, r7, #1
 800cbfe:	d1d6      	bne.n	800cbae <_vfiprintf_r+0x19e>
 800cc00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc02:	07d9      	lsls	r1, r3, #31
 800cc04:	d405      	bmi.n	800cc12 <_vfiprintf_r+0x202>
 800cc06:	89ab      	ldrh	r3, [r5, #12]
 800cc08:	059a      	lsls	r2, r3, #22
 800cc0a:	d402      	bmi.n	800cc12 <_vfiprintf_r+0x202>
 800cc0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc0e:	f7fe fa6e 	bl	800b0ee <__retarget_lock_release_recursive>
 800cc12:	89ab      	ldrh	r3, [r5, #12]
 800cc14:	065b      	lsls	r3, r3, #25
 800cc16:	f53f af1d 	bmi.w	800ca54 <_vfiprintf_r+0x44>
 800cc1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc1c:	e71c      	b.n	800ca58 <_vfiprintf_r+0x48>
 800cc1e:	ab03      	add	r3, sp, #12
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	462a      	mov	r2, r5
 800cc24:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <_vfiprintf_r+0x22c>)
 800cc26:	a904      	add	r1, sp, #16
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7fd fe2b 	bl	800a884 <_printf_i>
 800cc2e:	e7e4      	b.n	800cbfa <_vfiprintf_r+0x1ea>
 800cc30:	0800d5e4 	.word	0x0800d5e4
 800cc34:	0800d5ee 	.word	0x0800d5ee
 800cc38:	0800a33d 	.word	0x0800a33d
 800cc3c:	0800c9eb 	.word	0x0800c9eb
 800cc40:	0800d5ea 	.word	0x0800d5ea

0800cc44 <__sflush_r>:
 800cc44:	898a      	ldrh	r2, [r1, #12]
 800cc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	0710      	lsls	r0, r2, #28
 800cc4e:	460c      	mov	r4, r1
 800cc50:	d458      	bmi.n	800cd04 <__sflush_r+0xc0>
 800cc52:	684b      	ldr	r3, [r1, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	dc05      	bgt.n	800cc64 <__sflush_r+0x20>
 800cc58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	dc02      	bgt.n	800cc64 <__sflush_r+0x20>
 800cc5e:	2000      	movs	r0, #0
 800cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc66:	2e00      	cmp	r6, #0
 800cc68:	d0f9      	beq.n	800cc5e <__sflush_r+0x1a>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc70:	682f      	ldr	r7, [r5, #0]
 800cc72:	6a21      	ldr	r1, [r4, #32]
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	d032      	beq.n	800ccde <__sflush_r+0x9a>
 800cc78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	075a      	lsls	r2, r3, #29
 800cc7e:	d505      	bpl.n	800cc8c <__sflush_r+0x48>
 800cc80:	6863      	ldr	r3, [r4, #4]
 800cc82:	1ac0      	subs	r0, r0, r3
 800cc84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc86:	b10b      	cbz	r3, 800cc8c <__sflush_r+0x48>
 800cc88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8a:	1ac0      	subs	r0, r0, r3
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4602      	mov	r2, r0
 800cc90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc92:	6a21      	ldr	r1, [r4, #32]
 800cc94:	4628      	mov	r0, r5
 800cc96:	47b0      	blx	r6
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	d106      	bne.n	800ccac <__sflush_r+0x68>
 800cc9e:	6829      	ldr	r1, [r5, #0]
 800cca0:	291d      	cmp	r1, #29
 800cca2:	d82b      	bhi.n	800ccfc <__sflush_r+0xb8>
 800cca4:	4a29      	ldr	r2, [pc, #164]	; (800cd4c <__sflush_r+0x108>)
 800cca6:	410a      	asrs	r2, r1
 800cca8:	07d6      	lsls	r6, r2, #31
 800ccaa:	d427      	bmi.n	800ccfc <__sflush_r+0xb8>
 800ccac:	2200      	movs	r2, #0
 800ccae:	6062      	str	r2, [r4, #4]
 800ccb0:	04d9      	lsls	r1, r3, #19
 800ccb2:	6922      	ldr	r2, [r4, #16]
 800ccb4:	6022      	str	r2, [r4, #0]
 800ccb6:	d504      	bpl.n	800ccc2 <__sflush_r+0x7e>
 800ccb8:	1c42      	adds	r2, r0, #1
 800ccba:	d101      	bne.n	800ccc0 <__sflush_r+0x7c>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b903      	cbnz	r3, 800ccc2 <__sflush_r+0x7e>
 800ccc0:	6560      	str	r0, [r4, #84]	; 0x54
 800ccc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccc4:	602f      	str	r7, [r5, #0]
 800ccc6:	2900      	cmp	r1, #0
 800ccc8:	d0c9      	beq.n	800cc5e <__sflush_r+0x1a>
 800ccca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccce:	4299      	cmp	r1, r3
 800ccd0:	d002      	beq.n	800ccd8 <__sflush_r+0x94>
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	f7ff f89e 	bl	800be14 <_free_r>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	6360      	str	r0, [r4, #52]	; 0x34
 800ccdc:	e7c0      	b.n	800cc60 <__sflush_r+0x1c>
 800ccde:	2301      	movs	r3, #1
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b0      	blx	r6
 800cce4:	1c41      	adds	r1, r0, #1
 800cce6:	d1c8      	bne.n	800cc7a <__sflush_r+0x36>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0c5      	beq.n	800cc7a <__sflush_r+0x36>
 800ccee:	2b1d      	cmp	r3, #29
 800ccf0:	d001      	beq.n	800ccf6 <__sflush_r+0xb2>
 800ccf2:	2b16      	cmp	r3, #22
 800ccf4:	d101      	bne.n	800ccfa <__sflush_r+0xb6>
 800ccf6:	602f      	str	r7, [r5, #0]
 800ccf8:	e7b1      	b.n	800cc5e <__sflush_r+0x1a>
 800ccfa:	89a3      	ldrh	r3, [r4, #12]
 800ccfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd00:	81a3      	strh	r3, [r4, #12]
 800cd02:	e7ad      	b.n	800cc60 <__sflush_r+0x1c>
 800cd04:	690f      	ldr	r7, [r1, #16]
 800cd06:	2f00      	cmp	r7, #0
 800cd08:	d0a9      	beq.n	800cc5e <__sflush_r+0x1a>
 800cd0a:	0793      	lsls	r3, r2, #30
 800cd0c:	680e      	ldr	r6, [r1, #0]
 800cd0e:	bf08      	it	eq
 800cd10:	694b      	ldreq	r3, [r1, #20]
 800cd12:	600f      	str	r7, [r1, #0]
 800cd14:	bf18      	it	ne
 800cd16:	2300      	movne	r3, #0
 800cd18:	eba6 0807 	sub.w	r8, r6, r7
 800cd1c:	608b      	str	r3, [r1, #8]
 800cd1e:	f1b8 0f00 	cmp.w	r8, #0
 800cd22:	dd9c      	ble.n	800cc5e <__sflush_r+0x1a>
 800cd24:	6a21      	ldr	r1, [r4, #32]
 800cd26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd28:	4643      	mov	r3, r8
 800cd2a:	463a      	mov	r2, r7
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	47b0      	blx	r6
 800cd30:	2800      	cmp	r0, #0
 800cd32:	dc06      	bgt.n	800cd42 <__sflush_r+0xfe>
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	e78e      	b.n	800cc60 <__sflush_r+0x1c>
 800cd42:	4407      	add	r7, r0
 800cd44:	eba8 0800 	sub.w	r8, r8, r0
 800cd48:	e7e9      	b.n	800cd1e <__sflush_r+0xda>
 800cd4a:	bf00      	nop
 800cd4c:	dfbffffe 	.word	0xdfbffffe

0800cd50 <_fflush_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	690b      	ldr	r3, [r1, #16]
 800cd54:	4605      	mov	r5, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	b913      	cbnz	r3, 800cd60 <_fflush_r+0x10>
 800cd5a:	2500      	movs	r5, #0
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	b118      	cbz	r0, 800cd6a <_fflush_r+0x1a>
 800cd62:	6a03      	ldr	r3, [r0, #32]
 800cd64:	b90b      	cbnz	r3, 800cd6a <_fflush_r+0x1a>
 800cd66:	f7fd ff29 	bl	800abbc <__sinit>
 800cd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0f3      	beq.n	800cd5a <_fflush_r+0xa>
 800cd72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd74:	07d0      	lsls	r0, r2, #31
 800cd76:	d404      	bmi.n	800cd82 <_fflush_r+0x32>
 800cd78:	0599      	lsls	r1, r3, #22
 800cd7a:	d402      	bmi.n	800cd82 <_fflush_r+0x32>
 800cd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd7e:	f7fe f9b5 	bl	800b0ec <__retarget_lock_acquire_recursive>
 800cd82:	4628      	mov	r0, r5
 800cd84:	4621      	mov	r1, r4
 800cd86:	f7ff ff5d 	bl	800cc44 <__sflush_r>
 800cd8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd8c:	07da      	lsls	r2, r3, #31
 800cd8e:	4605      	mov	r5, r0
 800cd90:	d4e4      	bmi.n	800cd5c <_fflush_r+0xc>
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	059b      	lsls	r3, r3, #22
 800cd96:	d4e1      	bmi.n	800cd5c <_fflush_r+0xc>
 800cd98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd9a:	f7fe f9a8 	bl	800b0ee <__retarget_lock_release_recursive>
 800cd9e:	e7dd      	b.n	800cd5c <_fflush_r+0xc>

0800cda0 <__swhatbuf_r>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	460c      	mov	r4, r1
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	b096      	sub	sp, #88	; 0x58
 800cdac:	4615      	mov	r5, r2
 800cdae:	461e      	mov	r6, r3
 800cdb0:	da0d      	bge.n	800cdce <__swhatbuf_r+0x2e>
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdb8:	f04f 0100 	mov.w	r1, #0
 800cdbc:	bf0c      	ite	eq
 800cdbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdc2:	2340      	movne	r3, #64	; 0x40
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	6031      	str	r1, [r6, #0]
 800cdc8:	602b      	str	r3, [r5, #0]
 800cdca:	b016      	add	sp, #88	; 0x58
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	466a      	mov	r2, sp
 800cdd0:	f000 f862 	bl	800ce98 <_fstat_r>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	dbec      	blt.n	800cdb2 <__swhatbuf_r+0x12>
 800cdd8:	9901      	ldr	r1, [sp, #4]
 800cdda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cde2:	4259      	negs	r1, r3
 800cde4:	4159      	adcs	r1, r3
 800cde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdea:	e7eb      	b.n	800cdc4 <__swhatbuf_r+0x24>

0800cdec <__smakebuf_r>:
 800cdec:	898b      	ldrh	r3, [r1, #12]
 800cdee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdf0:	079d      	lsls	r5, r3, #30
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	d507      	bpl.n	800ce08 <__smakebuf_r+0x1c>
 800cdf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	6123      	str	r3, [r4, #16]
 800ce00:	2301      	movs	r3, #1
 800ce02:	6163      	str	r3, [r4, #20]
 800ce04:	b002      	add	sp, #8
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	ab01      	add	r3, sp, #4
 800ce0a:	466a      	mov	r2, sp
 800ce0c:	f7ff ffc8 	bl	800cda0 <__swhatbuf_r>
 800ce10:	9900      	ldr	r1, [sp, #0]
 800ce12:	4605      	mov	r5, r0
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7ff f871 	bl	800befc <_malloc_r>
 800ce1a:	b948      	cbnz	r0, 800ce30 <__smakebuf_r+0x44>
 800ce1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce20:	059a      	lsls	r2, r3, #22
 800ce22:	d4ef      	bmi.n	800ce04 <__smakebuf_r+0x18>
 800ce24:	f023 0303 	bic.w	r3, r3, #3
 800ce28:	f043 0302 	orr.w	r3, r3, #2
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	e7e3      	b.n	800cdf8 <__smakebuf_r+0xc>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	6020      	str	r0, [r4, #0]
 800ce34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	9b00      	ldr	r3, [sp, #0]
 800ce3c:	6163      	str	r3, [r4, #20]
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	6120      	str	r0, [r4, #16]
 800ce42:	b15b      	cbz	r3, 800ce5c <__smakebuf_r+0x70>
 800ce44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f000 f837 	bl	800cebc <_isatty_r>
 800ce4e:	b128      	cbz	r0, 800ce5c <__smakebuf_r+0x70>
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0301 	orr.w	r3, r3, #1
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	431d      	orrs	r5, r3
 800ce60:	81a5      	strh	r5, [r4, #12]
 800ce62:	e7cf      	b.n	800ce04 <__smakebuf_r+0x18>

0800ce64 <memmove>:
 800ce64:	4288      	cmp	r0, r1
 800ce66:	b510      	push	{r4, lr}
 800ce68:	eb01 0402 	add.w	r4, r1, r2
 800ce6c:	d902      	bls.n	800ce74 <memmove+0x10>
 800ce6e:	4284      	cmp	r4, r0
 800ce70:	4623      	mov	r3, r4
 800ce72:	d807      	bhi.n	800ce84 <memmove+0x20>
 800ce74:	1e43      	subs	r3, r0, #1
 800ce76:	42a1      	cmp	r1, r4
 800ce78:	d008      	beq.n	800ce8c <memmove+0x28>
 800ce7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce82:	e7f8      	b.n	800ce76 <memmove+0x12>
 800ce84:	4402      	add	r2, r0
 800ce86:	4601      	mov	r1, r0
 800ce88:	428a      	cmp	r2, r1
 800ce8a:	d100      	bne.n	800ce8e <memmove+0x2a>
 800ce8c:	bd10      	pop	{r4, pc}
 800ce8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce96:	e7f7      	b.n	800ce88 <memmove+0x24>

0800ce98 <_fstat_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d07      	ldr	r5, [pc, #28]	; (800ceb8 <_fstat_r+0x20>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	f7f4 fcb8 	bl	800181a <_fstat>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d102      	bne.n	800ceb4 <_fstat_r+0x1c>
 800ceae:	682b      	ldr	r3, [r5, #0]
 800ceb0:	b103      	cbz	r3, 800ceb4 <_fstat_r+0x1c>
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2000e720 	.word	0x2000e720

0800cebc <_isatty_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d06      	ldr	r5, [pc, #24]	; (800ced8 <_isatty_r+0x1c>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	602b      	str	r3, [r5, #0]
 800cec8:	f7f4 fcb7 	bl	800183a <_isatty>
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d102      	bne.n	800ced6 <_isatty_r+0x1a>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	b103      	cbz	r3, 800ced6 <_isatty_r+0x1a>
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	2000e720 	.word	0x2000e720

0800cedc <_sbrk_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d06      	ldr	r5, [pc, #24]	; (800cef8 <_sbrk_r+0x1c>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	f7f4 fcc0 	bl	800186c <_sbrk>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_sbrk_r+0x1a>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_sbrk_r+0x1a>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	2000e720 	.word	0x2000e720

0800cefc <__assert_func>:
 800cefc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cefe:	4614      	mov	r4, r2
 800cf00:	461a      	mov	r2, r3
 800cf02:	4b09      	ldr	r3, [pc, #36]	; (800cf28 <__assert_func+0x2c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4605      	mov	r5, r0
 800cf08:	68d8      	ldr	r0, [r3, #12]
 800cf0a:	b14c      	cbz	r4, 800cf20 <__assert_func+0x24>
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <__assert_func+0x30>)
 800cf0e:	9100      	str	r1, [sp, #0]
 800cf10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf14:	4906      	ldr	r1, [pc, #24]	; (800cf30 <__assert_func+0x34>)
 800cf16:	462b      	mov	r3, r5
 800cf18:	f000 f872 	bl	800d000 <fiprintf>
 800cf1c:	f000 f882 	bl	800d024 <abort>
 800cf20:	4b04      	ldr	r3, [pc, #16]	; (800cf34 <__assert_func+0x38>)
 800cf22:	461c      	mov	r4, r3
 800cf24:	e7f3      	b.n	800cf0e <__assert_func+0x12>
 800cf26:	bf00      	nop
 800cf28:	200000f4 	.word	0x200000f4
 800cf2c:	0800d5ff 	.word	0x0800d5ff
 800cf30:	0800d60c 	.word	0x0800d60c
 800cf34:	0800d63a 	.word	0x0800d63a

0800cf38 <_calloc_r>:
 800cf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf3a:	fba1 2402 	umull	r2, r4, r1, r2
 800cf3e:	b94c      	cbnz	r4, 800cf54 <_calloc_r+0x1c>
 800cf40:	4611      	mov	r1, r2
 800cf42:	9201      	str	r2, [sp, #4]
 800cf44:	f7fe ffda 	bl	800befc <_malloc_r>
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	b930      	cbnz	r0, 800cf5c <_calloc_r+0x24>
 800cf4e:	4628      	mov	r0, r5
 800cf50:	b003      	add	sp, #12
 800cf52:	bd30      	pop	{r4, r5, pc}
 800cf54:	220c      	movs	r2, #12
 800cf56:	6002      	str	r2, [r0, #0]
 800cf58:	2500      	movs	r5, #0
 800cf5a:	e7f8      	b.n	800cf4e <_calloc_r+0x16>
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	f7fd ffdd 	bl	800af1c <memset>
 800cf62:	e7f4      	b.n	800cf4e <_calloc_r+0x16>

0800cf64 <__ascii_mbtowc>:
 800cf64:	b082      	sub	sp, #8
 800cf66:	b901      	cbnz	r1, 800cf6a <__ascii_mbtowc+0x6>
 800cf68:	a901      	add	r1, sp, #4
 800cf6a:	b142      	cbz	r2, 800cf7e <__ascii_mbtowc+0x1a>
 800cf6c:	b14b      	cbz	r3, 800cf82 <__ascii_mbtowc+0x1e>
 800cf6e:	7813      	ldrb	r3, [r2, #0]
 800cf70:	600b      	str	r3, [r1, #0]
 800cf72:	7812      	ldrb	r2, [r2, #0]
 800cf74:	1e10      	subs	r0, r2, #0
 800cf76:	bf18      	it	ne
 800cf78:	2001      	movne	r0, #1
 800cf7a:	b002      	add	sp, #8
 800cf7c:	4770      	bx	lr
 800cf7e:	4610      	mov	r0, r2
 800cf80:	e7fb      	b.n	800cf7a <__ascii_mbtowc+0x16>
 800cf82:	f06f 0001 	mvn.w	r0, #1
 800cf86:	e7f8      	b.n	800cf7a <__ascii_mbtowc+0x16>

0800cf88 <_realloc_r>:
 800cf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	4614      	mov	r4, r2
 800cf90:	460e      	mov	r6, r1
 800cf92:	b921      	cbnz	r1, 800cf9e <_realloc_r+0x16>
 800cf94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	4611      	mov	r1, r2
 800cf9a:	f7fe bfaf 	b.w	800befc <_malloc_r>
 800cf9e:	b92a      	cbnz	r2, 800cfac <_realloc_r+0x24>
 800cfa0:	f7fe ff38 	bl	800be14 <_free_r>
 800cfa4:	4625      	mov	r5, r4
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfac:	f000 f841 	bl	800d032 <_malloc_usable_size_r>
 800cfb0:	4284      	cmp	r4, r0
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	d802      	bhi.n	800cfbc <_realloc_r+0x34>
 800cfb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfba:	d812      	bhi.n	800cfe2 <_realloc_r+0x5a>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4640      	mov	r0, r8
 800cfc0:	f7fe ff9c 	bl	800befc <_malloc_r>
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d0ed      	beq.n	800cfa6 <_realloc_r+0x1e>
 800cfca:	42bc      	cmp	r4, r7
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4631      	mov	r1, r6
 800cfd0:	bf28      	it	cs
 800cfd2:	463a      	movcs	r2, r7
 800cfd4:	f7fe f894 	bl	800b100 <memcpy>
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4640      	mov	r0, r8
 800cfdc:	f7fe ff1a 	bl	800be14 <_free_r>
 800cfe0:	e7e1      	b.n	800cfa6 <_realloc_r+0x1e>
 800cfe2:	4635      	mov	r5, r6
 800cfe4:	e7df      	b.n	800cfa6 <_realloc_r+0x1e>

0800cfe6 <__ascii_wctomb>:
 800cfe6:	b149      	cbz	r1, 800cffc <__ascii_wctomb+0x16>
 800cfe8:	2aff      	cmp	r2, #255	; 0xff
 800cfea:	bf85      	ittet	hi
 800cfec:	238a      	movhi	r3, #138	; 0x8a
 800cfee:	6003      	strhi	r3, [r0, #0]
 800cff0:	700a      	strbls	r2, [r1, #0]
 800cff2:	f04f 30ff 	movhi.w	r0, #4294967295
 800cff6:	bf98      	it	ls
 800cff8:	2001      	movls	r0, #1
 800cffa:	4770      	bx	lr
 800cffc:	4608      	mov	r0, r1
 800cffe:	4770      	bx	lr

0800d000 <fiprintf>:
 800d000:	b40e      	push	{r1, r2, r3}
 800d002:	b503      	push	{r0, r1, lr}
 800d004:	4601      	mov	r1, r0
 800d006:	ab03      	add	r3, sp, #12
 800d008:	4805      	ldr	r0, [pc, #20]	; (800d020 <fiprintf+0x20>)
 800d00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d00e:	6800      	ldr	r0, [r0, #0]
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	f7ff fcfd 	bl	800ca10 <_vfiprintf_r>
 800d016:	b002      	add	sp, #8
 800d018:	f85d eb04 	ldr.w	lr, [sp], #4
 800d01c:	b003      	add	sp, #12
 800d01e:	4770      	bx	lr
 800d020:	200000f4 	.word	0x200000f4

0800d024 <abort>:
 800d024:	b508      	push	{r3, lr}
 800d026:	2006      	movs	r0, #6
 800d028:	f000 f834 	bl	800d094 <raise>
 800d02c:	2001      	movs	r0, #1
 800d02e:	f7f4 fbc1 	bl	80017b4 <_exit>

0800d032 <_malloc_usable_size_r>:
 800d032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d036:	1f18      	subs	r0, r3, #4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfbc      	itt	lt
 800d03c:	580b      	ldrlt	r3, [r1, r0]
 800d03e:	18c0      	addlt	r0, r0, r3
 800d040:	4770      	bx	lr

0800d042 <_raise_r>:
 800d042:	291f      	cmp	r1, #31
 800d044:	b538      	push	{r3, r4, r5, lr}
 800d046:	4604      	mov	r4, r0
 800d048:	460d      	mov	r5, r1
 800d04a:	d904      	bls.n	800d056 <_raise_r+0x14>
 800d04c:	2316      	movs	r3, #22
 800d04e:	6003      	str	r3, [r0, #0]
 800d050:	f04f 30ff 	mov.w	r0, #4294967295
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d058:	b112      	cbz	r2, 800d060 <_raise_r+0x1e>
 800d05a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d05e:	b94b      	cbnz	r3, 800d074 <_raise_r+0x32>
 800d060:	4620      	mov	r0, r4
 800d062:	f000 f831 	bl	800d0c8 <_getpid_r>
 800d066:	462a      	mov	r2, r5
 800d068:	4601      	mov	r1, r0
 800d06a:	4620      	mov	r0, r4
 800d06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d070:	f000 b818 	b.w	800d0a4 <_kill_r>
 800d074:	2b01      	cmp	r3, #1
 800d076:	d00a      	beq.n	800d08e <_raise_r+0x4c>
 800d078:	1c59      	adds	r1, r3, #1
 800d07a:	d103      	bne.n	800d084 <_raise_r+0x42>
 800d07c:	2316      	movs	r3, #22
 800d07e:	6003      	str	r3, [r0, #0]
 800d080:	2001      	movs	r0, #1
 800d082:	e7e7      	b.n	800d054 <_raise_r+0x12>
 800d084:	2400      	movs	r4, #0
 800d086:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d08a:	4628      	mov	r0, r5
 800d08c:	4798      	blx	r3
 800d08e:	2000      	movs	r0, #0
 800d090:	e7e0      	b.n	800d054 <_raise_r+0x12>
	...

0800d094 <raise>:
 800d094:	4b02      	ldr	r3, [pc, #8]	; (800d0a0 <raise+0xc>)
 800d096:	4601      	mov	r1, r0
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	f7ff bfd2 	b.w	800d042 <_raise_r>
 800d09e:	bf00      	nop
 800d0a0:	200000f4 	.word	0x200000f4

0800d0a4 <_kill_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d07      	ldr	r5, [pc, #28]	; (800d0c4 <_kill_r+0x20>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	f7f4 fb6f 	bl	8001794 <_kill>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	d102      	bne.n	800d0c0 <_kill_r+0x1c>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	b103      	cbz	r3, 800d0c0 <_kill_r+0x1c>
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000e720 	.word	0x2000e720

0800d0c8 <_getpid_r>:
 800d0c8:	f7f4 bb5c 	b.w	8001784 <_getpid>

0800d0cc <_init>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr

0800d0d8 <_fini>:
 800d0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0da:	bf00      	nop
 800d0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0de:	bc08      	pop	{r3}
 800d0e0:	469e      	mov	lr, r3
 800d0e2:	4770      	bx	lr
