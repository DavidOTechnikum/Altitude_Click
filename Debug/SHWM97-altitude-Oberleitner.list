
SHWM97-altitude-Oberleitner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  0800cff8  0800cff8  0001cff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5b4  0800d5b4  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5bc  0800d5bc  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5bc  0800d5bc  0001d5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5c0  0800d5c0  0001d5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4cc  20000264  0800d828  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e730  0800d828  0002e730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 13 .debug_info   000248ed  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050d3  00000000  00000000  00044bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d00  00000000  00000000  00049c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000166e  00000000  00000000  0004b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026235  00000000  00000000  0004d006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c7e  00000000  00000000  0007323b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da199  00000000  00000000  00097eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ab4  00000000  00000000  00172054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cfdc 	.word	0x0800cfdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	0800cfdc 	.word	0x0800cfdc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of data_queue */
  data_queueHandle = osMessageQueueNew (16, sizeof(message), &data_queue_attributes);
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <MX_FREERTOS_Init+0x58>)
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f006 fa5e 	bl	800742e <osMessageQueueNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_FREERTOS_Init+0x5c>)
 8000f76:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of monitor_task */
  monitor_taskHandle = osThreadNew(start_monitor_task, NULL, &monitor_task_attributes);
 8000f78:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_FREERTOS_Init+0x60>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_FREERTOS_Init+0x64>)
 8000f7e:	f006 f9a9 	bl	80072d4 <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <MX_FREERTOS_Init+0x68>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* creation of data_task */
  data_taskHandle = osThreadNew(start_data_task, NULL, &data_task_attributes);
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <MX_FREERTOS_Init+0x6c>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_FREERTOS_Init+0x70>)
 8000f8e:	f006 f9a1 	bl	80072d4 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <MX_FREERTOS_Init+0x74>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of wifi_monitor_ta */
  wifi_monitor_taHandle = osThreadNew(start_wifi_monitor_task, NULL, &wifi_monitor_ta_attributes);
 8000f98:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MX_FREERTOS_Init+0x78>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <MX_FREERTOS_Init+0x7c>)
 8000f9e:	f006 f999 	bl	80072d4 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <MX_FREERTOS_Init+0x80>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of sender_task */
  sender_taskHandle = osThreadNew(start_sender_task, NULL, &sender_task_attributes);
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <MX_FREERTOS_Init+0x84>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_FREERTOS_Init+0x88>)
 8000fae:	f006 f991 	bl	80072d4 <osThreadNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <MX_FREERTOS_Init+0x8c>)
 8000fb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800d1e4 	.word	0x0800d1e4
 8000fc0:	20007294 	.word	0x20007294
 8000fc4:	0800d154 	.word	0x0800d154
 8000fc8:	08000ff5 	.word	0x08000ff5
 8000fcc:	20000284 	.word	0x20000284
 8000fd0:	0800d178 	.word	0x0800d178
 8000fd4:	08001085 	.word	0x08001085
 8000fd8:	200041b0 	.word	0x200041b0
 8000fdc:	0800d19c 	.word	0x0800d19c
 8000fe0:	08001169 	.word	0x08001169
 8000fe4:	200051fc 	.word	0x200051fc
 8000fe8:	0800d1c0 	.word	0x0800d1c0
 8000fec:	080011b9 	.word	0x080011b9
 8000ff0:	20006248 	.word	0x20006248

08000ff4 <start_monitor_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_monitor_task */
void start_monitor_task(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_monitor_task */
    uint8_t sysmod = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	 uint8_t data;

	 for (;;) {
	 if (sysmod == 0)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d121      	bne.n	800104a <start_monitor_task+0x56>
		 {
		 printf("setup \n");
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <start_monitor_task+0x84>)
 8001008:	f009 fdfc 	bl	800ac04 <puts>

		 if (calibration(&hi2c1) != HAL_OK) {
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <start_monitor_task+0x88>)
 800100e:	f000 fed3 	bl	8001db8 <calibration>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d12b      	bne.n	8001070 <start_monitor_task+0x7c>
			 continue;
		 }
		 if (altitude_read(&hi2c1, data_queueHandle) != HAL_OK) {
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <start_monitor_task+0x8c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <start_monitor_task+0x88>)
 8001020:	f000 ff8a 	bl	8001f38 <altitude_read>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d124      	bne.n	8001074 <start_monitor_task+0x80>
			 continue;
		 }
	  data = 0x39;
 800102a:	2339      	movs	r3, #57	; 0x39
 800102c:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Mem_Write(&hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f107 030e 	add.w	r3, r7, #14
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2226      	movs	r2, #38	; 0x26
 8001042:	21c0      	movs	r1, #192	; 0xc0
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <start_monitor_task+0x88>)
 8001046:	f001 fe29 	bl	8002c9c <HAL_I2C_Mem_Write>
		 }
	 osDelay(ALT_DELAY);
 800104a:	f242 7010 	movw	r0, #10000	; 0x2710
 800104e:	f006 f9d3 	bl	80073f8 <osDelay>
	    HAL_I2C_Mem_Read(&hi2c1, 0xC0, 0x11, 1, &sysmod, 1, HAL_MAX_DELAY);			// check system status: if 0, not active -> start and calibrate
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	f107 030f 	add.w	r3, r7, #15
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	2211      	movs	r2, #17
 8001066:	21c0      	movs	r1, #192	; 0xc0
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <start_monitor_task+0x88>)
 800106a:	f001 ff2b 	bl	8002ec4 <HAL_I2C_Mem_Read>
 800106e:	e7c7      	b.n	8001000 <start_monitor_task+0xc>
			 continue;
 8001070:	bf00      	nop
 8001072:	e7c5      	b.n	8001000 <start_monitor_task+0xc>
			 continue;
 8001074:	bf00      	nop
	 if (sysmod == 0)
 8001076:	e7c3      	b.n	8001000 <start_monitor_task+0xc>
 8001078:	0800d03c 	.word	0x0800d03c
 800107c:	20007298 	.word	0x20007298
 8001080:	20007294 	.word	0x20007294

08001084 <start_data_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_data_task */
void start_data_task(void *argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af04      	add	r7, sp, #16
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_data_task */
  /* Infinite loop */

	uint8_t low_byte, high_byte, higher_byte;
    uint8_t temp_msb, temp_lsb;
    uint8_t sysmod = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	72bb      	strb	r3, [r7, #10]
    float pressure = 0;
 8001090:	f04f 0300 	mov.w	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
    float temp = 0;
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	613b      	str	r3, [r7, #16]

while(wifi_on == false) {
 800109c:	e003      	b.n	80010a6 <start_data_task+0x22>
	osDelay(DATA_DELAY);
 800109e:	f241 3088 	movw	r0, #5000	; 0x1388
 80010a2:	f006 f9a9 	bl	80073f8 <osDelay>
while(wifi_on == false) {
 80010a6:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <start_data_task+0xcc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f4      	bne.n	800109e <start_data_task+0x1a>
}
	 for(;;) {
		 osDelay(POLLING_DELAY);
 80010b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010b8:	f006 f99e 	bl	80073f8 <osDelay>
		 HAL_I2C_Mem_Read(&hi2c1, 0xC0, 0x11, 1, &sysmod, 1, HAL_MAX_DELAY);
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030a 	add.w	r3, r7, #10
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2211      	movs	r2, #17
 80010d0:	21c0      	movs	r1, #192	; 0xc0
 80010d2:	4820      	ldr	r0, [pc, #128]	; (8001154 <start_data_task+0xd0>)
 80010d4:	f001 fef6 	bl	8002ec4 <HAL_I2C_Mem_Read>
		 if (sysmod == 1) {
 80010d8:	7abb      	ldrb	r3, [r7, #10]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d1ea      	bne.n	80010b4 <start_data_task+0x30>

			if (read_data (&hi2c1, &low_byte, &high_byte, &higher_byte, &temp_lsb, &temp_msb) == HAL_OK) {
 80010de:	f107 000d 	add.w	r0, r7, #13
 80010e2:	f107 020e 	add.w	r2, r7, #14
 80010e6:	f107 010f 	add.w	r1, r7, #15
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	f107 030b 	add.w	r3, r7, #11
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	4603      	mov	r3, r0
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <start_data_task+0xd0>)
 80010fa:	f000 fdf5 	bl	8001ce8 <read_data>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d110      	bne.n	8001126 <start_data_task+0xa2>
			    pressure = calculate_pressure(low_byte, high_byte, higher_byte);
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	7bb9      	ldrb	r1, [r7, #14]
 8001108:	7b7a      	ldrb	r2, [r7, #13]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd2f 	bl	8001b6e <calculate_pressure>
 8001110:	ed87 0a05 	vstr	s0, [r7, #20]
			    temp = calculate_temperature (temp_lsb, temp_msb);
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	7b3a      	ldrb	r2, [r7, #12]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fd79 	bl	8001c12 <calculate_temperature>
 8001120:	ed87 0a04 	vstr	s0, [r7, #16]
 8001124:	e003      	b.n	800112e <start_data_task+0xaa>
			} else {
				pressure = ERROR_VALUE;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <start_data_task+0xd4>)
 8001128:	617b      	str	r3, [r7, #20]
				temp = ERROR_VALUE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <start_data_task+0xd4>)
 800112c:	613b      	str	r3, [r7, #16]
			}

			data_in_queue("C", temp, data_queueHandle);
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <start_data_task+0xd8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	ed97 0a04 	vldr	s0, [r7, #16]
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <start_data_task+0xdc>)
 800113a:	f000 ff3d 	bl	8001fb8 <data_in_queue>
			data_in_queue("Pa", pressure, data_queueHandle);
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <start_data_task+0xd8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	ed97 0a05 	vldr	s0, [r7, #20]
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <start_data_task+0xe0>)
 800114a:	f000 ff35 	bl	8001fb8 <data_in_queue>
		 osDelay(POLLING_DELAY);
 800114e:	e7b1      	b.n	80010b4 <start_data_task+0x30>
 8001150:	20000280 	.word	0x20000280
 8001154:	20007298 	.word	0x20007298
 8001158:	c5505000 	.word	0xc5505000
 800115c:	20007294 	.word	0x20007294
 8001160:	0800d044 	.word	0x0800d044
 8001164:	0800d048 	.word	0x0800d048

08001168 <start_wifi_monitor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wifi_monitor_task */
void start_wifi_monitor_task(void *argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wifi_monitor_task */
	bool success_check = false;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]
 * (Debuggen: ok-Nachricht an printf)
 *
 */
//wifi_on = true;
	for (;;) {
		wifi_on = wifi_init();
 8001174:	f001 f902 	bl	800237c <wifi_init>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <start_wifi_monitor_task+0x44>)
 800117e:	701a      	strb	r2, [r3, #0]

		for (;;) {
			do {
				success_check = wifi_init_stage_and_TCP_check(obtain_tcp_connection);
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <start_wifi_monitor_task+0x48>)
 8001182:	f001 f8cf 	bl	8002324 <wifi_init_stage_and_TCP_check>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
			} while (!success_check);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f4      	bne.n	8001180 <start_wifi_monitor_task+0x18>
			if (no_tcp_connection) {
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <start_wifi_monitor_task+0x4c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <start_wifi_monitor_task+0x40>
				break;
			}
			osDelay(2 * WIFI_DELAY);
 800119e:	f242 7010 	movw	r0, #10000	; 0x2710
 80011a2:	f006 f929 	bl	80073f8 <osDelay>
		for (;;) {
 80011a6:	e7eb      	b.n	8001180 <start_wifi_monitor_task+0x18>
				break;
 80011a8:	bf00      	nop
		wifi_on = wifi_init();
 80011aa:	e7e3      	b.n	8001174 <start_wifi_monitor_task+0xc>
 80011ac:	20000280 	.word	0x20000280
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000281 	.word	0x20000281

080011b8 <start_sender_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_sender_task */
void start_sender_task(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	message received;
	char sendmsg[20];
  /* Infinite loop */
  for(;;)
  {
	  if (wifi_on == true) {
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <start_sender_task+0xd8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05d      	beq.n	8001284 <start_sender_task+0xcc>
		  if (osMessageQueueGet	(data_queueHandle, &received, NULL, osWaitForever) ==  osOK) {
 80011c8:	4b32      	ldr	r3, [pc, #200]	; (8001294 <start_sender_task+0xdc>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f107 0120 	add.w	r1, r7, #32
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	2200      	movs	r2, #0
 80011d6:	f006 f9fd 	bl	80075d4 <osMessageQueueGet>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ef      	bne.n	80011c0 <start_sender_task+0x8>
			  if (strcmp(received.unit, "Pa") == 0) {
 80011e0:	f107 0320 	add.w	r3, r7, #32
 80011e4:	492c      	ldr	r1, [pc, #176]	; (8001298 <start_sender_task+0xe0>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe fff2 	bl	80001d0 <strcmp>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10e      	bne.n	8001210 <start_sender_task+0x58>
				  snprintf(sendmsg, sizeof(sendmsg), "P:%.2f\r\n", received.value);
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f9b7 	bl	8000568 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	f107 000c 	add.w	r0, r7, #12
 8001202:	e9cd 2300 	strd	r2, r3, [sp]
 8001206:	4a25      	ldr	r2, [pc, #148]	; (800129c <start_sender_task+0xe4>)
 8001208:	2114      	movs	r1, #20
 800120a:	f009 fd03 	bl	800ac14 <sniprintf>
 800120e:	e02e      	b.n	800126e <start_sender_task+0xb6>
			  } else if (strcmp(received.unit, "C")== 0) {
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4922      	ldr	r1, [pc, #136]	; (80012a0 <start_sender_task+0xe8>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffda 	bl	80001d0 <strcmp>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <start_sender_task+0x88>
				  snprintf(sendmsg, sizeof(sendmsg), "TP:%.1f\r\n", received.value);
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f99f 	bl	8000568 <__aeabi_f2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	f107 000c 	add.w	r0, r7, #12
 8001232:	e9cd 2300 	strd	r2, r3, [sp]
 8001236:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <start_sender_task+0xec>)
 8001238:	2114      	movs	r1, #20
 800123a:	f009 fceb 	bl	800ac14 <sniprintf>
 800123e:	e016      	b.n	800126e <start_sender_task+0xb6>
			  } else if (strcmp(received.unit, "m") == 0) {
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4918      	ldr	r1, [pc, #96]	; (80012a8 <start_sender_task+0xf0>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7fe ffc2 	bl	80001d0 <strcmp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10d      	bne.n	800126e <start_sender_task+0xb6>
				  snprintf(sendmsg, sizeof(sendmsg), "ALT:%.2f\r\n", received.value);
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f987 	bl	8000568 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	f107 000c 	add.w	r0, r7, #12
 8001262:	e9cd 2300 	strd	r2, r3, [sp]
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <start_sender_task+0xf4>)
 8001268:	2114      	movs	r1, #20
 800126a:	f009 fcd3 	bl	800ac14 <sniprintf>
			  }
			  printf(sendmsg);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f009 fc60 	bl	800ab38 <iprintf>
			  send_TCP_command(sendmsg);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4618      	mov	r0, r3
 800127e:	f000 ffd1 	bl	8002224 <send_TCP_command>
 8001282:	e79d      	b.n	80011c0 <start_sender_task+0x8>
		  }
	  } else {
		  osDelay(WIFI_WAIT);
 8001284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001288:	f006 f8b6 	bl	80073f8 <osDelay>
	  if (wifi_on == true) {
 800128c:	e798      	b.n	80011c0 <start_sender_task+0x8>
 800128e:	bf00      	nop
 8001290:	20000280 	.word	0x20000280
 8001294:	20007294 	.word	0x20007294
 8001298:	0800d048 	.word	0x0800d048
 800129c:	0800d04c 	.word	0x0800d04c
 80012a0:	0800d044 	.word	0x0800d044
 80012a4:	0800d058 	.word	0x0800d058
 80012a8:	0800d064 	.word	0x0800d064
 80012ac:	0800d068 	.word	0x0800d068

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_GPIO_Init+0x98>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <MX_GPIO_Init+0x98>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <MX_GPIO_Init+0x98>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_GPIO_Init+0x98>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <MX_GPIO_Init+0x98>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_GPIO_Init+0x98>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_GPIO_Init+0x98>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_GPIO_Init+0x98>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_GPIO_Init+0x98>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_CS_GPIO_Port, WIFI_CS_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2101      	movs	r1, #1
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_GPIO_Init+0x9c>)
 8001314:	f001 fc0e 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2108      	movs	r1, #8
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_GPIO_Init+0x9c>)
 800131e:	f001 fc09 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = WIFI_CS_Pin|LD3_Pin;
 8001322:	2309      	movs	r3, #9
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0x9c>)
 800133a:	f001 fa91 	bl	8002860 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	48000400 	.word	0x48000400

08001350 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <MX_I2C1_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_I2C1_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <MX_I2C1_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_I2C1_Init+0x74>)
 800138c:	f001 fbea 	bl	8002b64 <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001396:	f000 f90d 	bl	80015b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_I2C1_Init+0x74>)
 800139e:	f002 fee9 	bl	8004174 <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a8:	f000 f904 	bl	80015b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C1_Init+0x74>)
 80013b0:	f002 ff2b 	bl	800420a <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f8fb 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20007298 	.word	0x20007298
 80013c8:	40005400 	.word	0x40005400
 80013cc:	00707cbb 	.word	0x00707cbb

080013d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b09e      	sub	sp, #120	; 0x78
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2254      	movs	r2, #84	; 0x54
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 fd1b 	bl	800ae2c <memset>
  if(i2cHandle->Instance==I2C1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_I2C_MspInit+0xc4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d145      	bne.n	800148c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fe27 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001418:	f000 f8cc 	bl	80015b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001434:	23c0      	movs	r3, #192	; 0xc0
 8001436:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001438:	2312      	movs	r3, #18
 800143a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001444:	2304      	movs	r3, #4
 8001446:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800144c:	4619      	mov	r1, r3
 800144e:	4813      	ldr	r0, [pc, #76]	; (800149c <HAL_I2C_MspInit+0xcc>)
 8001450:	f001 fa06 	bl	8002860 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 800145a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145e:	6593      	str	r3, [r2, #88]	; 0x58
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_I2C_MspInit+0xc8>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2105      	movs	r1, #5
 8001470:	201f      	movs	r0, #31
 8001472:	f001 f93d 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001476:	201f      	movs	r0, #31
 8001478:	f001 f956 	bl	8002728 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2105      	movs	r1, #5
 8001480:	2020      	movs	r0, #32
 8001482:	f001 f935 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001486:	2020      	movs	r0, #32
 8001488:	f001 f94e 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800148c:	bf00      	nop
 800148e:	3778      	adds	r7, #120	; 0x78
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a4:	f001 f810 	bl	80024c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a8:	f000 f810 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ac:	f7ff ff00 	bl	80012b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b0:	f000 fa52 	bl	8001958 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014b4:	f7ff ff4c 	bl	8001350 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014b8:	f000 fa1e 	bl	80018f8 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014bc:	f005 fec0 	bl	8007240 <osKernelInitialize>
  MX_FREERTOS_Init();
 80014c0:	f7ff fd50 	bl	8000f64 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014c4:	f005 fee0 	bl	8007288 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <main+0x28>
	...

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b096      	sub	sp, #88	; 0x58
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2244      	movs	r2, #68	; 0x44
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f009 fca6 	bl	800ae2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f2:	f002 fef5 	bl	80042e0 <HAL_PWREx_ControlVoltageScaling>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014fc:	f000 f85a 	bl	80015b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001500:	f002 fed0 	bl	80042a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <SystemClock_Config+0xc0>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a20      	ldr	r2, [pc, #128]	; (800158c <SystemClock_Config+0xc0>)
 800150c:	f023 0318 	bic.w	r3, r3, #24
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001514:	2314      	movs	r3, #20
 8001516:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800152c:	2301      	movs	r3, #1
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001530:	2301      	movs	r3, #1
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001534:	2310      	movs	r3, #16
 8001536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001538:	2307      	movs	r3, #7
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4618      	mov	r0, r3
 800154a:	f002 ff1f 	bl	800438c <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001554:	f000 f82e 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2303      	movs	r3, #3
 800155e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	2101      	movs	r1, #1
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fb1f 	bl	8004bb4 <HAL_RCC_ClockConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800157c:	f000 f81a 	bl	80015b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001580:	f003 ff64 	bl	800544c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001584:	bf00      	nop
 8001586:	3758      	adds	r7, #88	; 0x58
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a2:	f000 ffa9 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_MspInit+0x4c>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_MspInit+0x4c>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_MspInit+0x4c>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	210f      	movs	r1, #15
 80015fa:	f06f 0001 	mvn.w	r0, #1
 80015fe:	f001 f877 	bl	80026f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <HAL_InitTick+0xe0>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_InitTick+0xe0>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_InitTick+0xe0>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001636:	f107 0210 	add.w	r2, r7, #16
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fc7b 	bl	8004f3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001650:	f003 fc48 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
 8001656:	e004      	b.n	8001662 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001658:	f003 fc44 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 800165c:	4603      	mov	r3, r0
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001664:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <HAL_InitTick+0xe4>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	0c9b      	lsrs	r3, r3, #18
 800166c:	3b01      	subs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_InitTick+0xe8>)
 8001672:	4a22      	ldr	r2, [pc, #136]	; (80016fc <HAL_InitTick+0xec>)
 8001674:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_InitTick+0xe8>)
 8001678:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <HAL_InitTick+0xe8>)
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_InitTick+0xe8>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_InitTick+0xe8>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_InitTick+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001696:	4818      	ldr	r0, [pc, #96]	; (80016f8 <HAL_InitTick+0xe8>)
 8001698:	f003 ffda 	bl	8005650 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11b      	bne.n	80016e2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016aa:	4813      	ldr	r0, [pc, #76]	; (80016f8 <HAL_InitTick+0xe8>)
 80016ac:	f004 f832 	bl	8005714 <HAL_TIM_Base_Start_IT>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d111      	bne.n	80016e2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016be:	2036      	movs	r0, #54	; 0x36
 80016c0:	f001 f832 	bl	8002728 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d808      	bhi.n	80016dc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016ca:	2200      	movs	r2, #0
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	2036      	movs	r0, #54	; 0x36
 80016d0:	f001 f80e 	bl	80026f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_InitTick+0xf0>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e002      	b.n	80016e2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3738      	adds	r7, #56	; 0x38
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	200072ec 	.word	0x200072ec
 80016fc:	40001000 	.word	0x40001000
 8001700:	20000090 	.word	0x20000090

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <I2C1_EV_IRQHandler+0x10>)
 8001736:	f001 fcdf 	bl	80030f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20007298 	.word	0x20007298

08001744 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <I2C1_ER_IRQHandler+0x10>)
 800174a:	f001 fcef 	bl	800312c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20007298 	.word	0x20007298

08001758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <USART1_IRQHandler+0x10>)
 800175e:	f004 fab1 	bl	8005cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000733c 	.word	0x2000733c

0800176c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <TIM6_DAC_IRQHandler+0x10>)
 8001772:	f004 f823 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200072ec 	.word	0x200072ec

08001780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return 1;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_kill>:

int _kill(int pid, int sig)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800179a:	f009 fc05 	bl	800afa8 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2216      	movs	r2, #22
 80017a2:	601a      	str	r2, [r3, #0]
  return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_exit>:

void _exit (int status)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ffe7 	bl	8001790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017c2:	e7fe      	b.n	80017c2 <_exit+0x12>

080017c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e00a      	b.n	80017ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d6:	f3af 8000 	nop.w
 80017da:	4601      	mov	r1, r0
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	dbf0      	blt.n	80017d6 <_read+0x12>
  }

  return len;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <_isatty>:

int _isatty(int file)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f009 fb86 	bl	800afa8 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20010000 	.word	0x20010000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20007338 	.word	0x20007338
 80018d0:	2000e730 	.word	0x2000e730

080018d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART1_UART_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_USART1_UART_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800193c:	f004 f8ea 	bl	8005b14 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f7ff fe35 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000733c 	.word	0x2000733c
 8001954:	40013800 	.word	0x40013800

08001958 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART2_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART2_UART_Init+0x58>)
 800199c:	f004 f8ba 	bl	8005b14 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f7ff fe05 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200073c4 	.word	0x200073c4
 80019b4:	40004400 	.word	0x40004400

080019b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0a0      	sub	sp, #128	; 0x80
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	2254      	movs	r2, #84	; 0x54
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fa27 	bl	800ae2c <memset>
  if(uartHandle->Instance==USART1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_UART_MspInit+0x158>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d140      	bne.n	8001a6a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 fb33 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a00:	f7ff fdd8 	bl	80015b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a04:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a10:	4b40      	ldr	r3, [pc, #256]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a46:	2307      	movs	r3, #7
 8001a48:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a54:	f000 ff04 	bl	8002860 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2105      	movs	r1, #5
 8001a5c:	2025      	movs	r0, #37	; 0x25
 8001a5e:	f000 fe47 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a62:	2025      	movs	r0, #37	; 0x25
 8001a64:	f000 fe60 	bl	8002728 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a68:	e04d      	b.n	8001b06 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <HAL_UART_MspInit+0x160>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d148      	bne.n	8001b06 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 faed 	bl	8005060 <HAL_RCCEx_PeriphCLKConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001a8c:	f7ff fd92 	bl	80015b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x15c>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ade:	f000 febf 	bl	8002860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001af4:	2303      	movs	r3, #3
 8001af6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b02:	f000 fead 	bl	8002860 <HAL_GPIO_Init>
}
 8001b06:	bf00      	nop
 8001b08:	3780      	adds	r7, #128	; 0x80
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40004400 	.word	0x40004400

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff fed8 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f009 fa33 	bl	800afb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7ff fca7 	bl	80014a0 <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001b60:	0800d5c4 	.word	0x0800d5c4
  ldr r2, =_sbss
 8001b64:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8001b68:	2000e730 	.word	0x2000e730

08001b6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_IRQHandler>

08001b6e <calculate_pressure>:
 */

#include "../../custom_libraries/altitude_click/altitude.h"


float calculate_pressure (uint8_t low_byte, uint8_t high_byte, uint8_t higher_byte) {
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	71bb      	strb	r3, [r7, #6]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	717b      	strb	r3, [r7, #5]
	float pressure = 0;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
	int32_t pressure_int = -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	60bb      	str	r3, [r7, #8]

	if ((low_byte & 0x20) > 0) {
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	dd07      	ble.n	8001ba6 <calculate_pressure+0x38>
		pressure += 0.5;
 8001b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ba2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if ((low_byte & 0x10) > 0) {
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	dd07      	ble.n	8001bc0 <calculate_pressure+0x52>
		pressure += 0.25;
 8001bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bbc:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	pressure_int = (int32_t)higher_byte;
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int << 16;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	60bb      	str	r3, [r7, #8]

	pressure_int = pressure_int | ((int32_t)high_byte << 8);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int | (int32_t)low_byte;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
	pressure_int = pressure_int / 64;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da00      	bge.n	8001be4 <calculate_pressure+0x76>
 8001be2:	333f      	adds	r3, #63	; 0x3f
 8001be4:	119b      	asrs	r3, r3, #6
 8001be6:	60bb      	str	r3, [r7, #8]

	pressure += (float)pressure_int;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc7 7a03 	vstr	s15, [r7, #12]

	return pressure;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	ee07 3a90 	vmov	s15, r3
}
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <calculate_temperature>:

float calculate_temperature (uint8_t temp_lsb, uint8_t temp_msb) {
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	460a      	mov	r2, r1
 8001c1c:	71fb      	strb	r3, [r7, #7]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	71bb      	strb	r3, [r7, #6]
	float temp = 0;
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
	int32_t temp_int = -1;
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	60bb      	str	r3, [r7, #8]
    temp_int = temp_int & (temp_msb << 8);
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
    temp_int = temp_int | (int32_t)temp_lsb;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

    temp_int = temp_int*10/256;
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da00      	bge.n	8001c50 <calculate_temperature+0x3e>
 8001c4e:	33ff      	adds	r3, #255	; 0xff
 8001c50:	121b      	asrs	r3, r3, #8
 8001c52:	60bb      	str	r3, [r7, #8]
    temp = (float)temp_int/10;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c66:	edc7 7a03 	vstr	s15, [r7, #12]
    return temp;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	ee07 3a90 	vmov	s15, r3
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <calculate_altitude>:

float calculate_altitude (uint8_t low_byte, uint8_t high_byte, uint8_t higher_byte) {
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	float altitude = 0;
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
	int32_t altitude_int = -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	60bb      	str	r3, [r7, #8]

    altitude_int = ((int32_t)higher_byte << 24);
 8001c9e:	797b      	ldrb	r3, [r7, #5]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	60bb      	str	r3, [r7, #8]
    altitude_int = altitude_int | ((int32_t)high_byte << 16);
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60bb      	str	r3, [r7, #8]
    altitude_int = altitude_int | ((int32_t)low_byte << 8);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
    altitude = (float)altitude_int/6553500;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ce4 <calculate_altitude+0x64>
 8001cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cca:	edc7 7a03 	vstr	s15, [r7, #12]

    return altitude;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	ee07 3a90 	vmov	s15, r3
}
 8001cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	4ac7ff38 	.word	0x4ac7ff38

08001ce8 <read_data>:

HAL_StatusTypeDef read_data (I2C_HandleTypeDef *hi2c1, uint8_t *low_byte, uint8_t *high_byte, uint8_t *higher_byte,
					uint8_t *temp_lsb, uint8_t *temp_msb) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af04      	add	r7, sp, #16
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retval = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]

    if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x03, 1, low_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2301      	movs	r3, #1
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	21c0      	movs	r1, #192	; 0xc0
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f001 f8d8 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <read_data+0x36>
    	retval = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	75fb      	strb	r3, [r7, #23]
    }

    //high_byte = MPL3115A2_Read(_OUT_P_CSB);
    if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x02, 1, high_byte, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2301      	movs	r3, #1
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2202      	movs	r2, #2
 8001d30:	21c0      	movs	r1, #192	; 0xc0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f001 f8c6 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <read_data+0x5a>
    	retval = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    //higher_byte = MPL3115A2_Read(_OUT_P_MSB);
    if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x01, 1, higher_byte, 1, HAL_MAX_DELAY) != HAL_OK)
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	2201      	movs	r2, #1
 8001d54:	21c0      	movs	r1, #192	; 0xc0
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f001 f8b4 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <read_data+0x7e>
    	retval = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]

    // Temp-Daten:
    if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x04, 1, temp_msb, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	2204      	movs	r2, #4
 8001d78:	21c0      	movs	r1, #192	; 0xc0
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f001 f8a2 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <read_data+0xa2>
    	retval = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_I2C_Mem_Read(hi2c1, 0xC0, 0x05, 1, temp_lsb, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2205      	movs	r2, #5
 8001d9c:	21c0      	movs	r1, #192	; 0xc0
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f001 f890 	bl	8002ec4 <HAL_I2C_Mem_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <read_data+0xc6>
    	retval = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <calibration>:


HAL_StatusTypeDef calibration (I2C_HandleTypeDef *hi2c1) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	6078      	str	r0, [r7, #4]
    uint8_t temp_msb, temp_lsb;
	uint8_t data;
	float calibration_pressure, sea_pressure, current_pressure;

	  // Altitude offset set to 0
	  data = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	72bb      	strb	r3, [r7, #10]
	  HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x2D, 1, &data, 1, HAL_MAX_DELAY);		// 0x2D: altitude offset register; set to 0
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	f107 030a 	add.w	r3, r7, #10
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	222d      	movs	r2, #45	; 0x2d
 8001dd8:	21c0      	movs	r1, #192	; 0xc0
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 ff5e 	bl	8002c9c <HAL_I2C_Mem_Write>

	  // Clear value
	  calibration_pressure = 0;
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]

	  // Calculate current pressure level
	  for (uint8_t i = 0; i < 8; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	76fb      	strb	r3, [r7, #27]
 8001dea:	e049      	b.n	8001e80 <calibration+0xc8>
	    // 0x26: ctrl reg 1, pressure, on, immediate measurement
	    data = 0x3B;	// barometer
 8001dec:	233b      	movs	r3, #59	; 0x3b
 8001dee:	72bb      	strb	r3, [r7, #10]

	    HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY);
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	9302      	str	r3, [sp, #8]
 8001df6:	2301      	movs	r3, #1
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	f107 030a 	add.w	r3, r7, #10
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2301      	movs	r3, #1
 8001e02:	2226      	movs	r2, #38	; 0x26
 8001e04:	21c0      	movs	r1, #192	; 0xc0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 ff48 	bl	8002c9c <HAL_I2C_Mem_Write>

	    //MPL3115A2_Write(_CTRL_REG1, 0b00111001);   // Clear oversampling bit
	    data = 0x39;
 8001e0c:	2339      	movs	r3, #57	; 0x39
 8001e0e:	72bb      	strb	r3, [r7, #10]
	    HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY);
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	2301      	movs	r3, #1
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f107 030a 	add.w	r3, r7, #10
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	2226      	movs	r2, #38	; 0x26
 8001e24:	21c0      	movs	r1, #192	; 0xc0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 ff38 	bl	8002c9c <HAL_I2C_Mem_Write>

	    osDelay(CALIBRATE_DELAY);                             // Wait for sensor to read pressure
 8001e2c:	f240 2026 	movw	r0, #550	; 0x226
 8001e30:	f005 fae2 	bl	80073f8 <osDelay>

	    if (read_data (hi2c1, &low_byte, &high_byte, &higher_byte, &temp_lsb, &temp_msb) != HAL_OK) {
 8001e34:	f107 000d 	add.w	r0, r7, #13
 8001e38:	f107 020e 	add.w	r2, r7, #14
 8001e3c:	f107 010f 	add.w	r1, r7, #15
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f107 030b 	add.w	r3, r7, #11
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff4a 	bl	8001ce8 <read_data>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <calibration+0xa6>
	    	return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e064      	b.n	8001f28 <calibration+0x170>
	    }
	    calibration_pressure += calculate_pressure(low_byte, high_byte, higher_byte);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	7bb9      	ldrb	r1, [r7, #14]
 8001e62:	7b7a      	ldrb	r2, [r7, #13]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe82 	bl	8001b6e <calculate_pressure>
 8001e6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e76:	edc7 7a07 	vstr	s15, [r7, #28]
	  for (uint8_t i = 0; i < 8; i++) {
 8001e7a:	7efb      	ldrb	r3, [r7, #27]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	76fb      	strb	r3, [r7, #27]
 8001e80:	7efb      	ldrb	r3, [r7, #27]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d9b2      	bls.n	8001dec <calibration+0x34>
	  }


	  // Find average value of current pressure level readings
	  current_pressure = calibration_pressure / 8;
 8001e86:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e8a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e92:	edc7 7a05 	vstr	s15, [r7, #20]
//
//	  // Calculate barometric pressure at mean sea level based on a starting altitude
	  sea_pressure = current_pressure /pow(1-START_ALTITUDE*0.0000225577, 5.255877);
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7fe fb66 	bl	8000568 <__aeabi_f2d>
 8001e9c:	a324      	add	r3, pc, #144	; (adr r3, 8001f30 <calibration+0x178>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fce3 	bl	800086c <__aeabi_ddiv>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fe8b 	bl	8000bc8 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]
//
//	  // Calibrate the sensor according to the sea level pressure for the current measurement location (2 Pa per LSB) :
//	  MPL3115A2_Write(_BAR_IN_MSB, (unsigned int)(sea_pressure / 2) >> 8);
	  data = (uint8_t)(sea_pressure / 2) >> 8;
 8001eb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec6:	edc7 7a00 	vstr	s15, [r7]
 8001eca:	783b      	ldrb	r3, [r7, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	121b      	asrs	r3, r3, #8
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	72bb      	strb	r3, [r7, #10]
	  HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x14, 1, &data, 1, HAL_MAX_DELAY);
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	2301      	movs	r3, #1
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	f107 030a 	add.w	r3, r7, #10
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	2214      	movs	r2, #20
 8001ee8:	21c0      	movs	r1, #192	; 0xc0
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fed6 	bl	8002c9c <HAL_I2C_Mem_Write>
//	  MPL3115A2_Write(_BAR_IN_LSB, (unsigned int)(sea_pressure / 2) & 0xFF);
	  data = (uint8_t)(sea_pressure / 2) & 0xFF;
 8001ef0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ef4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f00:	edc7 7a00 	vstr	s15, [r7]
 8001f04:	783b      	ldrb	r3, [r7, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	72bb      	strb	r3, [r7, #10]
	  HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x15, 1, &data, 1, HAL_MAX_DELAY);
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	f107 030a 	add.w	r3, r7, #10
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2215      	movs	r2, #21
 8001f1e:	21c0      	movs	r1, #192	; 0xc0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 febb 	bl	8002c9c <HAL_I2C_Mem_Write>

return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	cb8dea1a 	.word	0xcb8dea1a
 8001f34:	3fef5c3a 	.word	0x3fef5c3a

08001f38 <altitude_read>:


HAL_StatusTypeDef altitude_read (I2C_HandleTypeDef *hi2c1, osMessageQueueId_t data_queueHandle) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af04      	add	r7, sp, #16
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
	uint8_t data, low_byte, high_byte, higher_byte, temp_lsb, temp_msb;
	float altitude;

	  data = 0xBB;	// altimeter
 8001f42:	23bb      	movs	r3, #187	; 0xbb
 8001f44:	74fb      	strb	r3, [r7, #19]
	  HAL_I2C_Mem_Write(hi2c1, 0xC0, 0x26, 1, &data, 1, HAL_MAX_DELAY);
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	f107 0313 	add.w	r3, r7, #19
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2301      	movs	r3, #1
 8001f58:	2226      	movs	r2, #38	; 0x26
 8001f5a:	21c0      	movs	r1, #192	; 0xc0
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fe9d 	bl	8002c9c <HAL_I2C_Mem_Write>
	  if (read_data (hi2c1, &low_byte, &high_byte, &higher_byte, &temp_lsb, &temp_msb) != HAL_OK) {
 8001f62:	f107 0010 	add.w	r0, r7, #16
 8001f66:	f107 0211 	add.w	r2, r7, #17
 8001f6a:	f107 0112 	add.w	r1, r7, #18
 8001f6e:	f107 030e 	add.w	r3, r7, #14
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	f107 030f 	add.w	r3, r7, #15
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff feb3 	bl	8001ce8 <read_data>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <altitude_read+0x54>
		  return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e00e      	b.n	8001faa <altitude_read+0x72>
	  }
	  altitude = calculate_altitude(low_byte, high_byte, higher_byte);
 8001f8c:	7cbb      	ldrb	r3, [r7, #18]
 8001f8e:	7c79      	ldrb	r1, [r7, #17]
 8001f90:	7c3a      	ldrb	r2, [r7, #16]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe74 	bl	8001c80 <calculate_altitude>
 8001f98:	ed87 0a05 	vstr	s0, [r7, #20]

	  data_in_queue("m", altitude, data_queueHandle);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fa2:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <altitude_read+0x7c>)
 8001fa4:	f000 f808 	bl	8001fb8 <data_in_queue>

	    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800d074 	.word	0x0800d074

08001fb8 <data_in_queue>:

void data_in_queue (char *unit, float value, osMessageQueueId_t data_queueHandle) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fc4:	6079      	str	r1, [r7, #4]
	message msg;
    strcpy(msg.unit, unit);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	68f9      	ldr	r1, [r7, #12]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f009 f817 	bl	800b000 <strcpy>
    msg.value = value;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	617b      	str	r3, [r7, #20]
    osMessageQueuePut(data_queueHandle, &msg, 0, osWaitForever);
 8001fd6:	f107 0110 	add.w	r1, r7, #16
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	2200      	movs	r2, #0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f005 fa97 	bl	8007514 <osMessageQueuePut>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <__io_putchar>:
 *          access is not available, and UART is commonly used for logs and debugging output.
 * @param   int ch ... Character to be transmitted.
 * @retval  (int) ... Return character.
 */
int __io_putchar(int ch)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	int ret;
	while ((ret=HAL_UART_GetState(&huart2)) == HAL_UART_STATE_BUSY_TX)
 8001ff8:	bf00      	nop
 8001ffa:	4811      	ldr	r0, [pc, #68]	; (8002040 <__io_putchar+0x50>)
 8001ffc:	f004 f96a 	bl	80062d4 <HAL_UART_GetState>
 8002000:	4603      	mov	r3, r0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b21      	cmp	r3, #33	; 0x21
 8002008:	d0f7      	beq.n	8001ffa <__io_putchar+0xa>
		;

	if (ch == '\n')
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0a      	cmp	r3, #10
 800200e:	d107      	bne.n	8002020 <__io_putchar+0x30>
	{
		static uint8_t buf[2] = { '\r', '\n' };
		HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 8002010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002014:	2202      	movs	r2, #2
 8002016:	490b      	ldr	r1, [pc, #44]	; (8002044 <__io_putchar+0x54>)
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <__io_putchar+0x50>)
 800201a:	f003 fdc9 	bl	8005bb0 <HAL_UART_Transmit>
 800201e:	e00a      	b.n	8002036 <__io_putchar+0x46>
	}
	else
	{
		static char buf;
		buf = ch;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <__io_putchar+0x58>)
 8002026:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, 1, 1000);
 8002028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202c:	2201      	movs	r2, #1
 800202e:	4906      	ldr	r1, [pc, #24]	; (8002048 <__io_putchar+0x58>)
 8002030:	4803      	ldr	r0, [pc, #12]	; (8002040 <__io_putchar+0x50>)
 8002032:	f003 fdbd 	bl	8005bb0 <HAL_UART_Transmit>
	}
	return ch;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200073c4 	.word	0x200073c4
 8002044:	20000014 	.word	0x20000014
 8002048:	2000744c 	.word	0x2000744c

0800204c <_write>:
 * @param   char *ptr ... ptr to data array
 * @param   int len ... length of data to be transmitted (in byte)
 * @retval  (int) ... Return length in byte.
 */
int _write(int file, char *ptr, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e009      	b.n	8002072 <_write+0x26>
		__io_putchar(*ptr++);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ffc2 	bl	8001ff0 <__io_putchar>
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	dbf1      	blt.n	800205e <_write+0x12>
	}
	return len;
 800207a:	687b      	ldr	r3, [r7, #4]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <check_for_buffer_overflow>:
 *
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @return bool true if buffer overflow. Otherwise, false.
 */
bool check_for_buffer_overflow(UART_HandleTypeDef *huart) {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b08      	cmp	r3, #8
 8002098:	bf0c      	ite	eq
 800209a:	2301      	moveq	r3, #1
 800209c:	2300      	movne	r3, #0
 800209e:	b2db      	uxtb	r3, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <clear_buffer_overflow>:
 *
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @return void. This function does not return a value.
 */
void clear_buffer_overflow(UART_HandleTypeDef *huart) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

	__HAL_UART_CLEAR_OREFLAG(huart);//Is cleared without notice
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2208      	movs	r2, #8
 80020ba:	621a      	str	r2, [r3, #32]
	//Discard the received data
	__HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	8b1b      	ldrh	r3, [r3, #24]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0208 	orr.w	r2, r2, #8
 80020cc:	b292      	uxth	r2, r2
 80020ce:	831a      	strh	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_UARTEx_RxEventCallback>:
 * @param UART_HandleTypeDef *huart A pointer to a UART_HandleTypeDef structure that contains
 *               					the configuration information for the specified UART module.
 * @param uint16_t size A variable which holds the number of data available by the UART interface.
 * @return void. This function does not return a value.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_UARTEx_RxEventCallback+0x68>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d11f      	bne.n	8002132 <HAL_UARTEx_RxEventCallback+0x56>

		if(check_for_buffer_overflow(huart)) {
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffc6 	bl	8002084 <check_for_buffer_overflow>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_UARTEx_RxEventCallback+0x3a>
			printf("overflow happened\r\n");
 80020fe:	4812      	ldr	r0, [pc, #72]	; (8002148 <HAL_UARTEx_RxEventCallback+0x6c>)
 8002100:	f008 fd80 	bl	800ac04 <puts>
			clear_buffer_overflow(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffd1 	bl	80020ac <clear_buffer_overflow>
			memcpy(uart_buffer, UART_OVERFLOW, strlen(UART_OVERFLOW));
 800210a:	220d      	movs	r2, #13
 800210c:	490f      	ldr	r1, [pc, #60]	; (800214c <HAL_UARTEx_RxEventCallback+0x70>)
 800210e:	4810      	ldr	r0, [pc, #64]	; (8002150 <HAL_UARTEx_RxEventCallback+0x74>)
 8002110:	f008 ff7e 	bl	800b010 <memcpy>
 8002114:	e008      	b.n	8002128 <HAL_UARTEx_RxEventCallback+0x4c>
		} else {

			memcpy(uart_buffer, rxBuffer_uart_1, size);
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	461a      	mov	r2, r3
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_UARTEx_RxEventCallback+0x78>)
 800211c:	480c      	ldr	r0, [pc, #48]	; (8002150 <HAL_UARTEx_RxEventCallback+0x74>)
 800211e:	f008 ff77 	bl	800b010 <memcpy>

			is_uart_success = true;
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
		}
		memset(rxBuffer_uart_1, 0, MAX_BUFFER_SIZE);
 8002128:	22ff      	movs	r2, #255	; 0xff
 800212a:	2100      	movs	r1, #0
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <HAL_UARTEx_RxEventCallback+0x78>)
 800212e:	f008 fe7d 	bl	800ae2c <memset>
	}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuffer_uart_1, MAX_BUFFER_SIZE);
 8002132:	22ff      	movs	r2, #255	; 0xff
 8002134:	4907      	ldr	r1, [pc, #28]	; (8002154 <HAL_UARTEx_RxEventCallback+0x78>)
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_UARTEx_RxEventCallback+0x80>)
 8002138:	f004 ffee 	bl	8007118 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013800 	.word	0x40013800
 8002148:	0800d078 	.word	0x0800d078
 800214c:	0800d08c 	.word	0x0800d08c
 8002150:	20007550 	.word	0x20007550
 8002154:	20007450 	.word	0x20007450
 8002158:	2000764f 	.word	0x2000764f
 800215c:	2000733c 	.word	0x2000733c

08002160 <send_wifi_command>:
 * @param uint8_t *cmd A pointer to the stored command data.
 * @param uint8_t cmd_size The size in bytes of the to be transfered CMD
 *
 * @return HAL_StatusTypeDef This function returns the status code of the HAL_UART_Transmit function.
 */
HAL_StatusTypeDef send_wifi_command(uint8_t* cmd, uint8_t cmd_size) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result = HAL_UART_Transmit(&huart1, cmd, cmd_size, HAL_MAX_DELAY);
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	b29a      	uxth	r2, r3
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <send_wifi_command+0x3c>)
 8002178:	f003 fd1a 	bl	8005bb0 <HAL_UART_Transmit>
 800217c:	4603      	mov	r3, r0
 800217e:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK) {
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <send_wifi_command+0x32>
		printf("Sending %s failed with %d\r\n", cmd, result);
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	461a      	mov	r2, r3
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4804      	ldr	r0, [pc, #16]	; (80021a0 <send_wifi_command+0x40>)
 800218e:	f008 fcd3 	bl	800ab38 <iprintf>
	}
	return result;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000733c 	.word	0x2000733c
 80021a0:	0800d09c 	.word	0x0800d09c

080021a4 <receive_wifi_command>:
 *
 * @param uint8_t *cmd A pointer to the stored command data.
 *
 * @return void This function does not return a value.
 */
bool receive_wifi_command(uint8_t* cmd) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	osDelay(400);
 80021ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021b0:	f005 f922 	bl	80073f8 <osDelay>
	if(is_uart_success == true) {
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <receive_wifi_command+0x64>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01b      	beq.n	80021f6 <receive_wifi_command+0x52>
		printf("\r\nReceived from %s\r\n", cmd);
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4812      	ldr	r0, [pc, #72]	; (800220c <receive_wifi_command+0x68>)
 80021c2:	f008 fcb9 	bl	800ab38 <iprintf>
		printf("%s\r\n", uart_buffer);
 80021c6:	4912      	ldr	r1, [pc, #72]	; (8002210 <receive_wifi_command+0x6c>)
 80021c8:	4812      	ldr	r0, [pc, #72]	; (8002214 <receive_wifi_command+0x70>)
 80021ca:	f008 fcb5 	bl	800ab38 <iprintf>
		if (strcmp((char*)uart_buffer, "OK") == 0) {
 80021ce:	4912      	ldr	r1, [pc, #72]	; (8002218 <receive_wifi_command+0x74>)
 80021d0:	480f      	ldr	r0, [pc, #60]	; (8002210 <receive_wifi_command+0x6c>)
 80021d2:	f7fd fffd 	bl	80001d0 <strcmp>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <receive_wifi_command+0x3e>
			no_tcp_connection = true;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <receive_wifi_command+0x78>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
		}
		memset(uart_buffer, 0, MAX_BUFFER_SIZE);
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	2100      	movs	r1, #0
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <receive_wifi_command+0x6c>)
 80021e8:	f008 fe20 	bl	800ae2c <memset>
	}
	else {
		printf("\r\nReceiving %s failed\r\n", cmd);
		return false;
	}
	is_uart_success = false;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <receive_wifi_command+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	return true;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e004      	b.n	8002200 <receive_wifi_command+0x5c>
		printf("\r\nReceiving %s failed\r\n", cmd);
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <receive_wifi_command+0x7c>)
 80021fa:	f008 fc9d 	bl	800ab38 <iprintf>
		return false;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000764f 	.word	0x2000764f
 800220c:	0800d0b8 	.word	0x0800d0b8
 8002210:	20007550 	.word	0x20007550
 8002214:	0800d0d0 	.word	0x0800d0d0
 8002218:	0800d0d8 	.word	0x0800d0d8
 800221c:	20000281 	.word	0x20000281
 8002220:	0800d0dc 	.word	0x0800d0dc

08002224 <send_TCP_command>:
 *
 * @param const char* command A pointer to the stored command data.
 *
 * @return void This function does not return a value.
 */
HAL_StatusTypeDef send_TCP_command(const char* command) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	char buffer[16];
	HAL_StatusTypeDef result;
	snprintf(buffer, sizeof(buffer), "AT+CIPSEND=%d\r\n", strlen(command));
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fe f82f 	bl	8000290 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	f107 000c 	add.w	r0, r7, #12
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <send_TCP_command+0x8c>)
 800223a:	2110      	movs	r1, #16
 800223c:	f008 fcea 	bl	800ac14 <sniprintf>
	result = HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f823 	bl	8000290 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	b29a      	uxth	r2, r3
 800224e:	f107 010c 	add.w	r1, r7, #12
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	4817      	ldr	r0, [pc, #92]	; (80022b4 <send_TCP_command+0x90>)
 8002258:	f003 fcaa 	bl	8005bb0 <HAL_UART_Transmit>
 800225c:	4603      	mov	r3, r0
 800225e:	77fb      	strb	r3, [r7, #31]
	if (result != HAL_OK) {
 8002260:	7ffb      	ldrb	r3, [r7, #31]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <send_TCP_command+0x46>
		return result;
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	e01e      	b.n	80022a8 <send_TCP_command+0x84>
	}
	osDelay(1000);  // Delay for CIPSEND ready signal
 800226a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226e:	f005 f8c3 	bl	80073f8 <osDelay>
	result = HAL_UART_Transmit(&huart1, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f80c 	bl	8000290 <strlen>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <send_TCP_command+0x90>)
 8002284:	f003 fc94 	bl	8005bb0 <HAL_UART_Transmit>
 8002288:	4603      	mov	r3, r0
 800228a:	77fb      	strb	r3, [r7, #31]
	if (!receive_wifi_command((uint8_t*)buffer)) {
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff87 	bl	80021a4 <receive_wifi_command>
 8002296:	4603      	mov	r3, r0
 8002298:	f083 0301 	eor.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <send_TCP_command+0x82>
		result = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	77fb      	strb	r3, [r7, #31]
	}
	return result;
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	0800d0f4 	.word	0x0800d0f4
 80022b4:	2000733c 	.word	0x2000733c

080022b8 <check_wifi_response>:
 *
 * @param uint8_t* response A pointer to a buffer which holds the response message of the wifi-click.
 *
 * @return void This function does not return a value.
 */
bool check_wifi_response(uint8_t* response){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	bool result = true;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(200);
 80022c4:	20c8      	movs	r0, #200	; 0xc8
 80022c6:	f000 f937 	bl	8002538 <HAL_Delay>
	if(is_uart_success == true) {
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <check_wifi_response+0x5c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <check_wifi_response+0x42>
		printf("\r\nReceived %s\r\n", uart_buffer);
 80022d4:	4910      	ldr	r1, [pc, #64]	; (8002318 <check_wifi_response+0x60>)
 80022d6:	4811      	ldr	r0, [pc, #68]	; (800231c <check_wifi_response+0x64>)
 80022d8:	f008 fc2e 	bl	800ab38 <iprintf>
		memcpy(response,uart_buffer, strlen((char*)uart_buffer));
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <check_wifi_response+0x60>)
 80022de:	f7fd ffd7 	bl	8000290 <strlen>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <check_wifi_response+0x60>)
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f008 fe91 	bl	800b010 <memcpy>
		memset(uart_buffer, 0, MAX_BUFFER_SIZE);
 80022ee:	22ff      	movs	r2, #255	; 0xff
 80022f0:	2100      	movs	r1, #0
 80022f2:	4809      	ldr	r0, [pc, #36]	; (8002318 <check_wifi_response+0x60>)
 80022f4:	f008 fd9a 	bl	800ae2c <memset>
 80022f8:	e004      	b.n	8002304 <check_wifi_response+0x4c>
	}
	else {
		result = false;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
		printf("\r\nReceiving failed\r\n");
 80022fe:	4808      	ldr	r0, [pc, #32]	; (8002320 <check_wifi_response+0x68>)
 8002300:	f008 fc80 	bl	800ac04 <puts>
	}
	is_uart_success = false;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <check_wifi_response+0x5c>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
	return result;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000764f 	.word	0x2000764f
 8002318:	20007550 	.word	0x20007550
 800231c:	0800d104 	.word	0x0800d104
 8002320:	0800d114 	.word	0x0800d114

08002324 <wifi_init_stage_and_TCP_check>:

bool wifi_init_stage_and_TCP_check(uint8_t* cmd) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	bool result = true;
 800232c:	2301      	movs	r3, #1
 800232e:	73fb      	strb	r3, [r7, #15]
	if (send_wifi_command(cmd, strlen((char*)cmd)) == HAL_OK) {
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fd ffad 	bl	8000290 <strlen>
 8002336:	4603      	mov	r3, r0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff0f 	bl	8002160 <send_wifi_command>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <wifi_init_stage_and_TCP_check+0x44>
		printf("%s sent\n", cmd);
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	480b      	ldr	r0, [pc, #44]	; (8002378 <wifi_init_stage_and_TCP_check+0x54>)
 800234c:	f008 fbf4 	bl	800ab38 <iprintf>
		if (!receive_wifi_command(cmd)) {
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff27 	bl	80021a4 <receive_wifi_command>
 8002356:	4603      	mov	r3, r0
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <wifi_init_stage_and_TCP_check+0x48>
			result = false;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e001      	b.n	800236c <wifi_init_stage_and_TCP_check+0x48>
		}
	} else {
		result = false;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
	}
	return result;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	0800d128 	.word	0x0800d128

0800237c <wifi_init>:

bool wifi_init() {
 800237c:	b580      	push	{r7, lr}
 800237e:	b0c2      	sub	sp, #264	; 0x108
 8002380:	af00      	add	r7, sp, #0
	bool success_check = false;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	bool response_check = false;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	uint8_t response_buffer[MAX_BUFFER_SIZE];

	clear_buffer_overflow(&huart1);
 800238e:	4844      	ldr	r0, [pc, #272]	; (80024a0 <wifi_init+0x124>)
 8002390:	f7ff fe8c 	bl	80020ac <clear_buffer_overflow>
	clear_buffer_overflow(&huart2);
 8002394:	4843      	ldr	r0, [pc, #268]	; (80024a4 <wifi_init+0x128>)
 8002396:	f7ff fe89 	bl	80020ac <clear_buffer_overflow>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuffer_uart_1, MAX_BUFFER_SIZE);
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	4942      	ldr	r1, [pc, #264]	; (80024a8 <wifi_init+0x12c>)
 800239e:	4840      	ldr	r0, [pc, #256]	; (80024a0 <wifi_init+0x124>)
 80023a0:	f004 feba 	bl	8007118 <HAL_UARTEx_ReceiveToIdle_IT>

	do {
		success_check = wifi_init_stage_and_TCP_check(restore_factory);
 80023a4:	4841      	ldr	r0, [pc, #260]	; (80024ac <wifi_init+0x130>)
 80023a6:	f7ff ffbd 	bl	8002324 <wifi_init_stage_and_TCP_check>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	} while (!success_check);
 80023b0:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80023b4:	f083 0301 	eor.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f2      	bne.n	80023a4 <wifi_init+0x28>
	osDelay(3 * WIFI_DELAY);
 80023be:	f643 2098 	movw	r0, #15000	; 0x3a98
 80023c2:	f005 f819 	bl	80073f8 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(rst_cmd);
 80023c6:	483a      	ldr	r0, [pc, #232]	; (80024b0 <wifi_init+0x134>)
 80023c8:	f7ff ffac 	bl	8002324 <wifi_init_stage_and_TCP_check>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	} while (!success_check);
 80023d2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f2      	bne.n	80023c6 <wifi_init+0x4a>
	osDelay(WIFI_DELAY);
 80023e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80023e4:	f005 f808 	bl	80073f8 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(set_cwmode_cmd);
 80023e8:	4832      	ldr	r0, [pc, #200]	; (80024b4 <wifi_init+0x138>)
 80023ea:	f7ff ff9b 	bl	8002324 <wifi_init_stage_and_TCP_check>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	} while (!success_check);
 80023f4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f2      	bne.n	80023e8 <wifi_init+0x6c>
	osDelay(WIFI_DELAY);
 8002402:	f241 3088 	movw	r0, #5000	; 0x1388
 8002406:	f004 fff7 	bl	80073f8 <osDelay>

	do {
		success_check = wifi_init_stage_and_TCP_check(connect_to_ap);
 800240a:	482b      	ldr	r0, [pc, #172]	; (80024b8 <wifi_init+0x13c>)
 800240c:	f7ff ff8a 	bl	8002324 <wifi_init_stage_and_TCP_check>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	} while (!success_check);
 8002416:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f2      	bne.n	800240a <wifi_init+0x8e>
	osDelay(4 * WIFI_DELAY);
 8002424:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002428:	f004 ffe6 	bl	80073f8 <osDelay>

	//		send_wifi_command(at_cmd, ARRAY_SIZE(at_cmd));
	//		receive_wifi_command(at_cmd);

	while (!response_check) {
 800242c:	e026      	b.n	800247c <wifi_init+0x100>
		if (send_wifi_command(connect_to_TCP, ARRAY_SIZE(connect_to_TCP))
 800242e:	2127      	movs	r1, #39	; 0x27
 8002430:	4822      	ldr	r0, [pc, #136]	; (80024bc <wifi_init+0x140>)
 8002432:	f7ff fe95 	bl	8002160 <send_wifi_command>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11b      	bne.n	8002474 <wifi_init+0xf8>
				== HAL_OK) {
			if (!check_wifi_response(response_buffer)) {
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff3a 	bl	80022b8 <check_wifi_response>
 8002444:	4603      	mov	r3, r0
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d000      	beq.n	8002452 <wifi_init+0xd6>
				continue;
 8002450:	e014      	b.n	800247c <wifi_init+0x100>
			}
			if (strstr((char*) response_buffer, "CONNECT")) {
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	491a      	ldr	r1, [pc, #104]	; (80024c0 <wifi_init+0x144>)
 8002456:	4618      	mov	r0, r3
 8002458:	f008 fcf0 	bl	800ae3c <strstr>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <wifi_init+0xf8>
				response_check = true;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				memset(response_buffer, 0, MAX_BUFFER_SIZE);
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f008 fcdc 	bl	800ae2c <memset>
			}
		}
		osDelay(SECOND);
 8002474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002478:	f004 ffbe 	bl	80073f8 <osDelay>
	while (!response_check) {
 800247c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002480:	f083 0301 	eor.w	r3, r3, #1
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1d1      	bne.n	800242e <wifi_init+0xb2>
	}
	no_tcp_connection = false;
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <wifi_init+0x148>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]

	return success_check;
 8002490:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 8002494:	4618      	mov	r0, r3
 8002496:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000733c 	.word	0x2000733c
 80024a4:	200073c4 	.word	0x200073c4
 80024a8:	20007450 	.word	0x20007450
 80024ac:	20000018 	.word	0x20000018
 80024b0:	20000028 	.word	0x20000028
 80024b4:	20000034 	.word	0x20000034
 80024b8:	20000044 	.word	0x20000044
 80024bc:	20000068 	.word	0x20000068
 80024c0:	0800d134 	.word	0x0800d134
 80024c4:	20000281 	.word	0x20000281

080024c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f901 	bl	80026da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d8:	200f      	movs	r0, #15
 80024da:	f7ff f899 	bl	8001610 <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	71fb      	strb	r3, [r7, #7]
 80024e8:	e001      	b.n	80024ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024ea:	f7ff f869 	bl	80015c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000094 	.word	0x20000094
 800251c:	20007650 	.word	0x20007650

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20007650 	.word	0x20007650

08002538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000094 	.word	0x20000094

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff4c 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002702:	f7ff ff61 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff ffb1 	bl	8002674 <NVIC_EncodePriority>
 8002712:	4602      	mov	r2, r0
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff80 	bl	8002620 <__NVIC_SetPriority>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff54 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d008      	beq.n	800276e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e022      	b.n	80027b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020e 	bic.w	r2, r2, #14
 800277c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 021c 	and.w	r2, r3, #28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d005      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2204      	movs	r2, #4
 80027dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	e029      	b.n	8002838 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f003 021c 	and.w	r2, r3, #28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
    }
  }
  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002850:	b2db      	uxtb	r3, r3
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	e148      	b.n	8002b02 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2101      	movs	r1, #1
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 813a 	beq.w	8002afc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_GPIO_Init+0x40>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d130      	bne.n	8002902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d6:	2201      	movs	r2, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	f003 0201 	and.w	r2, r3, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b03      	cmp	r3, #3
 800290c:	d017      	beq.n	800293e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d123      	bne.n	8002992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	08da      	lsrs	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3208      	adds	r2, #8
 8002952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 8094 	beq.w	8002afc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6613      	str	r3, [r2, #96]	; 0x60
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x2c0>)
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <HAL_GPIO_Init+0x2c4>)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x1d4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <HAL_GPIO_Init+0x2c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x1d0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a42      	ldr	r2, [pc, #264]	; (8002b2c <HAL_GPIO_Init+0x2cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x1cc>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e004      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	e002      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_GPIO_Init+0x1d6>
 8002a34:	2300      	movs	r3, #0
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	f002 0203 	and.w	r2, r2, #3
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	4093      	lsls	r3, r2
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a46:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_GPIO_Init+0x2c4>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a78:	4a2d      	ldr	r2, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <HAL_GPIO_Init+0x2d0>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3301      	adds	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f aeaf 	bne.w	8002870 <HAL_GPIO_Init+0x10>
  }
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fc20 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	e006      	b.n	8002bec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d108      	bne.n	8002c06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	e007      	b.n	8002c16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 80f9 	bne.w	8002eb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x34>
 8002cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0ed      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Mem_Write+0x4e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0e6      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cf2:	f7ff fc15 	bl	8002520 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2319      	movs	r3, #25
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 ffec 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d1      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2221      	movs	r2, #33	; 0x21
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d3c:	88f8      	ldrh	r0, [r7, #6]
 8002d3e:	893a      	ldrh	r2, [r7, #8]
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb81 	bl	8003454 <I2C_RequestMemoryWrite>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0a9      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d90e      	bls.n	8002d8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f001 f965 	bl	8004054 <I2C_TransferConfig>
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	8979      	ldrh	r1, [r7, #10]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f954 	bl	8004054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 ffe5 	bl	8003d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e07b      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d034      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x1c8>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d130      	bne.n	8002e64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2180      	movs	r1, #128	; 0x80
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 ff68 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e04d      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2bff      	cmp	r3, #255	; 0xff
 8002e24:	d90e      	bls.n	8002e44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	8979      	ldrh	r1, [r7, #10]
 8002e34:	2300      	movs	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f001 f909 	bl	8004054 <I2C_TransferConfig>
 8002e42:	e00f      	b.n	8002e64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f001 f8f8 	bl	8004054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d19e      	bne.n	8002dac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 ffcb 	bl	8003e0e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e01a      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2220      	movs	r2, #32
 8002e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_I2C_Mem_Write+0x224>)
 8002e96:	400b      	ands	r3, r1
 8002e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
  }
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fe00e800 	.word	0xfe00e800

08002ec4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	817b      	strh	r3, [r7, #10]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	813b      	strh	r3, [r7, #8]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	f040 80fd 	bne.w	80030e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_I2C_Mem_Read+0x34>
 8002ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0f1      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Mem_Read+0x4e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0ea      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f1a:	f7ff fb01 	bl	8002520 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2319      	movs	r3, #25
 8002f26:	2201      	movs	r2, #1
 8002f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fed8 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d5      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2222      	movs	r2, #34	; 0x22
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2240      	movs	r2, #64	; 0x40
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f64:	88f8      	ldrh	r0, [r7, #6]
 8002f66:	893a      	ldrh	r2, [r7, #8]
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4603      	mov	r3, r0
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fac1 	bl	80034fc <I2C_RequestMemoryRead>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0ad      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2bff      	cmp	r3, #255	; 0xff
 8002f94:	d90e      	bls.n	8002fb4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	22ff      	movs	r2, #255	; 0xff
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	8979      	ldrh	r1, [r7, #10]
 8002fa4:	4b52      	ldr	r3, [pc, #328]	; (80030f0 <HAL_I2C_Mem_Read+0x22c>)
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f001 f851 	bl	8004054 <I2C_TransferConfig>
 8002fb2:	e00f      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_I2C_Mem_Read+0x22c>)
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f001 f840 	bl	8004054 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2104      	movs	r1, #4
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fe7f 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07c      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d034      	beq.n	8003094 <HAL_I2C_Mem_Read+0x1d0>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	2b00      	cmp	r3, #0
 8003030:	d130      	bne.n	8003094 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2200      	movs	r2, #0
 800303a:	2180      	movs	r1, #128	; 0x80
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fe50 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04d      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2bff      	cmp	r3, #255	; 0xff
 8003054:	d90e      	bls.n	8003074 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22ff      	movs	r2, #255	; 0xff
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fff1 	bl	8004054 <I2C_TransferConfig>
 8003072:	e00f      	b.n	8003094 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003082:	b2da      	uxtb	r2, r3
 8003084:	8979      	ldrh	r1, [r7, #10]
 8003086:	2300      	movs	r3, #0
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 ffe0 	bl	8004054 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d19a      	bne.n	8002fd4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 feb3 	bl	8003e0e <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e01a      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2220      	movs	r2, #32
 80030b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_I2C_Mem_Read+0x230>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	80002400 	.word	0x80002400
 80030f4:	fe00e800 	.word	0xfe00e800

080030f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
  }
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00f      	beq.n	800316e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00f      	beq.n	8003198 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f043 0208 	orr.w	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003196:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00f      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0202 	orr.w	r2, r3, #2
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 030b 	and.w	r3, r3, #11
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fc2b 	bl	8003a30 <I2C_ITError>
  }
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
 8003216:	4613      	mov	r3, r2
 8003218:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <I2C_Slave_ISR_IT+0x24>
 8003282:	2302      	movs	r3, #2
 8003284:	e0e1      	b.n	800344a <I2C_Slave_ISR_IT+0x1e8>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80032a2:	6939      	ldr	r1, [r7, #16]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fa5d 	bl	8003764 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d04b      	beq.n	800334c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d046      	beq.n	800334c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d128      	bne.n	800331a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b28      	cmp	r3, #40	; 0x28
 80032d2:	d108      	bne.n	80032e6 <I2C_Slave_ISR_IT+0x84>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032da:	d104      	bne.n	80032e6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80032dc:	6939      	ldr	r1, [r7, #16]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fb52 	bl	8003988 <I2C_ITListenCplt>
 80032e4:	e031      	b.n	800334a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b29      	cmp	r3, #41	; 0x29
 80032f0:	d10e      	bne.n	8003310 <I2C_Slave_ISR_IT+0xae>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f8:	d00a      	beq.n	8003310 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2210      	movs	r2, #16
 8003300:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fcab 	bl	8003c5e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f9cf 	bl	80036ac <I2C_ITSlaveSeqCplt>
 800330e:	e01c      	b.n	800334a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003318:	e08f      	b.n	800343a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <I2C_Slave_ISR_IT+0xda>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333a:	d17e      	bne.n	800343a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	4619      	mov	r1, r3
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fb74 	bl	8003a30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003348:	e077      	b.n	800343a <I2C_Slave_ISR_IT+0x1d8>
 800334a:	e076      	b.n	800343a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d02f      	beq.n	80033b6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800335c:	2b00      	cmp	r3, #0
 800335e:	d02a      	beq.n	80033b6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d14b      	bne.n	800343e <I2C_Slave_ISR_IT+0x1dc>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ac:	d047      	beq.n	800343e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f97c 	bl	80036ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80033b4:	e043      	b.n	800343e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8e9 	bl	80035a4 <I2C_ITAddrCplt>
 80033d2:	e035      	b.n	8003440 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d030      	beq.n	8003440 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02b      	beq.n	8003440 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	781a      	ldrb	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
 8003422:	e00d      	b.n	8003440 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342a:	d002      	beq.n	8003432 <I2C_Slave_ISR_IT+0x1d0>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f93a 	bl	80036ac <I2C_ITSlaveSeqCplt>
 8003438:	e002      	b.n	8003440 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800343e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	817b      	strh	r3, [r7, #10]
 8003466:	460b      	mov	r3, r1
 8003468:	813b      	strh	r3, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	8979      	ldrh	r1, [r7, #10]
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <I2C_RequestMemoryWrite+0xa4>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fde9 	bl	8004054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fc7a 	bl	8003d80 <I2C_WaitOnTXISFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e02c      	b.n	80034f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
 80034a6:	e015      	b.n	80034d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fc60 	bl	8003d80 <I2C_WaitOnTXISFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e012      	b.n	80034f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ca:	893b      	ldrh	r3, [r7, #8]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2200      	movs	r2, #0
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fbff 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	80002000 	.word	0x80002000

080034fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	817b      	strh	r3, [r7, #10]
 800350e:	460b      	mov	r3, r1
 8003510:	813b      	strh	r3, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <I2C_RequestMemoryRead+0xa4>)
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fd96 	bl	8004054 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fc27 	bl	8003d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e02c      	b.n	8003596 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003542:	893b      	ldrh	r3, [r7, #8]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
 800354c:	e015      	b.n	800357a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800354e:	893b      	ldrh	r3, [r7, #8]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	b29b      	uxth	r3, r3
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	69b9      	ldr	r1, [r7, #24]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fc0d 	bl	8003d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e012      	b.n	8003596 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003570:	893b      	ldrh	r3, [r7, #8]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2200      	movs	r2, #0
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fbac 	bl	8003ce2 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	80002000 	.word	0x80002000

080035a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ba:	2b28      	cmp	r3, #40	; 0x28
 80035bc:	d16a      	bne.n	8003694 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035dc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035f8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d138      	bne.n	8003674 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	09db      	lsrs	r3, r3, #7
 8003606:	b29a      	uxth	r2, r3
 8003608:	89bb      	ldrh	r3, [r7, #12]
 800360a:	4053      	eors	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11c      	bne.n	8003650 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003628:	2b02      	cmp	r3, #2
 800362a:	d13b      	bne.n	80036a4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003642:	89ba      	ldrh	r2, [r7, #12]
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff fdde 	bl	800320a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800364e:	e029      	b.n	80036a4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fd2d 	bl	80040b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003666:	89ba      	ldrh	r2, [r7, #12]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fdcc 	bl	800320a <HAL_I2C_AddrCallback>
}
 8003672:	e017      	b.n	80036a4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003674:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fd1d 	bl	80040b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003686:	89ba      	ldrh	r2, [r7, #12]
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fdbc 	bl	800320a <HAL_I2C_AddrCallback>
}
 8003692:	e007      	b.n	80036a4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e00c      	b.n	80036fa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b29      	cmp	r3, #41	; 0x29
 8003704:	d112      	bne.n	800372c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2228      	movs	r2, #40	; 0x28
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2221      	movs	r2, #33	; 0x21
 8003712:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003714:	2101      	movs	r1, #1
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fcce 	bl	80040b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff fd5c 	bl	80031e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800372a:	e017      	b.n	800375c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b2a      	cmp	r3, #42	; 0x2a
 8003736:	d111      	bne.n	800375c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2228      	movs	r2, #40	; 0x28
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2222      	movs	r2, #34	; 0x22
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003746:	2102      	movs	r1, #2
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fcb5 	bl	80040b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fd4d 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003780:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2220      	movs	r2, #32
 8003788:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b21      	cmp	r3, #33	; 0x21
 800378e:	d002      	beq.n	8003796 <I2C_ITSlaveCplt+0x32>
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b29      	cmp	r3, #41	; 0x29
 8003794:	d108      	bne.n	80037a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003796:	f248 0101 	movw	r1, #32769	; 0x8001
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fc8c 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2221      	movs	r2, #33	; 0x21
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
 80037a6:	e019      	b.n	80037dc <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b22      	cmp	r3, #34	; 0x22
 80037ac:	d002      	beq.n	80037b4 <I2C_ITSlaveCplt+0x50>
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b2a      	cmp	r3, #42	; 0x2a
 80037b2:	d108      	bne.n	80037c6 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80037b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fc7d 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2222      	movs	r2, #34	; 0x22
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
 80037c4:	e00a      	b.n	80037dc <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b28      	cmp	r3, #40	; 0x28
 80037ca:	d107      	bne.n	80037dc <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80037cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fc71 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b62      	ldr	r3, [pc, #392]	; (8003980 <I2C_ITSlaveCplt+0x21c>)
 80037f8:	400b      	ands	r3, r1
 80037fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa2e 	bl	8003c5e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800381a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003832:	e017      	b.n	8003864 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8a4 	bl	8003a30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b28      	cmp	r3, #40	; 0x28
 80038f2:	d141      	bne.n	8003978 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f846 	bl	8003988 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038fc:	e03c      	b.n	8003978 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003906:	d014      	beq.n	8003932 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fecf 	bl	80036ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <I2C_ITSlaveCplt+0x220>)
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fc7b 	bl	8003226 <HAL_I2C_ListenCpltCallback>
}
 8003930:	e022      	b.n	8003978 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b22      	cmp	r3, #34	; 0x22
 800393c:	d10e      	bne.n	800395c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fc4e 	bl	80031f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800395a:	e00d      	b.n	8003978 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fc35 	bl	80031e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003978:	bf00      	nop
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	fe00e800 	.word	0xfe00e800
 8003984:	ffff0000 	.word	0xffff0000

08003988 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <I2C_ITListenCplt+0xa4>)
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d022      	beq.n	8003a04 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a04:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fb55 	bl	80040b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2210      	movs	r2, #16
 8003a14:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fc01 	bl	8003226 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	ffff0000 	.word	0xffff0000

08003a30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a40:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a6d      	ldr	r2, [pc, #436]	; (8003c04 <I2C_ITError+0x1d4>)
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b28      	cmp	r3, #40	; 0x28
 8003a66:	d005      	beq.n	8003a74 <I2C_ITError+0x44>
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b29      	cmp	r3, #41	; 0x29
 8003a6c:	d002      	beq.n	8003a74 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b2a      	cmp	r3, #42	; 0x2a
 8003a72:	d10b      	bne.n	8003a8c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a74:	2103      	movs	r1, #3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb1e 	bl	80040b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2228      	movs	r2, #40	; 0x28
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a60      	ldr	r2, [pc, #384]	; (8003c08 <I2C_ITError+0x1d8>)
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34
 8003a8a:	e030      	b.n	8003aee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fb11 	bl	80040b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8e1 	bl	8003c5e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d01f      	beq.n	8003ae8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d114      	bne.n	8003ae8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d109      	bne.n	8003ae0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2210      	movs	r2, #16
 8003ad2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d039      	beq.n	8003b70 <I2C_ITError+0x140>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b11      	cmp	r3, #17
 8003b00:	d002      	beq.n	8003b08 <I2C_ITError+0xd8>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b21      	cmp	r3, #33	; 0x21
 8003b06:	d133      	bne.n	8003b70 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b16:	d107      	bne.n	8003b28 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fe88 	bl	8002842 <HAL_DMA_GetState>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d017      	beq.n	8003b68 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	4a33      	ldr	r2, [pc, #204]	; (8003c0c <I2C_ITError+0x1dc>)
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fe37 	bl	80027c0 <HAL_DMA_Abort_IT>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04d      	beq.n	8003bf4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b66:	e045      	b.n	8003bf4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f851 	bl	8003c10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b6e:	e041      	b.n	8003bf4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d039      	beq.n	8003bec <I2C_ITError+0x1bc>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b12      	cmp	r3, #18
 8003b7c:	d002      	beq.n	8003b84 <I2C_ITError+0x154>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b22      	cmp	r3, #34	; 0x22
 8003b82:	d133      	bne.n	8003bec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d107      	bne.n	8003ba4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe fe4a 	bl	8002842 <HAL_DMA_GetState>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d017      	beq.n	8003be4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <I2C_ITError+0x1dc>)
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fdf9 	bl	80027c0 <HAL_DMA_Abort_IT>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d011      	beq.n	8003bf8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bde:	4610      	mov	r0, r2
 8003be0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003be2:	e009      	b.n	8003bf8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f813 	bl	8003c10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bea:	e005      	b.n	8003bf8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f80f 	bl	8003c10 <I2C_TreatErrorCallback>
  }
}
 8003bf2:	e002      	b.n	8003bfa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bf8:	bf00      	nop
}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	ffff0000 	.word	0xffff0000
 8003c08:	08003263 	.word	0x08003263
 8003c0c:	08003ca7 	.word	0x08003ca7

08003c10 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b60      	cmp	r3, #96	; 0x60
 8003c22:	d10e      	bne.n	8003c42 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fb07 	bl	800324e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c40:	e009      	b.n	8003c56 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff faf2 	bl	800323a <HAL_I2C_ErrorCallback>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d103      	bne.n	8003c7c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d007      	beq.n	8003c9a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	619a      	str	r2, [r3, #24]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff9b 	bl	8003c10 <I2C_TreatErrorCallback>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf2:	e031      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d02d      	beq.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fe fc10 	bl	8002520 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d122      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	bf0c      	ite	eq
 8003d22:	2301      	moveq	r3, #1
 8003d24:	2300      	movne	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d113      	bne.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e00f      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d0be      	beq.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d8c:	e033      	b.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f87e 	bl	8003e94 <I2C_IsErrorOccurred>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e031      	b.n	8003e06 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d025      	beq.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fbb9 	bl	8002520 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d11a      	bne.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d013      	beq.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d1c4      	bne.n	8003d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e1a:	e02f      	b.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f837 	bl	8003e94 <I2C_IsErrorOccurred>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e02d      	b.n	8003e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fe fb76 	bl	8002520 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11a      	bne.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d013      	beq.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d1c8      	bne.n	8003e1c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d068      	beq.n	8003f92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ec8:	e049      	b.n	8003f5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d045      	beq.n	8003f5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ed2:	f7fe fb25 	bl	8002520 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <I2C_IsErrorOccurred+0x54>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d13a      	bne.n	8003f5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003efa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0a:	d121      	bne.n	8003f50 <I2C_IsErrorOccurred+0xbc>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f12:	d01d      	beq.n	8003f50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d01a      	beq.n	8003f50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f2a:	f7fe faf9 	bl	8002520 <HAL_GetTick>
 8003f2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f30:	e00e      	b.n	8003f50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f32:	f7fe faf5 	bl	8002520 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b19      	cmp	r3, #25
 8003f3e:	d907      	bls.n	8003f50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f043 0320 	orr.w	r3, r3, #32
 8003f46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f4e:	e006      	b.n	8003f5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d1e9      	bne.n	8003f32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d003      	beq.n	8003f74 <I2C_IsErrorOccurred+0xe0>
 8003f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0aa      	beq.n	8003eca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2220      	movs	r2, #32
 8003f82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f043 0304 	orr.w	r3, r3, #4
 8003f8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01c      	beq.n	8004042 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff fe28 	bl	8003c5e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <I2C_IsErrorOccurred+0x1bc>)
 800401a:	400b      	ands	r3, r1
 800401c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004046:	4618      	mov	r0, r3
 8004048:	3728      	adds	r7, #40	; 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	fe00e800 	.word	0xfe00e800

08004054 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	4613      	mov	r3, r2
 8004064:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004066:	897b      	ldrh	r3, [r7, #10]
 8004068:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800406c:	7a7b      	ldrb	r3, [r7, #9]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004074:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	4313      	orrs	r3, r2
 800407e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004082:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	0d5b      	lsrs	r3, r3, #21
 800408e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <I2C_TransferConfig+0x60>)
 8004094:	430b      	orrs	r3, r1
 8004096:	43db      	mvns	r3, r3
 8004098:	ea02 0103 	and.w	r1, r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	03ff63ff 	.word	0x03ff63ff

080040b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00f      	beq.n	80040f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80040d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040e6:	2b28      	cmp	r3, #40	; 0x28
 80040e8:	d003      	beq.n	80040f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00f      	beq.n	800411c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004102:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004110:	2b28      	cmp	r3, #40	; 0x28
 8004112:	d003      	beq.n	800411c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800411a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800411c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da03      	bge.n	800412c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800412a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	2b10      	cmp	r3, #16
 8004130:	d103      	bne.n	800413a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	2b20      	cmp	r3, #32
 800413e:	d103      	bne.n	8004148 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f043 0320 	orr.w	r3, r3, #32
 8004146:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d103      	bne.n	8004156 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004154:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d138      	bne.n	80041fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004194:	2302      	movs	r3, #2
 8004196:	e032      	b.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b20      	cmp	r3, #32
 800421e:	d139      	bne.n	8004294 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422a:	2302      	movs	r3, #2
 800422c:	e033      	b.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2224      	movs	r2, #36	; 0x24
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800425c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000

080042c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_PWREx_GetVoltageRange+0x18>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40007000 	.word	0x40007000

080042e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ee:	d130      	bne.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fc:	d038      	beq.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2232      	movs	r2, #50	; 0x32
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0c9b      	lsrs	r3, r3, #18
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004324:	e002      	b.n	800432c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3b01      	subs	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d102      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f2      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d110      	bne.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00f      	b.n	8004372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d007      	beq.n	8004370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004368:	4a05      	ldr	r2, [pc, #20]	; (8004380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800436e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40007000 	.word	0x40007000
 8004384:	20000010 	.word	0x20000010
 8004388:	431bde83 	.word	0x431bde83

0800438c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f000 bc02 	b.w	8004ba4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a0:	4b96      	ldr	r3, [pc, #600]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043aa:	4b94      	ldr	r3, [pc, #592]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80e4 	beq.w	800458a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d007      	beq.n	80043d8 <HAL_RCC_OscConfig+0x4c>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	f040 808b 	bne.w	80044e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	f040 8087 	bne.w	80044e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043d8:	4b88      	ldr	r3, [pc, #544]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x64>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e3d9      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_RCC_OscConfig+0x7e>
 8004400:	4b7e      	ldr	r3, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004408:	e005      	b.n	8004416 <HAL_RCC_OscConfig+0x8a>
 800440a:	4b7c      	ldr	r3, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004416:	4293      	cmp	r3, r2
 8004418:	d223      	bcs.n	8004462 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fdbe 	bl	8004fa0 <RCC_SetFlashLatencyFromMSIRange>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e3ba      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442e:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a72      	ldr	r2, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b70      	ldr	r3, [pc, #448]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	496d      	ldr	r1, [pc, #436]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444c:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	4968      	ldr	r1, [pc, #416]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	e025      	b.n	80044ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004462:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a65      	ldr	r2, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004468:	f043 0308 	orr.w	r3, r3, #8
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	4960      	ldr	r1, [pc, #384]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004480:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	495b      	ldr	r1, [pc, #364]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd7e 	bl	8004fa0 <RCC_SetFlashLatencyFromMSIRange>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e37a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ae:	f000 fc81 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b51      	ldr	r3, [pc, #324]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	4950      	ldr	r1, [pc, #320]	; (8004600 <HAL_RCC_OscConfig+0x274>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	f003 031f 	and.w	r3, r3, #31
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <HAL_RCC_OscConfig+0x278>)
 80044cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ce:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <HAL_RCC_OscConfig+0x27c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd f89c 	bl	8001610 <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d052      	beq.n	8004588 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	e35e      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d032      	beq.n	8004554 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ee:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a42      	ldr	r2, [pc, #264]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fa:	f7fe f811 	bl	8002520 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004502:	f7fe f80d 	bl	8002520 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e347      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004514:	4b39      	ldr	r3, [pc, #228]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004526:	f043 0308 	orr.w	r3, r3, #8
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4930      	ldr	r1, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	492b      	ldr	r1, [pc, #172]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
 8004552:	e01a      	b.n	800458a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004554:	4b29      	ldr	r3, [pc, #164]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004560:	f7fd ffde 	bl	8002520 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004568:	f7fd ffda 	bl	8002520 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e314      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1dc>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d073      	beq.n	800467e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x21c>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d10e      	bne.n	80045c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d063      	beq.n	800467c <HAL_RCC_OscConfig+0x2f0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d15f      	bne.n	800467c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e2f1      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x24c>
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e025      	b.n	8004624 <HAL_RCC_OscConfig+0x298>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d114      	bne.n	800460c <HAL_RCC_OscConfig+0x280>
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a02      	ldr	r2, [pc, #8]	; (80045fc <HAL_RCC_OscConfig+0x270>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e013      	b.n	8004624 <HAL_RCC_OscConfig+0x298>
 80045fc:	40021000 	.word	0x40021000
 8004600:	0800d1fc 	.word	0x0800d1fc
 8004604:	20000010 	.word	0x20000010
 8004608:	20000090 	.word	0x20000090
 800460c:	4ba0      	ldr	r3, [pc, #640]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a9f      	ldr	r2, [pc, #636]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b9d      	ldr	r3, [pc, #628]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a9c      	ldr	r2, [pc, #624]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd ff78 	bl	8002520 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fd ff74 	bl	8002520 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e2ae      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004646:	4b92      	ldr	r3, [pc, #584]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x2a8>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd ff64 	bl	8002520 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fd ff60 	bl	8002520 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e29a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800466e:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x2d0>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d060      	beq.n	800474c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d005      	beq.n	800469c <HAL_RCC_OscConfig+0x310>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d119      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d116      	bne.n	80046ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800469c:	4b7c      	ldr	r3, [pc, #496]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_OscConfig+0x328>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e277      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b4:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	4973      	ldr	r1, [pc, #460]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c8:	e040      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d023      	beq.n	800471a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d2:	4b6f      	ldr	r3, [pc, #444]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6e      	ldr	r2, [pc, #440]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd ff1f 	bl	8002520 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e6:	f7fd ff1b 	bl	8002520 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e255      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b65      	ldr	r3, [pc, #404]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b62      	ldr	r3, [pc, #392]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	495f      	ldr	r1, [pc, #380]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
 8004718:	e018      	b.n	800474c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a5c      	ldr	r2, [pc, #368]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd fefb 	bl	8002520 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fd fef7 	bl	8002520 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e231      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004740:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d03c      	beq.n	80047d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01c      	beq.n	800479a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004766:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fd fed6 	bl	8002520 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004778:	f7fd fed2 	bl	8002520 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e20c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ef      	beq.n	8004778 <HAL_RCC_OscConfig+0x3ec>
 8004798:	e01b      	b.n	80047d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	4a3b      	ldr	r2, [pc, #236]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fd feb9 	bl	8002520 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fd feb5 	bl	8002520 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1ef      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ef      	bne.n	80047b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a6 	beq.w	800492c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10d      	bne.n	800480c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	4a26      	ldr	r2, [pc, #152]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	; 0x58
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d118      	bne.n	800484a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004818:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004824:	f7fd fe7c 	bl	8002520 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fd fe78 	bl	8002520 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1b2      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x508>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d108      	bne.n	8004864 <HAL_RCC_OscConfig+0x4d8>
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004862:	e029      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b05      	cmp	r3, #5
 800486a:	d115      	bne.n	8004898 <HAL_RCC_OscConfig+0x50c>
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a03      	ldr	r2, [pc, #12]	; (8004890 <HAL_RCC_OscConfig+0x504>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488c:	e014      	b.n	80048b8 <HAL_RCC_OscConfig+0x52c>
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	40007000 	.word	0x40007000
 8004898:	4b9a      	ldr	r3, [pc, #616]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	4a99      	ldr	r2, [pc, #612]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048a8:	4b96      	ldr	r3, [pc, #600]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	4a95      	ldr	r2, [pc, #596]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd fe2e 	bl	8002520 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd fe2a 	bl	8002520 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e162      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	4b89      	ldr	r3, [pc, #548]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ed      	beq.n	80048c8 <HAL_RCC_OscConfig+0x53c>
 80048ec:	e015      	b.n	800491a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd fe17 	bl	8002520 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd fe13 	bl	8002520 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e14b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	4b7d      	ldr	r3, [pc, #500]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ed      	bne.n	80048f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b78      	ldr	r3, [pc, #480]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	4a77      	ldr	r2, [pc, #476]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01c      	beq.n	800497a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004940:	4b70      	ldr	r3, [pc, #448]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004946:	4a6f      	ldr	r2, [pc, #444]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd fde6 	bl	8002520 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004958:	f7fd fde2 	bl	8002520 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e11c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800496a:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <HAL_RCC_OscConfig+0x5cc>
 8004978:	e01b      	b.n	80049b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800497a:	4b62      	ldr	r3, [pc, #392]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 800497c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd fdc9 	bl	8002520 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004992:	f7fd fdc5 	bl	8002520 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0ff      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049a4:	4b57      	ldr	r3, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80f3 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 80c9 	bne.w	8004b58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 0203 	and.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d12c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	3b01      	subs	r3, #1
 80049e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d123      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d11b      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d113      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d06b      	beq.n	8004b0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	2b0c      	cmp	r3, #12
 8004a38:	d062      	beq.n	8004b00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a3a:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0ac      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a56:	f7fd fd63 	bl	8002520 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fd fd5f 	bl	8002520 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e099      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a70:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCC_OscConfig+0x77c>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	4311      	orrs	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a96:	0212      	lsls	r2, r2, #8
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0552      	lsls	r2, r2, #21
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004aaa:	0852      	lsrs	r2, r2, #1
 8004aac:	3a01      	subs	r2, #1
 8004aae:	0652      	lsls	r2, r2, #25
 8004ab0:	4311      	orrs	r1, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab6:	06d2      	lsls	r2, r2, #27
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	4912      	ldr	r1, [pc, #72]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004acc:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a0c      	ldr	r2, [pc, #48]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ad8:	f7fd fd22 	bl	8002520 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fd1e 	bl	8002520 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e058      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <HAL_RCC_OscConfig+0x778>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afe:	e050      	b.n	8004ba2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e04f      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d144      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b18:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a20      	ldr	r2, [pc, #128]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b30:	f7fd fcf6 	bl	8002520 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fcf2 	bl	8002520 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e02c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0x7ac>
 8004b56:	e024      	b.n	8004ba2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b0c      	cmp	r3, #12
 8004b5c:	d01f      	beq.n	8004b9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fd fcd9 	bl	8002520 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fd fcd5 	bl	8002520 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e00f      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	4905      	ldr	r1, [pc, #20]	; (8004bac <HAL_RCC_OscConfig+0x820>)
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_RCC_OscConfig+0x824>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60cb      	str	r3, [r1, #12]
 8004b9c:	e001      	b.n	8004ba2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	feeefffc 	.word	0xfeeefffc

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0e7      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b75      	ldr	r3, [pc, #468]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d910      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4970      	ldr	r1, [pc, #448]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b6e      	ldr	r3, [pc, #440]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0cf      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d908      	bls.n	8004c26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b63      	ldr	r3, [pc, #396]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4960      	ldr	r1, [pc, #384]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04c      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3a:	4b5a      	ldr	r3, [pc, #360]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d121      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0a6      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c52:	4b54      	ldr	r3, [pc, #336]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d115      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e09a      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6a:	4b4e      	ldr	r3, [pc, #312]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e08e      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e086      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c8a:	4b46      	ldr	r3, [pc, #280]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 0203 	bic.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4943      	ldr	r1, [pc, #268]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9c:	f7fd fc40 	bl	8002520 <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca4:	f7fd fc3c 	bl	8002520 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e06e      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cba:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 020c 	and.w	r2, r3, #12
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1eb      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d208      	bcs.n	8004cfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	492b      	ldr	r1, [pc, #172]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d210      	bcs.n	8004d2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 0207 	bic.w	r2, r3, #7
 8004d10:	4923      	ldr	r1, [pc, #140]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d18:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCC_ClockConfig+0x1ec>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e036      	b.n	8004d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4918      	ldr	r1, [pc, #96]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4910      	ldr	r1, [pc, #64]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d68:	f000 f824 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	490b      	ldr	r1, [pc, #44]	; (8004da8 <HAL_RCC_ClockConfig+0x1f4>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <HAL_RCC_ClockConfig+0x1f8>)
 8004d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d88:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_RCC_ClockConfig+0x1fc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fc fc3f 	bl	8001610 <HAL_InitTick>
 8004d92:	4603      	mov	r3, r0
 8004d94:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d96:	7afb      	ldrb	r3, [r7, #11]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40022000 	.word	0x40022000
 8004da4:	40021000 	.word	0x40021000
 8004da8:	0800d1fc 	.word	0x0800d1fc
 8004dac:	20000010 	.word	0x20000010
 8004db0:	20000090 	.word	0x20000090

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dc2:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d121      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d11e      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004de8:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004df4:	4b31      	ldr	r3, [pc, #196]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e005      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e10:	4a2b      	ldr	r2, [pc, #172]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e004      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d101      	bne.n	8004e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b0c      	cmp	r3, #12
 8004e40:	d134      	bne.n	8004eac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e42:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d003      	beq.n	8004e5a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d003      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0xac>
 8004e58:	e005      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e5c:	617b      	str	r3, [r7, #20]
      break;
 8004e5e:	e005      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e60:	4b19      	ldr	r3, [pc, #100]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e62:	617b      	str	r3, [r7, #20]
      break;
 8004e64:	e002      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	617b      	str	r3, [r7, #20]
      break;
 8004e6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e6c:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	3301      	adds	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	fb03 f202 	mul.w	r2, r3, r2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	0e5b      	lsrs	r3, r3, #25
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eac:	69bb      	ldr	r3, [r7, #24]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3724      	adds	r7, #36	; 0x24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	0800d214 	.word	0x0800d214
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200

08004ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000010 	.word	0x20000010

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4904      	ldr	r1, [pc, #16]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	0800d20c 	.word	0x0800d20c

08004f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f14:	f7ff ffda 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	0adb      	lsrs	r3, r3, #11
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4904      	ldr	r1, [pc, #16]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	0800d20c 	.word	0x0800d20c

08004f3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	220f      	movs	r2, #15
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 0203 	and.w	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <HAL_RCC_GetClockConfig+0x5c>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RCC_GetClockConfig+0x60>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0207 	and.w	r2, r3, #7
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40022000 	.word	0x40022000

08004fa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fb8:	f7ff f984 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8004fbc:	6178      	str	r0, [r7, #20]
 8004fbe:	e014      	b.n	8004fea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc4:	4a24      	ldr	r2, [pc, #144]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6593      	str	r3, [r2, #88]	; 0x58
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fd8:	f7ff f974 	bl	80042c4 <HAL_PWREx_GetVoltageRange>
 8004fdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe2:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff0:	d10b      	bne.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d919      	bls.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8004ffc:	d902      	bls.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ffe:	2302      	movs	r3, #2
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e013      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005004:	2301      	movs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	e010      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d902      	bls.n	8005016 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005010:	2303      	movs	r3, #3
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	e00a      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d102      	bne.n	8005022 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800501c:	2302      	movs	r3, #2
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e004      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b70      	cmp	r3, #112	; 0x70
 8005026:	d101      	bne.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005028:	2301      	movs	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 0207 	bic.w	r2, r3, #7
 8005034:	4909      	ldr	r1, [pc, #36]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	429a      	cmp	r2, r3
 8005048:	d001      	beq.n	800504e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	40022000 	.word	0x40022000

08005060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005068:	2300      	movs	r3, #0
 800506a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800506c:	2300      	movs	r3, #0
 800506e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d031      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005084:	d01a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005086:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800508a:	d814      	bhi.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005094:	d10f      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005096:	4b5d      	ldr	r3, [pc, #372]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a2:	e00c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f9de 	bl	800546c <RCCEx_PLLSAI1_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	74fb      	strb	r3, [r7, #19]
      break;
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80050bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c4:	4b51      	ldr	r3, [pc, #324]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	494e      	ldr	r1, [pc, #312]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 809e 	beq.w	800522a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f2:	4b46      	ldr	r3, [pc, #280]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005108:	4b40      	ldr	r3, [pc, #256]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4a3f      	ldr	r2, [pc, #252]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	; 0x58
 8005114:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005120:	2301      	movs	r3, #1
 8005122:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005124:	4b3a      	ldr	r3, [pc, #232]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a39      	ldr	r2, [pc, #228]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800512a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005130:	f7fd f9f6 	bl	8002520 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005136:	e009      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005138:	f7fd f9f2 	bl	8002520 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d902      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	74fb      	strb	r3, [r7, #19]
        break;
 800514a:	e005      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800514c:	4b30      	ldr	r3, [pc, #192]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ef      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d15a      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800515e:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005168:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01e      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	429a      	cmp	r2, r3
 8005178:	d019      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005186:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	4a1f      	ldr	r2, [pc, #124]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800518e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	4a1b      	ldr	r2, [pc, #108]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051a6:	4a19      	ldr	r2, [pc, #100]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d016      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd f9b2 	bl	8002520 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051be:	e00b      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fd f9ae 	bl	8002520 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d902      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	74fb      	strb	r3, [r7, #19]
            break;
 80051d6:	e006      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ec      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fa:	4904      	ldr	r1, [pc, #16]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005204:	7cfb      	ldrb	r3, [r7, #19]
 8005206:	74bb      	strb	r3, [r7, #18]
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005218:	7c7b      	ldrb	r3, [r7, #17]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521e:	4b8a      	ldr	r3, [pc, #552]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	4a89      	ldr	r2, [pc, #548]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005236:	4b84      	ldr	r3, [pc, #528]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f023 0203 	bic.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	4980      	ldr	r1, [pc, #512]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005258:	4b7b      	ldr	r3, [pc, #492]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 020c 	bic.w	r2, r3, #12
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	4978      	ldr	r1, [pc, #480]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800527a:	4b73      	ldr	r3, [pc, #460]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	496f      	ldr	r1, [pc, #444]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529c:	4b6a      	ldr	r3, [pc, #424]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	4967      	ldr	r1, [pc, #412]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052be:	4b62      	ldr	r3, [pc, #392]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	495e      	ldr	r1, [pc, #376]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052e0:	4b59      	ldr	r3, [pc, #356]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4956      	ldr	r1, [pc, #344]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005302:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	494d      	ldr	r1, [pc, #308]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d028      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005324:	4b48      	ldr	r3, [pc, #288]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	4945      	ldr	r1, [pc, #276]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b40      	ldr	r3, [pc, #256]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a3f      	ldr	r2, [pc, #252]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
 8005350:	e011      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535a:	d10c      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f882 	bl	800546c <RCCEx_PLLSAI1_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005382:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	492d      	ldr	r1, [pc, #180]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d106      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a2:	4b29      	ldr	r3, [pc, #164]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4a28      	ldr	r2, [pc, #160]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ac:	60d3      	str	r3, [r2, #12]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f853 	bl	800546c <RCCEx_PLLSAI1_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01c      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053e0:	4b19      	ldr	r3, [pc, #100]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ee:	4916      	ldr	r1, [pc, #88]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053fe:	d10c      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3304      	adds	r3, #4
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f830 	bl	800546c <RCCEx_PLLSAI1_Config>
 800540c:	4603      	mov	r3, r0
 800540e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005434:	4904      	ldr	r1, [pc, #16]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800543c:	7cbb      	ldrb	r3, [r7, #18]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000

0800544c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005456:	f043 0304 	orr.w	r3, r3, #4
 800545a:	6013      	str	r3, [r2, #0]
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000

0800546c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800547a:	4b74      	ldr	r3, [pc, #464]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d018      	beq.n	80054b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005486:	4b71      	ldr	r3, [pc, #452]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0203 	and.w	r2, r3, #3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d10d      	bne.n	80054b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
       ||
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800549e:	4b6b      	ldr	r3, [pc, #428]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
       ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d047      	beq.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	e044      	b.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d018      	beq.n	80054f2 <RCCEx_PLLSAI1_Config+0x86>
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d825      	bhi.n	8005510 <RCCEx_PLLSAI1_Config+0xa4>
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d002      	beq.n	80054ce <RCCEx_PLLSAI1_Config+0x62>
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d009      	beq.n	80054e0 <RCCEx_PLLSAI1_Config+0x74>
 80054cc:	e020      	b.n	8005510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ce:	4b5f      	ldr	r3, [pc, #380]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11d      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054de:	e01a      	b.n	8005516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054e0:	4b5a      	ldr	r3, [pc, #360]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054f0:	e013      	b.n	800551a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054f2:	4b56      	ldr	r3, [pc, #344]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054fe:	4b53      	ldr	r3, [pc, #332]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800550e:	e006      	b.n	800551e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      break;
 8005514:	e004      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005516:	bf00      	nop
 8005518:	e002      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551a:	bf00      	nop
 800551c:	e000      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800551e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10d      	bne.n	8005542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005526:	4b49      	ldr	r3, [pc, #292]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	430b      	orrs	r3, r1
 800553c:	4943      	ldr	r1, [pc, #268]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800553e:	4313      	orrs	r3, r2
 8005540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d17c      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005548:	4b40      	ldr	r3, [pc, #256]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3f      	ldr	r2, [pc, #252]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800554e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005554:	f7fc ffe4 	bl	8002520 <HAL_GetTick>
 8005558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800555a:	e009      	b.n	8005570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800555c:	f7fc ffe0 	bl	8002520 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d902      	bls.n	8005570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	73fb      	strb	r3, [r7, #15]
        break;
 800556e:	e005      	b.n	800557c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ef      	bne.n	800555c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d15f      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d110      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005590:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6892      	ldr	r2, [r2, #8]
 8005598:	0211      	lsls	r1, r2, #8
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68d2      	ldr	r2, [r2, #12]
 800559e:	06d2      	lsls	r2, r2, #27
 80055a0:	430a      	orrs	r2, r1
 80055a2:	492a      	ldr	r1, [pc, #168]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	610b      	str	r3, [r1, #16]
 80055a8:	e027      	b.n	80055fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d112      	bne.n	80055d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055b0:	4b26      	ldr	r3, [pc, #152]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6892      	ldr	r2, [r2, #8]
 80055c0:	0211      	lsls	r1, r2, #8
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6912      	ldr	r2, [r2, #16]
 80055c6:	0852      	lsrs	r2, r2, #1
 80055c8:	3a01      	subs	r2, #1
 80055ca:	0552      	lsls	r2, r2, #21
 80055cc:	430a      	orrs	r2, r1
 80055ce:	491f      	ldr	r1, [pc, #124]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	610b      	str	r3, [r1, #16]
 80055d4:	e011      	b.n	80055fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	0211      	lsls	r1, r2, #8
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6952      	ldr	r2, [r2, #20]
 80055ec:	0852      	lsrs	r2, r2, #1
 80055ee:	3a01      	subs	r2, #1
 80055f0:	0652      	lsls	r2, r2, #25
 80055f2:	430a      	orrs	r2, r1
 80055f4:	4915      	ldr	r1, [pc, #84]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005604:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005606:	f7fc ff8b 	bl	8002520 <HAL_GetTick>
 800560a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800560c:	e009      	b.n	8005622 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800560e:	f7fc ff87 	bl	8002520 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d902      	bls.n	8005622 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	73fb      	strb	r3, [r7, #15]
          break;
 8005620:	e005      	b.n	800562e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0ef      	beq.n	800560e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	4903      	ldr	r1, [pc, #12]	; (800564c <RCCEx_PLLSAI1_Config+0x1e0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000

08005650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e049      	b.n	80056f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f841 	bl	80056fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 f9be 	bl	8005a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	d001      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e03b      	b.n	80057a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x4e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d004      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x4e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d115      	bne.n	800578e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800576a:	4013      	ands	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d015      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x8c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d011      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578c:	e008      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e000      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40014000 	.word	0x40014000
 80057b8:	00010007 	.word	0x00010007

080057bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0202 	mvn.w	r2, #2
 80057f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8e4 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8d6 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8e7 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0204 	mvn.w	r2, #4
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8be 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8b0 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f8c1 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d020      	beq.n	80058b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01b      	beq.n	80058b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0208 	mvn.w	r2, #8
 8005888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f898 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f88a 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f89b 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d020      	beq.n	8005904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f872 	bl	80059d4 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f864 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f875 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00c      	beq.n	8005928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0201 	mvn.w	r2, #1
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fe34 	bl	8001590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00c      	beq.n	800594c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8d0 	bl	8005aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8c8 	bl	8005b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00c      	beq.n	8005994 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f834 	bl	80059fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0220 	mvn.w	r2, #32
 80059b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f890 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2a      	ldr	r2, [pc, #168]	; (8005acc <TIM_Base_SetConfig+0xbc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x20>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a21      	ldr	r2, [pc, #132]	; (8005acc <TIM_Base_SetConfig+0xbc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_Base_SetConfig+0x52>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d007      	beq.n	8005a62 <TIM_Base_SetConfig+0x52>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <TIM_Base_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_Base_SetConfig+0x52>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <TIM_Base_SetConfig+0xc4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a0c      	ldr	r2, [pc, #48]	; (8005acc <TIM_Base_SetConfig+0xbc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0xa0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <TIM_Base_SetConfig+0xc0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0xa0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <TIM_Base_SetConfig+0xc4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d103      	bne.n	8005ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	615a      	str	r2, [r3, #20]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e040      	b.n	8005ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb ff3e 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2224      	movs	r2, #36	; 0x24
 8005b40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fdfa 	bl	8006754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fbcb 	bl	80062fc <UART_SetConfig>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e01b      	b.n	8005ba8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fe79 	bl	8006898 <UART_CheckIdleState>
 8005ba6:	4603      	mov	r3, r0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d178      	bne.n	8005cba <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_UART_Transmit+0x24>
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e071      	b.n	8005cbc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2221      	movs	r2, #33	; 0x21
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be6:	f7fc fc9b 	bl	8002520 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	88fa      	ldrh	r2, [r7, #6]
 8005bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d108      	bne.n	8005c18 <HAL_UART_Transmit+0x68>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e003      	b.n	8005c20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c20:	e030      	b.n	8005c84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fedb 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e03c      	b.n	8005cbc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	881a      	ldrh	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c54:	b292      	uxth	r2, r2
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	e008      	b.n	8005c72 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1c8      	bne.n	8005c22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fea4 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e005      	b.n	8005cbc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e000      	b.n	8005cbc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b0ba      	sub	sp, #232	; 0xe8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d115      	bne.n	8005d2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00f      	beq.n	8005d2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d009      	beq.n	8005d2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 82ae 	beq.w	800627e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
      }
      return;
 8005d2a:	e2a8      	b.n	800627e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8117 	beq.w	8005f64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d46:	4b85      	ldr	r3, [pc, #532]	; (8005f5c <HAL_UART_IRQHandler+0x298>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 810a 	beq.w	8005f64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_UART_IRQHandler+0xbc>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d76:	f043 0201 	orr.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d011      	beq.n	8005db0 <HAL_UART_IRQHandler+0xec>
 8005d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d011      	beq.n	8005de0 <HAL_UART_IRQHandler+0x11c>
 8005dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2204      	movs	r2, #4
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d012      	beq.n	8005e4e <HAL_UART_IRQHandler+0x18a>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00c      	beq.n	8005e4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e44:	f043 0220 	orr.w	r2, r3, #32
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8214 	beq.w	8006282 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d005      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04f      	beq.n	8005f46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fecc 	bl	8006c44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d141      	bne.n	8005f3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ee6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ef2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1d9      	bne.n	8005eba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f12:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <HAL_UART_IRQHandler+0x29c>)
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fc fc50 	bl	80027c0 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d017      	beq.n	8005f56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00f      	b.n	8005f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f9c2 	bl	80062c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e00b      	b.n	8005f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9be 	bl	80062c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	e007      	b.n	8005f56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9ba 	bl	80062c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005f54:	e195      	b.n	8006282 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f56:	bf00      	nop
    return;
 8005f58:	e193      	b.n	8006282 <HAL_UART_IRQHandler+0x5be>
 8005f5a:	bf00      	nop
 8005f5c:	04000120 	.word	0x04000120
 8005f60:	08006d0d 	.word	0x08006d0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 814e 	bne.w	800620a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8147 	beq.w	800620a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8140 	beq.w	800620a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2210      	movs	r2, #16
 8005f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	f040 80b8 	bne.w	8006112 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 8167 	beq.w	8006286 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f080 815f 	bcs.w	8006286 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 8086 	bne.w	80060f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800600e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006012:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800601a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1da      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800603e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006056:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800605a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e1      	bne.n	800602e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800607a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800607c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800608e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006090:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800609c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e3      	bne.n	800606a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c0:	f023 0310 	bic.w	r3, r3, #16
 80060c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e4      	bne.n	80060b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc fb2a 	bl	8002744 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006102:	b29b      	uxth	r3, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb ffe6 	bl	80020dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006110:	e0b9      	b.n	8006286 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800611e:	b29b      	uxth	r3, r3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80ab 	beq.w	800628a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8006134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80a6 	beq.w	800628a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006160:	647b      	str	r3, [r7, #68]	; 0x44
 8006162:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800616e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e4      	bne.n	800613e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	623b      	str	r3, [r7, #32]
   return(result);
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006198:	633a      	str	r2, [r7, #48]	; 0x30
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e3      	bne.n	8006174 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f023 0310 	bic.w	r3, r3, #16
 80061d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	69b9      	ldr	r1, [r7, #24]
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	617b      	str	r3, [r7, #20]
   return(result);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e4      	bne.n	80061c0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb ff6a 	bl	80020dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006208:	e03f      	b.n	800628a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <HAL_UART_IRQHandler+0x570>
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800622a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 ff69 	bl	8007104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006232:	e02d      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01c      	beq.n	800628e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
    }
    return;
 800625c:	e017      	b.n	800628e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d012      	beq.n	8006290 <HAL_UART_IRQHandler+0x5cc>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fd5e 	bl	8006d38 <UART_EndTransmit_IT>
    return;
 800627c:	e008      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
      return;
 800627e:	bf00      	nop
 8006280:	e006      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006282:	bf00      	nop
 8006284:	e004      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006286:	bf00      	nop
 8006288:	e002      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
      return;
 800628a:	bf00      	nop
 800628c:	e000      	b.n	8006290 <HAL_UART_IRQHandler+0x5cc>
    return;
 800628e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006290:	37e8      	adds	r7, #232	; 0xe8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop

08006298 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006300:	b08a      	sub	sp, #40	; 0x28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4313      	orrs	r3, r2
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4bb4      	ldr	r3, [pc, #720]	; (80065fc <UART_SetConfig+0x300>)
 800632c:	4013      	ands	r3, r2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006334:	430b      	orrs	r3, r1
 8006336:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4aa9      	ldr	r2, [pc, #676]	; (8006600 <UART_SetConfig+0x304>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d004      	beq.n	8006368 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006364:	4313      	orrs	r3, r2
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	430a      	orrs	r2, r1
 800637a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4aa0      	ldr	r2, [pc, #640]	; (8006604 <UART_SetConfig+0x308>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d126      	bne.n	80063d4 <UART_SetConfig+0xd8>
 8006386:	4ba0      	ldr	r3, [pc, #640]	; (8006608 <UART_SetConfig+0x30c>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	2b03      	cmp	r3, #3
 8006392:	d81b      	bhi.n	80063cc <UART_SetConfig+0xd0>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0xa0>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063bd 	.word	0x080063bd
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b2:	e080      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ba:	e07c      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c2:	e078      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ca:	e074      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d2:	e070      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a8c      	ldr	r2, [pc, #560]	; (800660c <UART_SetConfig+0x310>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d138      	bne.n	8006450 <UART_SetConfig+0x154>
 80063de:	4b8a      	ldr	r3, [pc, #552]	; (8006608 <UART_SetConfig+0x30c>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f003 030c 	and.w	r3, r3, #12
 80063e8:	2b0c      	cmp	r3, #12
 80063ea:	d82d      	bhi.n	8006448 <UART_SetConfig+0x14c>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0xf8>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006429 	.word	0x08006429
 80063f8:	08006449 	.word	0x08006449
 80063fc:	08006449 	.word	0x08006449
 8006400:	08006449 	.word	0x08006449
 8006404:	08006439 	.word	0x08006439
 8006408:	08006449 	.word	0x08006449
 800640c:	08006449 	.word	0x08006449
 8006410:	08006449 	.word	0x08006449
 8006414:	08006431 	.word	0x08006431
 8006418:	08006449 	.word	0x08006449
 800641c:	08006449 	.word	0x08006449
 8006420:	08006449 	.word	0x08006449
 8006424:	08006441 	.word	0x08006441
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642e:	e042      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006436:	e03e      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643e:	e03a      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e036      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e032      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a6a      	ldr	r2, [pc, #424]	; (8006600 <UART_SetConfig+0x304>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d12a      	bne.n	80064b0 <UART_SetConfig+0x1b4>
 800645a:	4b6b      	ldr	r3, [pc, #428]	; (8006608 <UART_SetConfig+0x30c>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006468:	d01a      	beq.n	80064a0 <UART_SetConfig+0x1a4>
 800646a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800646e:	d81b      	bhi.n	80064a8 <UART_SetConfig+0x1ac>
 8006470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006474:	d00c      	beq.n	8006490 <UART_SetConfig+0x194>
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647a:	d815      	bhi.n	80064a8 <UART_SetConfig+0x1ac>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <UART_SetConfig+0x18c>
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d008      	beq.n	8006498 <UART_SetConfig+0x19c>
 8006486:	e00f      	b.n	80064a8 <UART_SetConfig+0x1ac>
 8006488:	2300      	movs	r3, #0
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648e:	e012      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006490:	2302      	movs	r3, #2
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006496:	e00e      	b.n	80064b6 <UART_SetConfig+0x1ba>
 8006498:	2304      	movs	r3, #4
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649e:	e00a      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80064a0:	2308      	movs	r3, #8
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a6:	e006      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80064a8:	2310      	movs	r3, #16
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ae:	e002      	b.n	80064b6 <UART_SetConfig+0x1ba>
 80064b0:	2310      	movs	r3, #16
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a51      	ldr	r2, [pc, #324]	; (8006600 <UART_SetConfig+0x304>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d17a      	bne.n	80065b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d824      	bhi.n	8006512 <UART_SetConfig+0x216>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x1d4>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	08006513 	.word	0x08006513
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006513 	.word	0x08006513
 80064e0:	08006503 	.word	0x08006503
 80064e4:	08006513 	.word	0x08006513
 80064e8:	08006513 	.word	0x08006513
 80064ec:	08006513 	.word	0x08006513
 80064f0:	0800650b 	.word	0x0800650b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fe fcf6 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61f8      	str	r0, [r7, #28]
        break;
 80064fa:	e010      	b.n	800651e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064fc:	4b44      	ldr	r3, [pc, #272]	; (8006610 <UART_SetConfig+0x314>)
 80064fe:	61fb      	str	r3, [r7, #28]
        break;
 8006500:	e00d      	b.n	800651e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006502:	f7fe fc57 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006506:	61f8      	str	r0, [r7, #28]
        break;
 8006508:	e009      	b.n	800651e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650e:	61fb      	str	r3, [r7, #28]
        break;
 8006510:	e005      	b.n	800651e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800651c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8107 	beq.w	8006734 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	429a      	cmp	r2, r3
 8006534:	d305      	bcc.n	8006542 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	429a      	cmp	r2, r3
 8006540:	d903      	bls.n	800654a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006548:	e0f4      	b.n	8006734 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	2200      	movs	r2, #0
 800654e:	461c      	mov	r4, r3
 8006550:	4615      	mov	r5, r2
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	022b      	lsls	r3, r5, #8
 800655c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006560:	0222      	lsls	r2, r4, #8
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	6849      	ldr	r1, [r1, #4]
 8006566:	0849      	lsrs	r1, r1, #1
 8006568:	2000      	movs	r0, #0
 800656a:	4688      	mov	r8, r1
 800656c:	4681      	mov	r9, r0
 800656e:	eb12 0a08 	adds.w	sl, r2, r8
 8006572:	eb43 0b09 	adc.w	fp, r3, r9
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006584:	4650      	mov	r0, sl
 8006586:	4659      	mov	r1, fp
 8006588:	f7fa fb6e 	bl	8000c68 <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659a:	d308      	bcc.n	80065ae <UART_SetConfig+0x2b2>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a2:	d204      	bcs.n	80065ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	60da      	str	r2, [r3, #12]
 80065ac:	e0c2      	b.n	8006734 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065b4:	e0be      	b.n	8006734 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	d16a      	bne.n	8006696 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80065c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d834      	bhi.n	8006632 <UART_SetConfig+0x336>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x2d4>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	08006615 	.word	0x08006615
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	08006633 	.word	0x08006633
 80065e0:	08006623 	.word	0x08006623
 80065e4:	08006633 	.word	0x08006633
 80065e8:	08006633 	.word	0x08006633
 80065ec:	08006633 	.word	0x08006633
 80065f0:	0800662b 	.word	0x0800662b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f4:	f7fe fc76 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80065f8:	61f8      	str	r0, [r7, #28]
        break;
 80065fa:	e020      	b.n	800663e <UART_SetConfig+0x342>
 80065fc:	efff69f3 	.word	0xefff69f3
 8006600:	40008000 	.word	0x40008000
 8006604:	40013800 	.word	0x40013800
 8006608:	40021000 	.word	0x40021000
 800660c:	40004400 	.word	0x40004400
 8006610:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006614:	f7fe fc7c 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
 8006618:	61f8      	str	r0, [r7, #28]
        break;
 800661a:	e010      	b.n	800663e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b4c      	ldr	r3, [pc, #304]	; (8006750 <UART_SetConfig+0x454>)
 800661e:	61fb      	str	r3, [r7, #28]
        break;
 8006620:	e00d      	b.n	800663e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fe fbc7 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8006626:	61f8      	str	r0, [r7, #28]
        break;
 8006628:	e009      	b.n	800663e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662e:	61fb      	str	r3, [r7, #28]
        break;
 8006630:	e005      	b.n	800663e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800663c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d077      	beq.n	8006734 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	005a      	lsls	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	441a      	add	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b0f      	cmp	r3, #15
 800665e:	d916      	bls.n	800668e <UART_SetConfig+0x392>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006666:	d212      	bcs.n	800668e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f023 030f 	bic.w	r3, r3, #15
 8006670:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	b29a      	uxth	r2, r3
 800667e:	8afb      	ldrh	r3, [r7, #22]
 8006680:	4313      	orrs	r3, r2
 8006682:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	8afa      	ldrh	r2, [r7, #22]
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	e052      	b.n	8006734 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006694:	e04e      	b.n	8006734 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800669a:	2b08      	cmp	r3, #8
 800669c:	d827      	bhi.n	80066ee <UART_SetConfig+0x3f2>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x3a8>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fe fc0c 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 80066cc:	61f8      	str	r0, [r7, #28]
        break;
 80066ce:	e014      	b.n	80066fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fe fc1e 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
 80066d4:	61f8      	str	r0, [r7, #28]
        break;
 80066d6:	e010      	b.n	80066fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <UART_SetConfig+0x454>)
 80066da:	61fb      	str	r3, [r7, #28]
        break;
 80066dc:	e00d      	b.n	80066fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fe fb69 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80066e2:	61f8      	str	r0, [r7, #28]
        break;
 80066e4:	e009      	b.n	80066fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	61fb      	str	r3, [r7, #28]
        break;
 80066ec:	e005      	b.n	80066fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066f8:	bf00      	nop
    }

    if (pclk != 0U)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	085a      	lsrs	r2, r3, #1
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	441a      	add	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d909      	bls.n	800672e <UART_SetConfig+0x432>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d205      	bcs.n	800672e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60da      	str	r2, [r3, #12]
 800672c:	e002      	b.n	8006734 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006740:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006744:	4618      	mov	r0, r3
 8006746:	3728      	adds	r7, #40	; 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674e:	bf00      	nop
 8006750:	00f42400 	.word	0x00f42400

08006754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01a      	beq.n	800686a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006852:	d10a      	bne.n	800686a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b098      	sub	sp, #96	; 0x60
 800689c:	af02      	add	r7, sp, #8
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a8:	f7fb fe3a 	bl	8002520 <HAL_GetTick>
 80068ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d12e      	bne.n	800691a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f88c 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d021      	beq.n	800691a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ea:	653b      	str	r3, [r7, #80]	; 0x50
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f4:	647b      	str	r3, [r7, #68]	; 0x44
 80068f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e6      	bne.n	80068d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e062      	b.n	80069e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d149      	bne.n	80069bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f856 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d03c      	beq.n	80069bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	623b      	str	r3, [r7, #32]
   return(result);
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
 8006962:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60fb      	str	r3, [r7, #12]
   return(result);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	64bb      	str	r3, [r7, #72]	; 0x48
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006994:	61fa      	str	r2, [r7, #28]
 8006996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	617b      	str	r3, [r7, #20]
   return(result);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e011      	b.n	80069e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3758      	adds	r7, #88	; 0x58
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	e049      	b.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d045      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a02:	f7fb fd8d 	bl	8002520 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d302      	bcc.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e048      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d031      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d110      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f8ff 	bl	8006c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e029      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d111      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f8e5 	bl	8006c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e00f      	b.n	8006aae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2301      	moveq	r3, #1
 8006aa0:	2300      	movne	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d0a6      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b097      	sub	sp, #92	; 0x5c
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	88fa      	ldrh	r2, [r7, #6]
 8006ad0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	d10e      	bne.n	8006b0a <UART_Start_Receive_IT+0x52>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <UART_Start_Receive_IT+0x48>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006afe:	e02d      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	22ff      	movs	r2, #255	; 0xff
 8006b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b08:	e028      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <UART_Start_Receive_IT+0x76>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <UART_Start_Receive_IT+0x6c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	22ff      	movs	r2, #255	; 0xff
 8006b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b22:	e01b      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	227f      	movs	r2, #127	; 0x7f
 8006b28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b2c:	e016      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b36:	d10d      	bne.n	8006b54 <UART_Start_Receive_IT+0x9c>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <UART_Start_Receive_IT+0x92>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	227f      	movs	r2, #127	; 0x7f
 8006b44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b48:	e008      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	223f      	movs	r2, #63	; 0x3f
 8006b4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b52:	e003      	b.n	8006b5c <UART_Start_Receive_IT+0xa4>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2222      	movs	r2, #34	; 0x22
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	657b      	str	r3, [r7, #84]	; 0x54
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba8:	d107      	bne.n	8006bba <UART_Start_Receive_IT+0x102>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <UART_Start_Receive_IT+0x184>)
 8006bb6:	669a      	str	r2, [r3, #104]	; 0x68
 8006bb8:	e002      	b.n	8006bc0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <UART_Start_Receive_IT+0x188>)
 8006bbe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d019      	beq.n	8006bfc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
 8006be8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_Start_Receive_IT+0x110>
 8006bfa:	e018      	b.n	8006c2e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	653b      	str	r3, [r7, #80]	; 0x50
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	69f9      	ldr	r1, [r7, #28]
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e6      	bne.n	8006bfc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	375c      	adds	r7, #92	; 0x5c
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	08006f49 	.word	0x08006f49
 8006c40:	08006d8d 	.word	0x08006d8d

08006c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b095      	sub	sp, #84	; 0x54
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e6      	bne.n	8006c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d118      	bne.n	8006cec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	647b      	str	r3, [r7, #68]	; 0x44
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d00:	bf00      	nop
 8006d02:	3754      	adds	r7, #84	; 0x54
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fac8 	bl	80062c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6979      	ldr	r1, [r7, #20]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff fa8a 	bl	8006298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d84:	bf00      	nop
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b09c      	sub	sp, #112	; 0x70
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da4:	2b22      	cmp	r3, #34	; 0x22
 8006da6:	f040 80be 	bne.w	8006f26 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006db0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006db4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006db8:	b2d9      	uxtb	r1, r3
 8006dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	400a      	ands	r2, r1
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 80a3 	bne.w	8006f3a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e46:	647a      	str	r2, [r7, #68]	; 0x44
 8006e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a34      	ldr	r2, [pc, #208]	; (8006f44 <UART_RxISR_8BIT+0x1b8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01f      	beq.n	8006eb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d018      	beq.n	8006eb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	623b      	str	r3, [r7, #32]
   return(result);
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d12e      	bne.n	8006f1e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0310 	bic.w	r3, r3, #16
 8006eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69b9      	ldr	r1, [r7, #24]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b10      	cmp	r3, #16
 8006f04:	d103      	bne.n	8006f0e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fb f8e0 	bl	80020dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f1c:	e00d      	b.n	8006f3a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff f9c4 	bl	80062ac <HAL_UART_RxCpltCallback>
}
 8006f24:	e009      	b.n	8006f3a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	8b1b      	ldrh	r3, [r3, #24]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0208 	orr.w	r2, r2, #8
 8006f36:	b292      	uxth	r2, r2
 8006f38:	831a      	strh	r2, [r3, #24]
}
 8006f3a:	bf00      	nop
 8006f3c:	3770      	adds	r7, #112	; 0x70
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40008000 	.word	0x40008000

08006f48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b09c      	sub	sp, #112	; 0x70
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f60:	2b22      	cmp	r3, #34	; 0x22
 8006f62:	f040 80be 	bne.w	80070e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006f7e:	4013      	ands	r3, r2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8a:	1c9a      	adds	r2, r3, #2
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f040 80a3 	bne.w	80070f6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fce:	657b      	str	r3, [r7, #84]	; 0x54
 8006fd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f023 0301 	bic.w	r3, r3, #1
 8006ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007002:	643a      	str	r2, [r7, #64]	; 0x40
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a34      	ldr	r2, [pc, #208]	; (8007100 <UART_RxISR_16BIT+0x1b8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d01f      	beq.n	8007074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d018      	beq.n	8007074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007062:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	2b01      	cmp	r3, #1
 800707a:	d12e      	bne.n	80070da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	e853 3f00 	ldrex	r3, [r3]
 800708e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0310 	bic.w	r3, r3, #16
 8007096:	65bb      	str	r3, [r7, #88]	; 0x58
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	6979      	ldr	r1, [r7, #20]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	613b      	str	r3, [r7, #16]
   return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e6      	bne.n	8007082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d103      	bne.n	80070ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2210      	movs	r2, #16
 80070c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fb f802 	bl	80020dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070d8:	e00d      	b.n	80070f6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff f8e6 	bl	80062ac <HAL_UART_RxCpltCallback>
}
 80070e0:	e009      	b.n	80070f6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	8b1b      	ldrh	r3, [r3, #24]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0208 	orr.w	r2, r2, #8
 80070f2:	b292      	uxth	r2, r2
 80070f4:	831a      	strh	r2, [r3, #24]
}
 80070f6:	bf00      	nop
 80070f8:	3770      	adds	r7, #112	; 0x70
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40008000 	.word	0x40008000

08007104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4613      	mov	r3, r2
 8007124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007132:	2b20      	cmp	r3, #32
 8007134:	d13b      	bne.n	80071ae <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e034      	b.n	80071b0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	461a      	mov	r2, r3
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff fcad 	bl	8006ab8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007162:	2b01      	cmp	r3, #1
 8007164:	d11d      	bne.n	80071a2 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2210      	movs	r2, #16
 800716c:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	617b      	str	r3, [r7, #20]
   return(result);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f043 0310 	orr.w	r3, r3, #16
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
 800718e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6a39      	ldr	r1, [r7, #32]
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	61fb      	str	r3, [r7, #28]
   return(result);
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80071a0:	e002      	b.n	80071a8 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80071a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071ac:	e000      	b.n	80071b0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <__NVIC_SetPriority>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db0a      	blt.n	80071e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	490c      	ldr	r1, [pc, #48]	; (8007204 <__NVIC_SetPriority+0x4c>)
 80071d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d6:	0112      	lsls	r2, r2, #4
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	440b      	add	r3, r1
 80071dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071e0:	e00a      	b.n	80071f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	4908      	ldr	r1, [pc, #32]	; (8007208 <__NVIC_SetPriority+0x50>)
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	3b04      	subs	r3, #4
 80071f0:	0112      	lsls	r2, r2, #4
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	440b      	add	r3, r1
 80071f6:	761a      	strb	r2, [r3, #24]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	e000e100 	.word	0xe000e100
 8007208:	e000ed00 	.word	0xe000ed00

0800720c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <SysTick_Handler+0x1c>)
 8007212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007214:	f001 ff12 	bl	800903c <xTaskGetSchedulerState>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800721e:	f002 fcfb 	bl	8009c18 <xPortSysTickHandler>
  }
}
 8007222:	bf00      	nop
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	e000e010 	.word	0xe000e010

0800722c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007230:	2100      	movs	r1, #0
 8007232:	f06f 0004 	mvn.w	r0, #4
 8007236:	f7ff ffbf 	bl	80071b8 <__NVIC_SetPriority>
#endif
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007246:	f3ef 8305 	mrs	r3, IPSR
 800724a:	603b      	str	r3, [r7, #0]
  return(result);
 800724c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007252:	f06f 0305 	mvn.w	r3, #5
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	e00c      	b.n	8007274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <osKernelInitialize+0x44>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d105      	bne.n	800726e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007262:	4b08      	ldr	r3, [pc, #32]	; (8007284 <osKernelInitialize+0x44>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007268:	2300      	movs	r3, #0
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	e002      	b.n	8007274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800726e:	f04f 33ff 	mov.w	r3, #4294967295
 8007272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007274:	687b      	ldr	r3, [r7, #4]
}
 8007276:	4618      	mov	r0, r3
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20007654 	.word	0x20007654

08007288 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800728e:	f3ef 8305 	mrs	r3, IPSR
 8007292:	603b      	str	r3, [r7, #0]
  return(result);
 8007294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800729a:	f06f 0305 	mvn.w	r3, #5
 800729e:	607b      	str	r3, [r7, #4]
 80072a0:	e010      	b.n	80072c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072a2:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <osKernelStart+0x48>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d109      	bne.n	80072be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072aa:	f7ff ffbf 	bl	800722c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072ae:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <osKernelStart+0x48>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072b4:	f001 fa66 	bl	8008784 <vTaskStartScheduler>
      stat = osOK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	607b      	str	r3, [r7, #4]
 80072bc:	e002      	b.n	80072c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072c4:	687b      	ldr	r3, [r7, #4]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20007654 	.word	0x20007654

080072d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af04      	add	r7, sp, #16
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e4:	f3ef 8305 	mrs	r3, IPSR
 80072e8:	617b      	str	r3, [r7, #20]
  return(result);
 80072ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d17e      	bne.n	80073ee <osThreadNew+0x11a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d07b      	beq.n	80073ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072f6:	2380      	movs	r3, #128	; 0x80
 80072f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072fa:	2318      	movs	r3, #24
 80072fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007302:	f04f 33ff 	mov.w	r3, #4294967295
 8007306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d045      	beq.n	800739a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <osThreadNew+0x48>
        name = attr->name;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d008      	beq.n	8007342 <osThreadNew+0x6e>
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b38      	cmp	r3, #56	; 0x38
 8007334:	d805      	bhi.n	8007342 <osThreadNew+0x6e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <osThreadNew+0x72>
        return (NULL);
 8007342:	2300      	movs	r3, #0
 8007344:	e054      	b.n	80073f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	089b      	lsrs	r3, r3, #2
 8007354:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <osThreadNew+0xa8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2ba7      	cmp	r3, #167	; 0xa7
 8007364:	d90a      	bls.n	800737c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osThreadNew+0xa8>
        mem = 1;
 8007376:	2301      	movs	r3, #1
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e010      	b.n	800739e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10c      	bne.n	800739e <osThreadNew+0xca>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d108      	bne.n	800739e <osThreadNew+0xca>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <osThreadNew+0xca>
          mem = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
 8007398:	e001      	b.n	800739e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d110      	bne.n	80073c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80073ac:	9202      	str	r2, [sp, #8]
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 fff6 	bl	80083ac <xTaskCreateStatic>
 80073c0:	4603      	mov	r3, r0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	e013      	b.n	80073ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f107 0310 	add.w	r3, r7, #16
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f001 f841 	bl	8008466 <xTaskCreate>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d001      	beq.n	80073ee <osThreadNew+0x11a>
            hTask = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073ee:	693b      	ldr	r3, [r7, #16]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3728      	adds	r7, #40	; 0x28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007400:	f3ef 8305 	mrs	r3, IPSR
 8007404:	60bb      	str	r3, [r7, #8]
  return(result);
 8007406:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <osDelay+0x1c>
    stat = osErrorISR;
 800740c:	f06f 0305 	mvn.w	r3, #5
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e007      	b.n	8007424 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <osDelay+0x2c>
      vTaskDelay(ticks);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 f97c 	bl	800871c <vTaskDelay>
    }
  }

  return (stat);
 8007424:	68fb      	ldr	r3, [r7, #12]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	; 0x28
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800743e:	f3ef 8305 	mrs	r3, IPSR
 8007442:	613b      	str	r3, [r7, #16]
  return(result);
 8007444:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007446:	2b00      	cmp	r3, #0
 8007448:	d15f      	bne.n	800750a <osMessageQueueNew+0xdc>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d05c      	beq.n	800750a <osMessageQueueNew+0xdc>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d059      	beq.n	800750a <osMessageQueueNew+0xdc>
    mem = -1;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d029      	beq.n	80074b6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d012      	beq.n	8007490 <osMessageQueueNew+0x62>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	2b4f      	cmp	r3, #79	; 0x4f
 8007470:	d90e      	bls.n	8007490 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695a      	ldr	r2, [r3, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	fb01 f303 	mul.w	r3, r1, r3
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <osMessageQueueNew+0x62>
        mem = 1;
 800748a:	2301      	movs	r3, #1
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	e014      	b.n	80074ba <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d110      	bne.n	80074ba <osMessageQueueNew+0x8c>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d108      	bne.n	80074ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <osMessageQueueNew+0x8c>
          mem = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
 80074b4:	e001      	b.n	80074ba <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10b      	bne.n	80074d8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2100      	movs	r1, #0
 80074ca:	9100      	str	r1, [sp, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa2e 	bl	8007930 <xQueueGenericCreateStatic>
 80074d4:	61f8      	str	r0, [r7, #28]
 80074d6:	e008      	b.n	80074ea <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d105      	bne.n	80074ea <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80074de:	2200      	movs	r2, #0
 80074e0:	68b9      	ldr	r1, [r7, #8]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fa9c 	bl	8007a20 <xQueueGenericCreate>
 80074e8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00c      	beq.n	800750a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <osMessageQueueNew+0xd0>
        name = attr->name;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e001      	b.n	8007502 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007502:	6979      	ldr	r1, [r7, #20]
 8007504:	69f8      	ldr	r0, [r7, #28]
 8007506:	f000 fef3 	bl	80082f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800750a:	69fb      	ldr	r3, [r7, #28]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752c:	f3ef 8305 	mrs	r3, IPSR
 8007530:	617b      	str	r3, [r7, #20]
  return(result);
 8007532:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007534:	2b00      	cmp	r3, #0
 8007536:	d028      	beq.n	800758a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <osMessageQueuePut+0x36>
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <osMessageQueuePut+0x36>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800754a:	f06f 0303 	mvn.w	r3, #3
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e038      	b.n	80075c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007556:	f107 0210 	add.w	r2, r7, #16
 800755a:	2300      	movs	r3, #0
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	69b8      	ldr	r0, [r7, #24]
 8007560:	f000 fbba 	bl	8007cd8 <xQueueGenericSendFromISR>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d003      	beq.n	8007572 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800756a:	f06f 0302 	mvn.w	r3, #2
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e028      	b.n	80075c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d025      	beq.n	80075c4 <osMessageQueuePut+0xb0>
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <osMessageQueuePut+0xbc>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e01c      	b.n	80075c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <osMessageQueuePut+0x82>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007596:	f06f 0303 	mvn.w	r3, #3
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e012      	b.n	80075c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800759e:	2300      	movs	r3, #0
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	69b8      	ldr	r0, [r7, #24]
 80075a6:	f000 fa99 	bl	8007adc <xQueueGenericSend>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d009      	beq.n	80075c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80075b6:	f06f 0301 	mvn.w	r3, #1
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	e002      	b.n	80075c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80075be:	f06f 0302 	mvn.w	r3, #2
 80075c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80075c4:	69fb      	ldr	r3, [r7, #28]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3720      	adds	r7, #32
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ea:	f3ef 8305 	mrs	r3, IPSR
 80075ee:	617b      	str	r3, [r7, #20]
  return(result);
 80075f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d028      	beq.n	8007648 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <osMessageQueueGet+0x34>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <osMessageQueueGet+0x34>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007608:	f06f 0303 	mvn.w	r3, #3
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e037      	b.n	8007680 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	461a      	mov	r2, r3
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	69b8      	ldr	r0, [r7, #24]
 800761e:	f000 fcd7 	bl	8007fd0 <xQueueReceiveFromISR>
 8007622:	4603      	mov	r3, r0
 8007624:	2b01      	cmp	r3, #1
 8007626:	d003      	beq.n	8007630 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007628:	f06f 0302 	mvn.w	r3, #2
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e027      	b.n	8007680 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d024      	beq.n	8007680 <osMessageQueueGet+0xac>
 8007636:	4b15      	ldr	r3, [pc, #84]	; (800768c <osMessageQueueGet+0xb8>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	e01b      	b.n	8007680 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <osMessageQueueGet+0x80>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007654:	f06f 0303 	mvn.w	r3, #3
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	e011      	b.n	8007680 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	68b9      	ldr	r1, [r7, #8]
 8007660:	69b8      	ldr	r0, [r7, #24]
 8007662:	f000 fbd5 	bl	8007e10 <xQueueReceive>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d009      	beq.n	8007680 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007672:	f06f 0301 	mvn.w	r3, #1
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e002      	b.n	8007680 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800767a:	f06f 0302 	mvn.w	r3, #2
 800767e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007680:	69fb      	ldr	r3, [r7, #28]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a07      	ldr	r2, [pc, #28]	; (80076bc <vApplicationGetIdleTaskMemory+0x2c>)
 80076a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <vApplicationGetIdleTaskMemory+0x30>)
 80076a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20007658 	.word	0x20007658
 80076c0:	20007700 	.word	0x20007700

080076c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a07      	ldr	r2, [pc, #28]	; (80076f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80076d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4a06      	ldr	r2, [pc, #24]	; (80076f4 <vApplicationGetTimerTaskMemory+0x30>)
 80076da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20007900 	.word	0x20007900
 80076f4:	200079a8 	.word	0x200079a8

080076f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0208 	add.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f04f 32ff 	mov.w	r2, #4294967295
 8007710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f103 0208 	add.w	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0208 	add.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d103      	bne.n	80077ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e00c      	b.n	80077d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3308      	adds	r3, #8
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e002      	b.n	80077c8 <vListInsert+0x2e>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d2f6      	bcs.n	80077c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6892      	ldr	r2, [r2, #8]
 8007822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6852      	ldr	r2, [r2, #4]
 800782c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d103      	bne.n	8007840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1e5a      	subs	r2, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800788a:	f002 f933 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	3b01      	subs	r3, #1
 80078bc:	68f9      	ldr	r1, [r7, #12]
 80078be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	; 0xff
 80078ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	22ff      	movs	r2, #255	; 0xff
 80078d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d114      	bne.n	800790a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01a      	beq.n	800791e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3310      	adds	r3, #16
 80078ec:	4618      	mov	r0, r3
 80078ee:	f001 f9e3 	bl	8008cb8 <xTaskRemoveFromEventList>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d012      	beq.n	800791e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <xQueueGenericReset+0xcc>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	e009      	b.n	800791e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3310      	adds	r3, #16
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fef2 	bl	80076f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3324      	adds	r3, #36	; 0x24
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff feed 	bl	80076f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800791e:	f002 f919 	bl	8009b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007922:	2301      	movs	r3, #1
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	; 0x38
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <xQueueGenericCreateStatic+0x52>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <xQueueGenericCreateStatic+0x56>
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <xQueueGenericCreateStatic+0x58>
 8007986:	2300      	movs	r3, #0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	623b      	str	r3, [r7, #32]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <xQueueGenericCreateStatic+0x7e>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <xQueueGenericCreateStatic+0x82>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <xQueueGenericCreateStatic+0x84>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61fb      	str	r3, [r7, #28]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079ce:	2350      	movs	r3, #80	; 0x50
 80079d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2b50      	cmp	r3, #80	; 0x50
 80079d6:	d00a      	beq.n	80079ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	61bb      	str	r3, [r7, #24]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80079ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00d      	beq.n	8007a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f83f 	bl	8007a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3730      	adds	r7, #48	; 0x30
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	613b      	str	r3, [r7, #16]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	fb02 f303 	mul.w	r3, r2, r3
 8007a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	3350      	adds	r3, #80	; 0x50
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f002 f96d 	bl	8009d38 <pvPortMalloc>
 8007a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d011      	beq.n	8007a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	3350      	adds	r3, #80	; 0x50
 8007a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a78:	79fa      	ldrb	r2, [r7, #7]
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f805 	bl	8007a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	e002      	b.n	8007ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	69b8      	ldr	r0, [r7, #24]
 8007ac6:	f7ff fecb 	bl	8007860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ad2:	bf00      	nop
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08e      	sub	sp, #56	; 0x38
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007aea:	2300      	movs	r3, #0
 8007aec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <xQueueGenericSend+0x32>
	__asm volatile
 8007af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b0a:	bf00      	nop
 8007b0c:	e7fe      	b.n	8007b0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d103      	bne.n	8007b1c <xQueueGenericSend+0x40>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <xQueueGenericSend+0x44>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <xQueueGenericSend+0x46>
 8007b20:	2300      	movs	r3, #0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <xQueueGenericSend+0x60>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d103      	bne.n	8007b4a <xQueueGenericSend+0x6e>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <xQueueGenericSend+0x72>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <xQueueGenericSend+0x74>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xQueueGenericSend+0x8e>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	623b      	str	r3, [r7, #32]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b6a:	f001 fa67 	bl	800903c <xTaskGetSchedulerState>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <xQueueGenericSend+0x9e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <xQueueGenericSend+0xa2>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <xQueueGenericSend+0xa4>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <xQueueGenericSend+0xbe>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	61fb      	str	r3, [r7, #28]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b9a:	f001 ffab 	bl	8009af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d302      	bcc.n	8007bb0 <xQueueGenericSend+0xd4>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d129      	bne.n	8007c04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb6:	f000 fa8b 	bl	80080d0 <prvCopyDataToQueue>
 8007bba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d010      	beq.n	8007be6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	3324      	adds	r3, #36	; 0x24
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f875 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d013      	beq.n	8007bfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b3f      	ldr	r3, [pc, #252]	; (8007cd4 <xQueueGenericSend+0x1f8>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	e00a      	b.n	8007bfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d007      	beq.n	8007bfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bec:	4b39      	ldr	r3, [pc, #228]	; (8007cd4 <xQueueGenericSend+0x1f8>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007bfc:	f001 ffaa 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e063      	b.n	8007ccc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d103      	bne.n	8007c12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c0a:	f001 ffa3 	bl	8009b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e05c      	b.n	8007ccc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d106      	bne.n	8007c26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c18:	f107 0314 	add.w	r3, r7, #20
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 f8af 	bl	8008d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c22:	2301      	movs	r3, #1
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c26:	f001 ff95 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c2a:	f000 fe1b 	bl	8008864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c2e:	f001 ff61 	bl	8009af4 <vPortEnterCritical>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d103      	bne.n	8007c48 <xQueueGenericSend+0x16c>
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d103      	bne.n	8007c5e <xQueueGenericSend+0x182>
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c5e:	f001 ff79 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c62:	1d3a      	adds	r2, r7, #4
 8007c64:	f107 0314 	add.w	r3, r7, #20
 8007c68:	4611      	mov	r1, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f89e 	bl	8008dac <xTaskCheckForTimeOut>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d124      	bne.n	8007cc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c78:	f000 fb22 	bl	80082c0 <prvIsQueueFull>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d018      	beq.n	8007cb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	3310      	adds	r3, #16
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 ffc4 	bl	8008c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c92:	f000 faad 	bl	80081f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c96:	f000 fdf3 	bl	8008880 <xTaskResumeAll>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f47f af7c 	bne.w	8007b9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ca2:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <xQueueGenericSend+0x1f8>)
 8007ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	e772      	b.n	8007b9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb6:	f000 fa9b 	bl	80081f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cba:	f000 fde1 	bl	8008880 <xTaskResumeAll>
 8007cbe:	e76c      	b.n	8007b9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cc2:	f000 fa95 	bl	80081f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cc6:	f000 fddb 	bl	8008880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3738      	adds	r7, #56	; 0x38
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	e000ed04 	.word	0xe000ed04

08007cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b090      	sub	sp, #64	; 0x40
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10a      	bne.n	8007d06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d103      	bne.n	8007d14 <xQueueGenericSendFromISR+0x3c>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <xQueueGenericSendFromISR+0x40>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <xQueueGenericSendFromISR+0x42>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d103      	bne.n	8007d42 <xQueueGenericSendFromISR+0x6a>
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <xQueueGenericSendFromISR+0x6e>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e000      	b.n	8007d48 <xQueueGenericSendFromISR+0x70>
 8007d46:	2300      	movs	r3, #0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	623b      	str	r3, [r7, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d62:	f001 ffa9 	bl	8009cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d66:	f3ef 8211 	mrs	r2, BASEPRI
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	61fa      	str	r2, [r7, #28]
 8007d7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <xQueueGenericSendFromISR+0xbc>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d12f      	bne.n	8007df4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007daa:	f000 f991 	bl	80080d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d112      	bne.n	8007dde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d016      	beq.n	8007dee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 ff77 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e007      	b.n	8007dee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	b25a      	sxtb	r2, r3
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dee:	2301      	movs	r3, #1
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007df2:	e001      	b.n	8007df8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3740      	adds	r7, #64	; 0x40
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08c      	sub	sp, #48	; 0x30
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <xQueueReceive+0x30>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	623b      	str	r3, [r7, #32]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <xQueueReceive+0x3e>
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <xQueueReceive+0x42>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <xQueueReceive+0x44>
 8007e52:	2300      	movs	r3, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <xQueueReceive+0x5e>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	61fb      	str	r3, [r7, #28]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e6e:	f001 f8e5 	bl	800903c <xTaskGetSchedulerState>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <xQueueReceive+0x6e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <xQueueReceive+0x72>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueReceive+0x74>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10a      	bne.n	8007e9e <xQueueReceive+0x8e>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	61bb      	str	r3, [r7, #24]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e9e:	f001 fe29 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01f      	beq.n	8007eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eb2:	f000 f977 	bl	80081a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	1e5a      	subs	r2, r3, #1
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00f      	beq.n	8007ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	3310      	adds	r3, #16
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 fef4 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d007      	beq.n	8007ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ed6:	4b3d      	ldr	r3, [pc, #244]	; (8007fcc <xQueueReceive+0x1bc>)
 8007ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ee6:	f001 fe35 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e069      	b.n	8007fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ef4:	f001 fe2e 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e062      	b.n	8007fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f02:	f107 0310 	add.w	r3, r7, #16
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 ff3a 	bl	8008d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f10:	f001 fe20 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f14:	f000 fca6 	bl	8008864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f18:	f001 fdec 	bl	8009af4 <vPortEnterCritical>
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f28:	d103      	bne.n	8007f32 <xQueueReceive+0x122>
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3e:	d103      	bne.n	8007f48 <xQueueReceive+0x138>
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f48:	f001 fe04 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f4c:	1d3a      	adds	r2, r7, #4
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 ff29 	bl	8008dac <xTaskCheckForTimeOut>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d123      	bne.n	8007fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f62:	f000 f997 	bl	8008294 <prvIsQueueEmpty>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	3324      	adds	r3, #36	; 0x24
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fe4f 	bl	8008c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7c:	f000 f938 	bl	80081f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f80:	f000 fc7e 	bl	8008880 <xTaskResumeAll>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d189      	bne.n	8007e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f8a:	4b10      	ldr	r3, [pc, #64]	; (8007fcc <xQueueReceive+0x1bc>)
 8007f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	e780      	b.n	8007e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9e:	f000 f927 	bl	80081f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fa2:	f000 fc6d 	bl	8008880 <xTaskResumeAll>
 8007fa6:	e77a      	b.n	8007e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007faa:	f000 f921 	bl	80081f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fae:	f000 fc67 	bl	8008880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb4:	f000 f96e 	bl	8008294 <prvIsQueueEmpty>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f af6f 	beq.w	8007e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3730      	adds	r7, #48	; 0x30
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08e      	sub	sp, #56	; 0x38
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	623b      	str	r3, [r7, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <xQueueReceiveFromISR+0x3a>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <xQueueReceiveFromISR+0x3e>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueReceiveFromISR+0x40>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61fb      	str	r3, [r7, #28]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800802a:	f001 fe45 	bl	8009cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800802e:	f3ef 8211 	mrs	r2, BASEPRI
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	61ba      	str	r2, [r7, #24]
 8008044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02f      	beq.n	80080b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800805c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008064:	f000 f89e 	bl	80081a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	1e5a      	subs	r2, r3, #1
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008078:	d112      	bne.n	80080a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d016      	beq.n	80080b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	3310      	adds	r3, #16
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fe16 	bl	8008cb8 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00e      	beq.n	80080b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e007      	b.n	80080b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80080a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a4:	3301      	adds	r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	b25a      	sxtb	r2, r3
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80080b0:	2301      	movs	r3, #1
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
 80080b4:	e001      	b.n	80080ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f383 8811 	msr	BASEPRI, r3
}
 80080c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3738      	adds	r7, #56	; 0x38
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d14d      	bne.n	8008192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 ffbc 	bl	8009078 <xTaskPriorityDisinherit>
 8008100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	e043      	b.n	8008192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d119      	bne.n	8008144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6858      	ldr	r0, [r3, #4]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	461a      	mov	r2, r3
 800811a:	68b9      	ldr	r1, [r7, #8]
 800811c:	f002 ff78 	bl	800b010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	441a      	add	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	429a      	cmp	r2, r3
 8008138:	d32b      	bcc.n	8008192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	e026      	b.n	8008192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	68d8      	ldr	r0, [r3, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	461a      	mov	r2, r3
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	f002 ff5e 	bl	800b010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	425b      	negs	r3, r3
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d207      	bcs.n	8008180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	425b      	negs	r3, r3
 800817a:	441a      	add	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d105      	bne.n	8008192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3b01      	subs	r3, #1
 8008190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800819a:	697b      	ldr	r3, [r7, #20]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	441a      	add	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d303      	bcc.n	80081d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68d9      	ldr	r1, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	461a      	mov	r2, r3
 80081e2:	6838      	ldr	r0, [r7, #0]
 80081e4:	f002 ff14 	bl	800b010 <memcpy>
	}
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081f8:	f001 fc7c 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008204:	e011      	b.n	800822a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d012      	beq.n	8008234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3324      	adds	r3, #36	; 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fd50 	bl	8008cb8 <xTaskRemoveFromEventList>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800821e:	f000 fe27 	bl	8008e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	3b01      	subs	r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dce9      	bgt.n	8008206 <prvUnlockQueue+0x16>
 8008232:	e000      	b.n	8008236 <prvUnlockQueue+0x46>
					break;
 8008234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	22ff      	movs	r2, #255	; 0xff
 800823a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800823e:	f001 fc89 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008242:	f001 fc57 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800824c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800824e:	e011      	b.n	8008274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d012      	beq.n	800827e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3310      	adds	r3, #16
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fd2b 	bl	8008cb8 <xTaskRemoveFromEventList>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008268:	f000 fe02 	bl	8008e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	3b01      	subs	r3, #1
 8008270:	b2db      	uxtb	r3, r3
 8008272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dce9      	bgt.n	8008250 <prvUnlockQueue+0x60>
 800827c:	e000      	b.n	8008280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800827e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	22ff      	movs	r2, #255	; 0xff
 8008284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008288:	f001 fc64 	bl	8009b54 <vPortExitCritical>
}
 800828c:	bf00      	nop
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800829c:	f001 fc2a 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e001      	b.n	80082b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 fc4f 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 80082b6:	68fb      	ldr	r3, [r7, #12]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082c8:	f001 fc14 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d102      	bne.n	80082de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	e001      	b.n	80082e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082e2:	f001 fc37 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 80082e6:	68fb      	ldr	r3, [r7, #12]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	e014      	b.n	800832a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <vQueueAddToRegistry+0x50>)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800830c:	490c      	ldr	r1, [pc, #48]	; (8008340 <vQueueAddToRegistry+0x50>)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008316:	4a0a      	ldr	r2, [pc, #40]	; (8008340 <vQueueAddToRegistry+0x50>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008322:	e006      	b.n	8008332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b07      	cmp	r3, #7
 800832e:	d9e7      	bls.n	8008300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20007da8 	.word	0x20007da8

08008344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008354:	f001 fbce 	bl	8009af4 <vPortEnterCritical>
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835e:	b25b      	sxtb	r3, r3
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008364:	d103      	bne.n	800836e <vQueueWaitForMessageRestricted+0x2a>
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008374:	b25b      	sxtb	r3, r3
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d103      	bne.n	8008384 <vQueueWaitForMessageRestricted+0x40>
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008384:	f001 fbe6 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	3324      	adds	r3, #36	; 0x24
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fc61 	bl	8008c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f7ff ff26 	bl	80081f0 <prvUnlockQueue>
	}
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08e      	sub	sp, #56	; 0x38
 80083b0:	af04      	add	r7, sp, #16
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	623b      	str	r3, [r7, #32]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	61fb      	str	r3, [r7, #28]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083f2:	23a8      	movs	r3, #168	; 0xa8
 80083f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2ba8      	cmp	r3, #168	; 0xa8
 80083fa:	d00a      	beq.n	8008412 <xTaskCreateStatic+0x66>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	61bb      	str	r3, [r7, #24]
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008412:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01e      	beq.n	8008458 <xTaskCreateStatic+0xac>
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01b      	beq.n	8008458 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008428:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	2202      	movs	r2, #2
 800842e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008432:	2300      	movs	r3, #0
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	9302      	str	r3, [sp, #8]
 800843a:	f107 0314 	add.w	r3, r7, #20
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f850 	bl	80084f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008452:	f000 f8f3 	bl	800863c <prvAddNewTaskToReadyList>
 8008456:	e001      	b.n	800845c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800845c:	697b      	ldr	r3, [r7, #20]
	}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008466:	b580      	push	{r7, lr}
 8008468:	b08c      	sub	sp, #48	; 0x30
 800846a:	af04      	add	r7, sp, #16
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4618      	mov	r0, r3
 800847c:	f001 fc5c 	bl	8009d38 <pvPortMalloc>
 8008480:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00e      	beq.n	80084a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008488:	20a8      	movs	r0, #168	; 0xa8
 800848a:	f001 fc55 	bl	8009d38 <pvPortMalloc>
 800848e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	631a      	str	r2, [r3, #48]	; 0x30
 800849c:	e005      	b.n	80084aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800849e:	6978      	ldr	r0, [r7, #20]
 80084a0:	f001 fd16 	bl	8009ed0 <vPortFree>
 80084a4:	e001      	b.n	80084aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d017      	beq.n	80084e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084b8:	88fa      	ldrh	r2, [r7, #6]
 80084ba:	2300      	movs	r3, #0
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f80e 	bl	80084f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d4:	69f8      	ldr	r0, [r7, #28]
 80084d6:	f000 f8b1 	bl	800863c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084da:	2301      	movs	r3, #1
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	e002      	b.n	80084e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084e0:	f04f 33ff 	mov.w	r3, #4294967295
 80084e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084e6:	69bb      	ldr	r3, [r7, #24]
	}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	461a      	mov	r2, r3
 8008508:	21a5      	movs	r1, #165	; 0xa5
 800850a:	f002 fc8f 	bl	800ae2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008518:	3b01      	subs	r3, #1
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f023 0307 	bic.w	r3, r3, #7
 8008526:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	617b      	str	r3, [r7, #20]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01f      	beq.n	800858e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e012      	b.n	800857a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	7819      	ldrb	r1, [r3, #0]
 800855c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	3334      	adds	r3, #52	; 0x34
 8008564:	460a      	mov	r2, r1
 8008566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	3301      	adds	r3, #1
 8008578:	61fb      	str	r3, [r7, #28]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	2b0f      	cmp	r3, #15
 800857e:	d9e9      	bls.n	8008554 <prvInitialiseNewTask+0x64>
 8008580:	e000      	b.n	8008584 <prvInitialiseNewTask+0x94>
			{
				break;
 8008582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800858c:	e003      	b.n	8008596 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	2b37      	cmp	r3, #55	; 0x37
 800859a:	d901      	bls.n	80085a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800859c:	2337      	movs	r3, #55	; 0x37
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	2200      	movs	r2, #0
 80085b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	3304      	adds	r3, #4
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff f8be 	bl	8007738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085be:	3318      	adds	r3, #24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7ff f8b9 	bl	8007738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	3354      	adds	r3, #84	; 0x54
 80085f0:	224c      	movs	r2, #76	; 0x4c
 80085f2:	2100      	movs	r1, #0
 80085f4:	4618      	mov	r0, r3
 80085f6:	f002 fc19 	bl	800ae2c <memset>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <prvInitialiseNewTask+0x140>)
 80085fe:	659a      	str	r2, [r3, #88]	; 0x58
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <prvInitialiseNewTask+0x144>)
 8008604:	65da      	str	r2, [r3, #92]	; 0x5c
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	4a0b      	ldr	r2, [pc, #44]	; (8008638 <prvInitialiseNewTask+0x148>)
 800860a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	68f9      	ldr	r1, [r7, #12]
 8008610:	69b8      	ldr	r0, [r7, #24]
 8008612:	f001 f941 	bl	8009898 <pxPortInitialiseStack>
 8008616:	4602      	mov	r2, r0
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008626:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008628:	bf00      	nop
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	2000e5e4 	.word	0x2000e5e4
 8008634:	2000e64c 	.word	0x2000e64c
 8008638:	2000e6b4 	.word	0x2000e6b4

0800863c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008644:	f001 fa56 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008648:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 8008650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008652:	4b2c      	ldr	r3, [pc, #176]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800865a:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008660:	4b27      	ldr	r3, [pc, #156]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d110      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008668:	f000 fc26 	bl	8008eb8 <prvInitialiseTaskLists>
 800866c:	e00d      	b.n	800868a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800866e:	4b26      	ldr	r3, [pc, #152]	; (8008708 <prvAddNewTaskToReadyList+0xcc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008676:	4b23      	ldr	r3, [pc, #140]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	429a      	cmp	r2, r3
 8008682:	d802      	bhi.n	800868a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008684:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800868a:	4b20      	ldr	r3, [pc, #128]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	4a1e      	ldr	r2, [pc, #120]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 8008692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008694:	4b1d      	ldr	r3, [pc, #116]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <prvAddNewTaskToReadyList+0xd4>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d903      	bls.n	80086b0 <prvAddNewTaskToReadyList+0x74>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <prvAddNewTaskToReadyList+0xd4>)
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4a15      	ldr	r2, [pc, #84]	; (8008714 <prvAddNewTaskToReadyList+0xd8>)
 80086be:	441a      	add	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7ff f843 	bl	8007752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086cc:	f001 fa42 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <prvAddNewTaskToReadyList+0xcc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00e      	beq.n	80086f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d207      	bcs.n	80086f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvAddNewTaskToReadyList+0xdc>)
 80086e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200082bc 	.word	0x200082bc
 8008704:	20007de8 	.word	0x20007de8
 8008708:	200082c8 	.word	0x200082c8
 800870c:	200082d8 	.word	0x200082d8
 8008710:	200082c4 	.word	0x200082c4
 8008714:	20007dec 	.word	0x20007dec
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d017      	beq.n	800875e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800872e:	4b13      	ldr	r3, [pc, #76]	; (800877c <vTaskDelay+0x60>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <vTaskDelay+0x30>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	60bb      	str	r3, [r7, #8]
}
 8008748:	bf00      	nop
 800874a:	e7fe      	b.n	800874a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800874c:	f000 f88a 	bl	8008864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fcfe 	bl	8009154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008758:	f000 f892 	bl	8008880 <xTaskResumeAll>
 800875c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d107      	bne.n	8008774 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <vTaskDelay+0x64>)
 8008766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	200082e4 	.word	0x200082e4
 8008780:	e000ed04 	.word	0xe000ed04

08008784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08a      	sub	sp, #40	; 0x28
 8008788:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008792:	463a      	mov	r2, r7
 8008794:	1d39      	adds	r1, r7, #4
 8008796:	f107 0308 	add.w	r3, r7, #8
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ff78 	bl	8007690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	9202      	str	r2, [sp, #8]
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	2300      	movs	r3, #0
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	2300      	movs	r3, #0
 80087b0:	460a      	mov	r2, r1
 80087b2:	4924      	ldr	r1, [pc, #144]	; (8008844 <vTaskStartScheduler+0xc0>)
 80087b4:	4824      	ldr	r0, [pc, #144]	; (8008848 <vTaskStartScheduler+0xc4>)
 80087b6:	f7ff fdf9 	bl	80083ac <xTaskCreateStatic>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4a23      	ldr	r2, [pc, #140]	; (800884c <vTaskStartScheduler+0xc8>)
 80087be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087c0:	4b22      	ldr	r3, [pc, #136]	; (800884c <vTaskStartScheduler+0xc8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e001      	b.n	80087d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d102      	bne.n	80087de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087d8:	f000 fd10 	bl	80091fc <xTimerCreateTimerTask>
 80087dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d11b      	bne.n	800881c <vTaskStartScheduler+0x98>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	613b      	str	r3, [r7, #16]
}
 80087f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <vTaskStartScheduler+0xcc>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3354      	adds	r3, #84	; 0x54
 80087fe:	4a15      	ldr	r2, [pc, #84]	; (8008854 <vTaskStartScheduler+0xd0>)
 8008800:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008802:	4b15      	ldr	r3, [pc, #84]	; (8008858 <vTaskStartScheduler+0xd4>)
 8008804:	f04f 32ff 	mov.w	r2, #4294967295
 8008808:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <vTaskStartScheduler+0xd8>)
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008810:	4b13      	ldr	r3, [pc, #76]	; (8008860 <vTaskStartScheduler+0xdc>)
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008816:	f001 f8cb 	bl	80099b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800881a:	e00e      	b.n	800883a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d10a      	bne.n	800883a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	60fb      	str	r3, [r7, #12]
}
 8008836:	bf00      	nop
 8008838:	e7fe      	b.n	8008838 <vTaskStartScheduler+0xb4>
}
 800883a:	bf00      	nop
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	0800d13c 	.word	0x0800d13c
 8008848:	08008e89 	.word	0x08008e89
 800884c:	200082e0 	.word	0x200082e0
 8008850:	20007de8 	.word	0x20007de8
 8008854:	200000f4 	.word	0x200000f4
 8008858:	200082dc 	.word	0x200082dc
 800885c:	200082c8 	.word	0x200082c8
 8008860:	200082c0 	.word	0x200082c0

08008864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <vTaskSuspendAll+0x18>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	4a03      	ldr	r2, [pc, #12]	; (800887c <vTaskSuspendAll+0x18>)
 8008870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008872:	bf00      	nop
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	200082e4 	.word	0x200082e4

08008880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800888e:	4b42      	ldr	r3, [pc, #264]	; (8008998 <xTaskResumeAll+0x118>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10a      	bne.n	80088ac <xTaskResumeAll+0x2c>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	603b      	str	r3, [r7, #0]
}
 80088a8:	bf00      	nop
 80088aa:	e7fe      	b.n	80088aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088ac:	f001 f922 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088b0:	4b39      	ldr	r3, [pc, #228]	; (8008998 <xTaskResumeAll+0x118>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	4a38      	ldr	r2, [pc, #224]	; (8008998 <xTaskResumeAll+0x118>)
 80088b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ba:	4b37      	ldr	r3, [pc, #220]	; (8008998 <xTaskResumeAll+0x118>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d162      	bne.n	8008988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088c2:	4b36      	ldr	r3, [pc, #216]	; (800899c <xTaskResumeAll+0x11c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d05e      	beq.n	8008988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088ca:	e02f      	b.n	800892c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088cc:	4b34      	ldr	r3, [pc, #208]	; (80089a0 <xTaskResumeAll+0x120>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3318      	adds	r3, #24
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe ff97 	bl	800780c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe ff92 	bl	800780c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ec:	4b2d      	ldr	r3, [pc, #180]	; (80089a4 <xTaskResumeAll+0x124>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d903      	bls.n	80088fc <xTaskResumeAll+0x7c>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	4a2a      	ldr	r2, [pc, #168]	; (80089a4 <xTaskResumeAll+0x124>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4a27      	ldr	r2, [pc, #156]	; (80089a8 <xTaskResumeAll+0x128>)
 800890a:	441a      	add	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3304      	adds	r3, #4
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fe ff1d 	bl	8007752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b23      	ldr	r3, [pc, #140]	; (80089ac <xTaskResumeAll+0x12c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008926:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <xTaskResumeAll+0x130>)
 8008928:	2201      	movs	r2, #1
 800892a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800892c:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <xTaskResumeAll+0x120>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1cb      	bne.n	80088cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800893a:	f000 fb5f 	bl	8008ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800893e:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <xTaskResumeAll+0x134>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d010      	beq.n	800896c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800894a:	f000 f847 	bl	80089dc <xTaskIncrementTick>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008954:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <xTaskResumeAll+0x130>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3b01      	subs	r3, #1
 800895e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f1      	bne.n	800894a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008966:	4b13      	ldr	r3, [pc, #76]	; (80089b4 <xTaskResumeAll+0x134>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800896c:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <xTaskResumeAll+0x130>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d009      	beq.n	8008988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <xTaskResumeAll+0x138>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008988:	f001 f8e4 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 800898c:	68bb      	ldr	r3, [r7, #8]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200082e4 	.word	0x200082e4
 800899c:	200082bc 	.word	0x200082bc
 80089a0:	2000827c 	.word	0x2000827c
 80089a4:	200082c4 	.word	0x200082c4
 80089a8:	20007dec 	.word	0x20007dec
 80089ac:	20007de8 	.word	0x20007de8
 80089b0:	200082d0 	.word	0x200082d0
 80089b4:	200082cc 	.word	0x200082cc
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <xTaskGetTickCount+0x1c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089c8:	687b      	ldr	r3, [r7, #4]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200082c0 	.word	0x200082c0

080089dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089e6:	4b4f      	ldr	r3, [pc, #316]	; (8008b24 <xTaskIncrementTick+0x148>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 808f 	bne.w	8008b0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089f0:	4b4d      	ldr	r3, [pc, #308]	; (8008b28 <xTaskIncrementTick+0x14c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f8:	4a4b      	ldr	r2, [pc, #300]	; (8008b28 <xTaskIncrementTick+0x14c>)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d120      	bne.n	8008a46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a04:	4b49      	ldr	r3, [pc, #292]	; (8008b2c <xTaskIncrementTick+0x150>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	603b      	str	r3, [r7, #0]
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <xTaskIncrementTick+0x46>
 8008a24:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <xTaskIncrementTick+0x150>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	4b41      	ldr	r3, [pc, #260]	; (8008b30 <xTaskIncrementTick+0x154>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a3f      	ldr	r2, [pc, #252]	; (8008b2c <xTaskIncrementTick+0x150>)
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4a3f      	ldr	r2, [pc, #252]	; (8008b30 <xTaskIncrementTick+0x154>)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	4b3e      	ldr	r3, [pc, #248]	; (8008b34 <xTaskIncrementTick+0x158>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	4a3d      	ldr	r2, [pc, #244]	; (8008b34 <xTaskIncrementTick+0x158>)
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	f000 fadb 	bl	8008ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a46:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <xTaskIncrementTick+0x15c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d349      	bcc.n	8008ae4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a50:	4b36      	ldr	r3, [pc, #216]	; (8008b2c <xTaskIncrementTick+0x150>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a5a:	4b37      	ldr	r3, [pc, #220]	; (8008b38 <xTaskIncrementTick+0x15c>)
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	601a      	str	r2, [r3, #0]
					break;
 8008a62:	e03f      	b.n	8008ae4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a64:	4b31      	ldr	r3, [pc, #196]	; (8008b2c <xTaskIncrementTick+0x150>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d203      	bcs.n	8008a84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a7c:	4a2e      	ldr	r2, [pc, #184]	; (8008b38 <xTaskIncrementTick+0x15c>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a82:	e02f      	b.n	8008ae4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe febf 	bl	800780c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	3318      	adds	r3, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe feb6 	bl	800780c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4b25      	ldr	r3, [pc, #148]	; (8008b3c <xTaskIncrementTick+0x160>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d903      	bls.n	8008ab4 <xTaskIncrementTick+0xd8>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a22      	ldr	r2, [pc, #136]	; (8008b3c <xTaskIncrementTick+0x160>)
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	; (8008b40 <xTaskIncrementTick+0x164>)
 8008ac2:	441a      	add	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe fe41 	bl	8007752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <xTaskIncrementTick+0x168>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d3b8      	bcc.n	8008a50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ae2:	e7b5      	b.n	8008a50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ae4:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <xTaskIncrementTick+0x168>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	4915      	ldr	r1, [pc, #84]	; (8008b40 <xTaskIncrementTick+0x164>)
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d901      	bls.n	8008b00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008afc:	2301      	movs	r3, #1
 8008afe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <xTaskIncrementTick+0x16c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e004      	b.n	8008b18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <xTaskIncrementTick+0x170>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <xTaskIncrementTick+0x170>)
 8008b16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b18:	697b      	ldr	r3, [r7, #20]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200082e4 	.word	0x200082e4
 8008b28:	200082c0 	.word	0x200082c0
 8008b2c:	20008274 	.word	0x20008274
 8008b30:	20008278 	.word	0x20008278
 8008b34:	200082d4 	.word	0x200082d4
 8008b38:	200082dc 	.word	0x200082dc
 8008b3c:	200082c4 	.word	0x200082c4
 8008b40:	20007dec 	.word	0x20007dec
 8008b44:	20007de8 	.word	0x20007de8
 8008b48:	200082d0 	.word	0x200082d0
 8008b4c:	200082cc 	.word	0x200082cc

08008b50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b56:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <vTaskSwitchContext+0xb0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b5e:	4b29      	ldr	r3, [pc, #164]	; (8008c04 <vTaskSwitchContext+0xb4>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b64:	e046      	b.n	8008bf4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008b66:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <vTaskSwitchContext+0xb4>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6c:	4b26      	ldr	r3, [pc, #152]	; (8008c08 <vTaskSwitchContext+0xb8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	e010      	b.n	8008b96 <vTaskSwitchContext+0x46>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <vTaskSwitchContext+0x3e>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	491d      	ldr	r1, [pc, #116]	; (8008c0c <vTaskSwitchContext+0xbc>)
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0e4      	beq.n	8008b74 <vTaskSwitchContext+0x24>
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a15      	ldr	r2, [pc, #84]	; (8008c0c <vTaskSwitchContext+0xbc>)
 8008bb6:	4413      	add	r3, r2
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	605a      	str	r2, [r3, #4]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d104      	bne.n	8008bda <vTaskSwitchContext+0x8a>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	605a      	str	r2, [r3, #4]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	4a0b      	ldr	r2, [pc, #44]	; (8008c10 <vTaskSwitchContext+0xc0>)
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <vTaskSwitchContext+0xb8>)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <vTaskSwitchContext+0xc0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3354      	adds	r3, #84	; 0x54
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <vTaskSwitchContext+0xc4>)
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200082e4 	.word	0x200082e4
 8008c04:	200082d0 	.word	0x200082d0
 8008c08:	200082c4 	.word	0x200082c4
 8008c0c:	20007dec 	.word	0x20007dec
 8008c10:	20007de8 	.word	0x20007de8
 8008c14:	200000f4 	.word	0x200000f4

08008c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60fb      	str	r3, [r7, #12]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c3e:	4b07      	ldr	r3, [pc, #28]	; (8008c5c <vTaskPlaceOnEventList+0x44>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3318      	adds	r3, #24
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fe fda7 	bl	800779a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	6838      	ldr	r0, [r7, #0]
 8008c50:	f000 fa80 	bl	8009154 <prvAddCurrentTaskToDelayedList>
}
 8008c54:	bf00      	nop
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20007de8 	.word	0x20007de8

08008c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	617b      	str	r3, [r7, #20]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c88:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7fe fd5e 	bl	8007752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	68b8      	ldr	r0, [r7, #8]
 8008ca6:	f000 fa55 	bl	8009154 <prvAddCurrentTaskToDelayedList>
	}
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20007de8 	.word	0x20007de8

08008cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	3318      	adds	r3, #24
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fd8f 	bl	800780c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cee:	4b1e      	ldr	r3, [pc, #120]	; (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d11d      	bne.n	8008d32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe fd86 	bl	800780c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b19      	ldr	r3, [pc, #100]	; (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d903      	bls.n	8008d14 <xTaskRemoveFromEventList+0x5c>
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a16      	ldr	r2, [pc, #88]	; (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <xTaskRemoveFromEventList+0xb8>)
 8008d22:	441a      	add	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fe fd11 	bl	8007752 <vListInsertEnd>
 8008d30:	e005      	b.n	8008d3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3318      	adds	r3, #24
 8008d36:	4619      	mov	r1, r3
 8008d38:	480e      	ldr	r0, [pc, #56]	; (8008d74 <xTaskRemoveFromEventList+0xbc>)
 8008d3a:	f7fe fd0a 	bl	8007752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <xTaskRemoveFromEventList+0xc0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d905      	bls.n	8008d58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <xTaskRemoveFromEventList+0xc4>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e001      	b.n	8008d5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d5c:	697b      	ldr	r3, [r7, #20]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	200082e4 	.word	0x200082e4
 8008d6c:	200082c4 	.word	0x200082c4
 8008d70:	20007dec 	.word	0x20007dec
 8008d74:	2000827c 	.word	0x2000827c
 8008d78:	20007de8 	.word	0x20007de8
 8008d7c:	200082d0 	.word	0x200082d0

08008d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <vTaskInternalSetTimeOutState+0x24>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <vTaskInternalSetTimeOutState+0x28>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	200082d4 	.word	0x200082d4
 8008da8:	200082c0 	.word	0x200082c0

08008dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60fb      	str	r3, [r7, #12]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dee:	f000 fe81 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008df2:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <xTaskCheckForTimeOut+0xbc>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d102      	bne.n	8008e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e023      	b.n	8008e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b15      	ldr	r3, [pc, #84]	; (8008e6c <xTaskCheckForTimeOut+0xc0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d007      	beq.n	8008e2e <xTaskCheckForTimeOut+0x82>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d302      	bcc.n	8008e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e015      	b.n	8008e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d20b      	bcs.n	8008e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff9b 	bl	8008d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	61fb      	str	r3, [r7, #28]
 8008e4e:	e004      	b.n	8008e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e5a:	f000 fe7b 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008e5e:	69fb      	ldr	r3, [r7, #28]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3720      	adds	r7, #32
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200082c0 	.word	0x200082c0
 8008e6c:	200082d4 	.word	0x200082d4

08008e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <vTaskMissedYield+0x14>)
 8008e76:	2201      	movs	r2, #1
 8008e78:	601a      	str	r2, [r3, #0]
}
 8008e7a:	bf00      	nop
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	200082d0 	.word	0x200082d0

08008e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e90:	f000 f852 	bl	8008f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <prvIdleTask+0x28>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d9f9      	bls.n	8008e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e9c:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <prvIdleTask+0x2c>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eac:	e7f0      	b.n	8008e90 <prvIdleTask+0x8>
 8008eae:	bf00      	nop
 8008eb0:	20007dec 	.word	0x20007dec
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	e00c      	b.n	8008ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <prvInitialiseTaskLists+0x60>)
 8008ed0:	4413      	add	r3, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fc10 	bl	80076f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3301      	adds	r3, #1
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b37      	cmp	r3, #55	; 0x37
 8008ee2:	d9ef      	bls.n	8008ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ee4:	480d      	ldr	r0, [pc, #52]	; (8008f1c <prvInitialiseTaskLists+0x64>)
 8008ee6:	f7fe fc07 	bl	80076f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eea:	480d      	ldr	r0, [pc, #52]	; (8008f20 <prvInitialiseTaskLists+0x68>)
 8008eec:	f7fe fc04 	bl	80076f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ef0:	480c      	ldr	r0, [pc, #48]	; (8008f24 <prvInitialiseTaskLists+0x6c>)
 8008ef2:	f7fe fc01 	bl	80076f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ef6:	480c      	ldr	r0, [pc, #48]	; (8008f28 <prvInitialiseTaskLists+0x70>)
 8008ef8:	f7fe fbfe 	bl	80076f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008efc:	480b      	ldr	r0, [pc, #44]	; (8008f2c <prvInitialiseTaskLists+0x74>)
 8008efe:	f7fe fbfb 	bl	80076f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <prvInitialiseTaskLists+0x78>)
 8008f04:	4a05      	ldr	r2, [pc, #20]	; (8008f1c <prvInitialiseTaskLists+0x64>)
 8008f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <prvInitialiseTaskLists+0x7c>)
 8008f0a:	4a05      	ldr	r2, [pc, #20]	; (8008f20 <prvInitialiseTaskLists+0x68>)
 8008f0c:	601a      	str	r2, [r3, #0]
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20007dec 	.word	0x20007dec
 8008f1c:	2000824c 	.word	0x2000824c
 8008f20:	20008260 	.word	0x20008260
 8008f24:	2000827c 	.word	0x2000827c
 8008f28:	20008290 	.word	0x20008290
 8008f2c:	200082a8 	.word	0x200082a8
 8008f30:	20008274 	.word	0x20008274
 8008f34:	20008278 	.word	0x20008278

08008f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f3e:	e019      	b.n	8008f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f40:	f000 fdd8 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f44:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <prvCheckTasksWaitingTermination+0x50>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fc5b 	bl	800780c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f56:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <prvCheckTasksWaitingTermination+0x54>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	4a0b      	ldr	r2, [pc, #44]	; (8008f8c <prvCheckTasksWaitingTermination+0x54>)
 8008f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	4a0a      	ldr	r2, [pc, #40]	; (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f6a:	f000 fdf3 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f810 	bl	8008f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <prvCheckTasksWaitingTermination+0x58>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e1      	bne.n	8008f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20008290 	.word	0x20008290
 8008f8c:	200082bc 	.word	0x200082bc
 8008f90:	200082a4 	.word	0x200082a4

08008f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3354      	adds	r3, #84	; 0x54
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 ff75 	bl	800ae90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d108      	bne.n	8008fc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 ff8b 	bl	8009ed0 <vPortFree>
				vPortFree( pxTCB );
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 ff88 	bl	8009ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fc0:	e018      	b.n	8008ff4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d103      	bne.n	8008fd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 ff7f 	bl	8009ed0 <vPortFree>
	}
 8008fd2:	e00f      	b.n	8008ff4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d00a      	beq.n	8008ff4 <prvDeleteTCB+0x60>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	60fb      	str	r3, [r7, #12]
}
 8008ff0:	bf00      	nop
 8008ff2:	e7fe      	b.n	8008ff2 <prvDeleteTCB+0x5e>
	}
 8008ff4:	bf00      	nop
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 800900e:	f04f 32ff 	mov.w	r2, #4294967295
 8009012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009014:	e008      	b.n	8009028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a04      	ldr	r2, [pc, #16]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20008274 	.word	0x20008274
 8009038:	200082dc 	.word	0x200082dc

0800903c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <xTaskGetSchedulerState+0x34>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800904a:	2301      	movs	r3, #1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e008      	b.n	8009062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <xTaskGetSchedulerState+0x38>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009058:	2302      	movs	r3, #2
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e001      	b.n	8009062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009062:	687b      	ldr	r3, [r7, #4]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	200082c8 	.word	0x200082c8
 8009074:	200082e4 	.word	0x200082e4

08009078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d056      	beq.n	800913c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800908e:	4b2e      	ldr	r3, [pc, #184]	; (8009148 <xTaskPriorityDisinherit+0xd0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	429a      	cmp	r2, r3
 8009096:	d00a      	beq.n	80090ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	60fb      	str	r3, [r7, #12]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60bb      	str	r3, [r7, #8]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	1e5a      	subs	r2, r3, #1
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090de:	429a      	cmp	r2, r3
 80090e0:	d02c      	beq.n	800913c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d128      	bne.n	800913c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fb8c 	bl	800780c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b0f      	ldr	r3, [pc, #60]	; (800914c <xTaskPriorityDisinherit+0xd4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	429a      	cmp	r2, r3
 8009112:	d903      	bls.n	800911c <xTaskPriorityDisinherit+0xa4>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	4a0c      	ldr	r2, [pc, #48]	; (800914c <xTaskPriorityDisinherit+0xd4>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4a09      	ldr	r2, [pc, #36]	; (8009150 <xTaskPriorityDisinherit+0xd8>)
 800912a:	441a      	add	r2, r3
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3304      	adds	r3, #4
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7fe fb0d 	bl	8007752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800913c:	697b      	ldr	r3, [r7, #20]
	}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20007de8 	.word	0x20007de8
 800914c:	200082c4 	.word	0x200082c4
 8009150:	20007dec 	.word	0x20007dec

08009154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915e:	4b21      	ldr	r3, [pc, #132]	; (80091e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009164:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3304      	adds	r3, #4
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fb4e 	bl	800780c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009176:	d10a      	bne.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800917e:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4819      	ldr	r0, [pc, #100]	; (80091ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009188:	f7fe fae3 	bl	8007752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800918c:	e026      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009196:	4b14      	ldr	r3, [pc, #80]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d209      	bcs.n	80091ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a6:	4b12      	ldr	r3, [pc, #72]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3304      	adds	r3, #4
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe faf1 	bl	800779a <vListInsert>
}
 80091b8:	e010      	b.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ba:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3304      	adds	r3, #4
 80091c4:	4619      	mov	r1, r3
 80091c6:	4610      	mov	r0, r2
 80091c8:	f7fe fae7 	bl	800779a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091cc:	4b0a      	ldr	r3, [pc, #40]	; (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d202      	bcs.n	80091dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091d6:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6013      	str	r3, [r2, #0]
}
 80091dc:	bf00      	nop
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	200082c0 	.word	0x200082c0
 80091e8:	20007de8 	.word	0x20007de8
 80091ec:	200082a8 	.word	0x200082a8
 80091f0:	20008278 	.word	0x20008278
 80091f4:	20008274 	.word	0x20008274
 80091f8:	200082dc 	.word	0x200082dc

080091fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009206:	f000 fb07 	bl	8009818 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <xTimerCreateTimerTask+0x80>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d021      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800921a:	1d3a      	adds	r2, r7, #4
 800921c:	f107 0108 	add.w	r1, r7, #8
 8009220:	f107 030c 	add.w	r3, r7, #12
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe fa4d 	bl	80076c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	9202      	str	r2, [sp, #8]
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	2302      	movs	r3, #2
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	2300      	movs	r3, #0
 800923a:	460a      	mov	r2, r1
 800923c:	4910      	ldr	r1, [pc, #64]	; (8009280 <xTimerCreateTimerTask+0x84>)
 800923e:	4811      	ldr	r0, [pc, #68]	; (8009284 <xTimerCreateTimerTask+0x88>)
 8009240:	f7ff f8b4 	bl	80083ac <xTaskCreateStatic>
 8009244:	4603      	mov	r3, r0
 8009246:	4a10      	ldr	r2, [pc, #64]	; (8009288 <xTimerCreateTimerTask+0x8c>)
 8009248:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <xTimerCreateTimerTask+0x8c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009252:	2301      	movs	r3, #1
 8009254:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10a      	bne.n	8009272 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	613b      	str	r3, [r7, #16]
}
 800926e:	bf00      	nop
 8009270:	e7fe      	b.n	8009270 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009272:	697b      	ldr	r3, [r7, #20]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20008318 	.word	0x20008318
 8009280:	0800d144 	.word	0x0800d144
 8009284:	080093c1 	.word	0x080093c1
 8009288:	2000831c 	.word	0x2000831c

0800928c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800929a:	2300      	movs	r3, #0
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	623b      	str	r3, [r7, #32]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092ba:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <xTimerGenericCommand+0x98>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02a      	beq.n	8009318 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	dc18      	bgt.n	8009306 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092d4:	f7ff feb2 	bl	800903c <xTaskGetSchedulerState>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d109      	bne.n	80092f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <xTimerGenericCommand+0x98>)
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	f107 0110 	add.w	r1, r7, #16
 80092e6:	2300      	movs	r3, #0
 80092e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ea:	f7fe fbf7 	bl	8007adc <xQueueGenericSend>
 80092ee:	6278      	str	r0, [r7, #36]	; 0x24
 80092f0:	e012      	b.n	8009318 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092f2:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <xTimerGenericCommand+0x98>)
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f107 0110 	add.w	r1, r7, #16
 80092fa:	2300      	movs	r3, #0
 80092fc:	2200      	movs	r2, #0
 80092fe:	f7fe fbed 	bl	8007adc <xQueueGenericSend>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24
 8009304:	e008      	b.n	8009318 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009306:	4b07      	ldr	r3, [pc, #28]	; (8009324 <xTimerGenericCommand+0x98>)
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f107 0110 	add.w	r1, r7, #16
 800930e:	2300      	movs	r3, #0
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f7fe fce1 	bl	8007cd8 <xQueueGenericSendFromISR>
 8009316:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800931a:	4618      	mov	r0, r3
 800931c:	3728      	adds	r7, #40	; 0x28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20008318 	.word	0x20008318

08009328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009332:	4b22      	ldr	r3, [pc, #136]	; (80093bc <prvProcessExpiredTimer+0x94>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	3304      	adds	r3, #4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fa63 	bl	800780c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d022      	beq.n	800939a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	699a      	ldr	r2, [r3, #24]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	18d1      	adds	r1, r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6978      	ldr	r0, [r7, #20]
 8009362:	f000 f8d1 	bl	8009508 <prvInsertTimerInActiveList>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01f      	beq.n	80093ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800936c:	2300      	movs	r3, #0
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	2300      	movs	r3, #0
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	2100      	movs	r1, #0
 8009376:	6978      	ldr	r0, [r7, #20]
 8009378:	f7ff ff88 	bl	800928c <xTimerGenericCommand>
 800937c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d113      	bne.n	80093ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	6978      	ldr	r0, [r7, #20]
 80093b2:	4798      	blx	r3
}
 80093b4:	bf00      	nop
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20008310 	.word	0x20008310

080093c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 f857 	bl	8009480 <prvGetNextExpireTime>
 80093d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	4619      	mov	r1, r3
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f803 	bl	80093e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093de:	f000 f8d5 	bl	800958c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093e2:	e7f1      	b.n	80093c8 <prvTimerTask+0x8>

080093e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093ee:	f7ff fa39 	bl	8008864 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f866 	bl	80094c8 <prvSampleTimeNow>
 80093fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d130      	bne.n	8009466 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	429a      	cmp	r2, r3
 8009410:	d806      	bhi.n	8009420 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009412:	f7ff fa35 	bl	8008880 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff85 	bl	8009328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800941e:	e024      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <prvProcessTimerOrBlockTask+0x90>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <prvProcessTimerOrBlockTask+0x50>
 8009430:	2301      	movs	r3, #1
 8009432:	e000      	b.n	8009436 <prvProcessTimerOrBlockTask+0x52>
 8009434:	2300      	movs	r3, #0
 8009436:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <prvProcessTimerOrBlockTask+0x94>)
 800943a:	6818      	ldr	r0, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	f7fe ff7d 	bl	8008344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800944a:	f7ff fa19 	bl	8008880 <xTaskResumeAll>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10a      	bne.n	800946a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <prvProcessTimerOrBlockTask+0x98>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
}
 8009464:	e001      	b.n	800946a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009466:	f7ff fa0b 	bl	8008880 <xTaskResumeAll>
}
 800946a:	bf00      	nop
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20008314 	.word	0x20008314
 8009478:	20008318 	.word	0x20008318
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009488:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <prvGetNextExpireTime+0x44>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <prvGetNextExpireTime+0x16>
 8009492:	2201      	movs	r2, #1
 8009494:	e000      	b.n	8009498 <prvGetNextExpireTime+0x18>
 8009496:	2200      	movs	r2, #0
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d105      	bne.n	80094b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <prvGetNextExpireTime+0x44>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	e001      	b.n	80094b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094b4:	68fb      	ldr	r3, [r7, #12]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20008310 	.word	0x20008310

080094c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094d0:	f7ff fa74 	bl	80089bc <xTaskGetTickCount>
 80094d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094d6:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d205      	bcs.n	80094ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094e0:	f000 f936 	bl	8009750 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e002      	b.n	80094f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094f2:	4a04      	ldr	r2, [pc, #16]	; (8009504 <prvSampleTimeNow+0x3c>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094f8:	68fb      	ldr	r3, [r7, #12]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20008320 	.word	0x20008320

08009508 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d812      	bhi.n	8009554 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e01b      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <prvInsertTimerInActiveList+0x7c>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe f924 	bl	800779a <vListInsert>
 8009552:	e012      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d206      	bcs.n	800956a <prvInsertTimerInActiveList+0x62>
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e007      	b.n	800957a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvInsertTimerInActiveList+0x80>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7fe f910 	bl	800779a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800957a:	697b      	ldr	r3, [r7, #20]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20008314 	.word	0x20008314
 8009588:	20008310 	.word	0x20008310

0800958c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08e      	sub	sp, #56	; 0x38
 8009590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009592:	e0ca      	b.n	800972a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	da18      	bge.n	80095cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800959a:	1d3b      	adds	r3, r7, #4
 800959c:	3304      	adds	r3, #4
 800959e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	61fb      	str	r3, [r7, #28]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c2:	6850      	ldr	r0, [r2, #4]
 80095c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095c6:	6892      	ldr	r2, [r2, #8]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f2c0 80ab 	blt.w	800972a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d004      	beq.n	80095ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe f911 	bl	800780c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095ea:	463b      	mov	r3, r7
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff ff6b 	bl	80094c8 <prvSampleTimeNow>
 80095f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	f200 8096 	bhi.w	8009728 <prvProcessReceivedCommands+0x19c>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <prvProcessReceivedCommands+0x78>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	0800962d 	.word	0x0800962d
 8009608:	0800962d 	.word	0x0800962d
 800960c:	0800962d 	.word	0x0800962d
 8009610:	080096a1 	.word	0x080096a1
 8009614:	080096b5 	.word	0x080096b5
 8009618:	080096ff 	.word	0x080096ff
 800961c:	0800962d 	.word	0x0800962d
 8009620:	0800962d 	.word	0x0800962d
 8009624:	080096a1 	.word	0x080096a1
 8009628:	080096b5 	.word	0x080096b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	18d1      	adds	r1, r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800964a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800964c:	f7ff ff5c 	bl	8009508 <prvInsertTimerInActiveList>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d069      	beq.n	800972a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b00      	cmp	r3, #0
 800966a:	d05e      	beq.n	800972a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	441a      	add	r2, r3
 8009674:	2300      	movs	r3, #0
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	2300      	movs	r3, #0
 800967a:	2100      	movs	r1, #0
 800967c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967e:	f7ff fe05 	bl	800928c <xTimerGenericCommand>
 8009682:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d14f      	bne.n	800972a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	61bb      	str	r3, [r7, #24]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096b2:	e03a      	b.n	800972a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	617b      	str	r3, [r7, #20]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	699a      	ldr	r2, [r3, #24]
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	18d1      	adds	r1, r2, r3
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f8:	f7ff ff06 	bl	8009508 <prvInsertTimerInActiveList>
					break;
 80096fc:	e015      	b.n	800972a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d103      	bne.n	8009714 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800970c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800970e:	f000 fbdf 	bl	8009ed0 <vPortFree>
 8009712:	e00a      	b.n	800972a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009726:	e000      	b.n	800972a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009728:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972a:	4b08      	ldr	r3, [pc, #32]	; (800974c <prvProcessReceivedCommands+0x1c0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	1d39      	adds	r1, r7, #4
 8009730:	2200      	movs	r2, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fb6c 	bl	8007e10 <xQueueReceive>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	f47f af2a 	bne.w	8009594 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	3730      	adds	r7, #48	; 0x30
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20008318 	.word	0x20008318

08009750 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009756:	e048      	b.n	80097ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009758:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <prvSwitchTimerLists+0xc0>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009762:	4b2b      	ldr	r3, [pc, #172]	; (8009810 <prvSwitchTimerLists+0xc0>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3304      	adds	r3, #4
 8009770:	4618      	mov	r0, r3
 8009772:	f7fe f84b 	bl	800780c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d02e      	beq.n	80097ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	4413      	add	r3, r2
 8009794:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	429a      	cmp	r2, r3
 800979c:	d90e      	bls.n	80097bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3304      	adds	r3, #4
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fd fff0 	bl	800779a <vListInsert>
 80097ba:	e016      	b.n	80097ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097bc:	2300      	movs	r3, #0
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2300      	movs	r3, #0
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	2100      	movs	r1, #0
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f7ff fd60 	bl	800928c <xTimerGenericCommand>
 80097cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	603b      	str	r3, [r7, #0]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1b1      	bne.n	8009758 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <prvSwitchTimerLists+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097fa:	4b06      	ldr	r3, [pc, #24]	; (8009814 <prvSwitchTimerLists+0xc4>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a04      	ldr	r2, [pc, #16]	; (8009810 <prvSwitchTimerLists+0xc0>)
 8009800:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009802:	4a04      	ldr	r2, [pc, #16]	; (8009814 <prvSwitchTimerLists+0xc4>)
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	6013      	str	r3, [r2, #0]
}
 8009808:	bf00      	nop
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20008310 	.word	0x20008310
 8009814:	20008314 	.word	0x20008314

08009818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800981e:	f000 f969 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d120      	bne.n	800986c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800982a:	4814      	ldr	r0, [pc, #80]	; (800987c <prvCheckForValidListAndQueue+0x64>)
 800982c:	f7fd ff64 	bl	80076f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009830:	4813      	ldr	r0, [pc, #76]	; (8009880 <prvCheckForValidListAndQueue+0x68>)
 8009832:	f7fd ff61 	bl	80076f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <prvCheckForValidListAndQueue+0x6c>)
 8009838:	4a10      	ldr	r2, [pc, #64]	; (800987c <prvCheckForValidListAndQueue+0x64>)
 800983a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800983c:	4b12      	ldr	r3, [pc, #72]	; (8009888 <prvCheckForValidListAndQueue+0x70>)
 800983e:	4a10      	ldr	r2, [pc, #64]	; (8009880 <prvCheckForValidListAndQueue+0x68>)
 8009840:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009842:	2300      	movs	r3, #0
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <prvCheckForValidListAndQueue+0x74>)
 8009848:	4a11      	ldr	r2, [pc, #68]	; (8009890 <prvCheckForValidListAndQueue+0x78>)
 800984a:	2110      	movs	r1, #16
 800984c:	200a      	movs	r0, #10
 800984e:	f7fe f86f 	bl	8007930 <xQueueGenericCreateStatic>
 8009852:	4603      	mov	r3, r0
 8009854:	4a08      	ldr	r2, [pc, #32]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009856:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009858:	4b07      	ldr	r3, [pc, #28]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <prvCheckForValidListAndQueue+0x60>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	490b      	ldr	r1, [pc, #44]	; (8009894 <prvCheckForValidListAndQueue+0x7c>)
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe fd42 	bl	80082f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800986c:	f000 f972 	bl	8009b54 <vPortExitCritical>
}
 8009870:	bf00      	nop
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20008318 	.word	0x20008318
 800987c:	200082e8 	.word	0x200082e8
 8009880:	200082fc 	.word	0x200082fc
 8009884:	20008310 	.word	0x20008310
 8009888:	20008314 	.word	0x20008314
 800988c:	200083c4 	.word	0x200083c4
 8009890:	20008324 	.word	0x20008324
 8009894:	0800d14c 	.word	0x0800d14c

08009898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f023 0201 	bic.w	r2, r3, #1
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b04      	subs	r3, #4
 80098c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098c8:	4a0c      	ldr	r2, [pc, #48]	; (80098fc <pxPortInitialiseStack+0x64>)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3b14      	subs	r3, #20
 80098d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3b04      	subs	r3, #4
 80098de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f06f 0202 	mvn.w	r2, #2
 80098e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3b20      	subs	r3, #32
 80098ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098ee:	68fb      	ldr	r3, [r7, #12]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	08009901 	.word	0x08009901

08009900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <prvTaskExitError+0x54>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d00a      	beq.n	800992a <prvTaskExitError+0x2a>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	60fb      	str	r3, [r7, #12]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <prvTaskExitError+0x28>
	__asm volatile
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	60bb      	str	r3, [r7, #8]
}
 800993c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800993e:	bf00      	nop
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d0fc      	beq.n	8009940 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	20000098 	.word	0x20000098
	...

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	20007de8 	.word	0x20007de8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009abc:	f7ff f848 	bl	8008b50 <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff1e 	bl	8009900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	20008414 	.word	0x20008414
 8009ae4:	20008418 	.word	0x20008418
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	20000098 	.word	0x20000098
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000098 	.word	0x20000098
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
}
 8009b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000098 	.word	0x20000098
	...

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f7fe ffb6 	bl	8008b50 <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	20007de8 	.word	0x20007de8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f7fe fed3 	bl	80089dc <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	20000010 	.word	0x20000010
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	20008414 	.word	0x20008414
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	20008418 	.word	0x20008418

08009d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d44:	f7fe fd8e 	bl	8008864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d48:	4b5b      	ldr	r3, [pc, #364]	; (8009eb8 <pvPortMalloc+0x180>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d50:	f000 f920 	bl	8009f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d54:	4b59      	ldr	r3, [pc, #356]	; (8009ebc <pvPortMalloc+0x184>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8093 	bne.w	8009e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d68:	2208      	movs	r2, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d014      	beq.n	8009da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <pvPortMalloc+0x6c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	617b      	str	r3, [r7, #20]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06e      	beq.n	8009e88 <pvPortMalloc+0x150>
 8009daa:	4b45      	ldr	r3, [pc, #276]	; (8009ec0 <pvPortMalloc+0x188>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d869      	bhi.n	8009e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dbe:	e004      	b.n	8009dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <pvPortMalloc+0xa4>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f1      	bne.n	8009dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ddc:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <pvPortMalloc+0x180>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d050      	beq.n	8009e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2208      	movs	r2, #8
 8009dec:	4413      	add	r3, r2
 8009dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	2308      	movs	r3, #8
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d91f      	bls.n	8009e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <pvPortMalloc+0xf8>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	613b      	str	r3, [r7, #16]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e42:	69b8      	ldr	r0, [r7, #24]
 8009e44:	f000 f908 	bl	800a058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e56:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d203      	bcs.n	8009e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e62:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <pvPortMalloc+0x184>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <pvPortMalloc+0x194>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <pvPortMalloc+0x194>)
 8009e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e88:	f7fe fcfa 	bl	8008880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <pvPortMalloc+0x174>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60fb      	str	r3, [r7, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <pvPortMalloc+0x172>
	return pvReturn;
 8009eac:	69fb      	ldr	r3, [r7, #28]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000e5cc 	.word	0x2000e5cc
 8009ebc:	2000e5e0 	.word	0x2000e5e0
 8009ec0:	2000e5d0 	.word	0x2000e5d0
 8009ec4:	2000e5c4 	.word	0x2000e5c4
 8009ec8:	2000e5d4 	.word	0x2000e5d4
 8009ecc:	2000e5d8 	.word	0x2000e5d8

08009ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04d      	beq.n	8009f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <vPortFree+0xb8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <vPortFree+0x44>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60fb      	str	r3, [r7, #12]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <vPortFree+0x62>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60bb      	str	r3, [r7, #8]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <vPortFree+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <vPortFree+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe fc84 	bl	8008864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <vPortFree+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <vPortFree+0xbc>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f874 	bl	800a058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <vPortFree+0xc0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <vPortFree+0xc0>)
 8009f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f7a:	f7fe fc81 	bl	8008880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f7e:	bf00      	nop
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2000e5e0 	.word	0x2000e5e0
 8009f8c:	2000e5d0 	.word	0x2000e5d0
 8009f90:	2000e5dc 	.word	0x2000e5dc

08009f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f9a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8009f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <prvHeapInit+0xac>)
 8009fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvHeapInit+0xac>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <prvHeapInit+0xb0>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <prvHeapInit+0xb0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <prvHeapInit+0xb4>)
 8009ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <prvHeapInit+0xb4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvHeapInit+0xb4>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <prvHeapInit+0xb8>)
 800a022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvHeapInit+0xbc>)
 800a02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvHeapInit+0xc0>)
 800a02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	2000841c 	.word	0x2000841c
 800a044:	2000e5c4 	.word	0x2000e5c4
 800a048:	2000e5cc 	.word	0x2000e5cc
 800a04c:	2000e5d4 	.word	0x2000e5d4
 800a050:	2000e5d0 	.word	0x2000e5d0
 800a054:	2000e5e0 	.word	0x2000e5e0

0800a058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <prvInsertBlockIntoFreeList+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e002      	b.n	800a06c <prvInsertBlockIntoFreeList+0x14>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8f7      	bhi.n	800a066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d108      	bne.n	800a09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d118      	bne.n	800a0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d00d      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	2000e5c4 	.word	0x2000e5c4
 800a108:	2000e5cc 	.word	0x2000e5cc

0800a10c <__cvt>:
 800a10c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	ec55 4b10 	vmov	r4, r5, d0
 800a114:	2d00      	cmp	r5, #0
 800a116:	460e      	mov	r6, r1
 800a118:	4619      	mov	r1, r3
 800a11a:	462b      	mov	r3, r5
 800a11c:	bfbb      	ittet	lt
 800a11e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a122:	461d      	movlt	r5, r3
 800a124:	2300      	movge	r3, #0
 800a126:	232d      	movlt	r3, #45	; 0x2d
 800a128:	700b      	strb	r3, [r1, #0]
 800a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a12c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a130:	4691      	mov	r9, r2
 800a132:	f023 0820 	bic.w	r8, r3, #32
 800a136:	bfbc      	itt	lt
 800a138:	4622      	movlt	r2, r4
 800a13a:	4614      	movlt	r4, r2
 800a13c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a140:	d005      	beq.n	800a14e <__cvt+0x42>
 800a142:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a146:	d100      	bne.n	800a14a <__cvt+0x3e>
 800a148:	3601      	adds	r6, #1
 800a14a:	2102      	movs	r1, #2
 800a14c:	e000      	b.n	800a150 <__cvt+0x44>
 800a14e:	2103      	movs	r1, #3
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	ab02      	add	r3, sp, #8
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	ec45 4b10 	vmov	d0, r4, r5
 800a15c:	4653      	mov	r3, sl
 800a15e:	4632      	mov	r2, r6
 800a160:	f000 ffee 	bl	800b140 <_dtoa_r>
 800a164:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a168:	4607      	mov	r7, r0
 800a16a:	d102      	bne.n	800a172 <__cvt+0x66>
 800a16c:	f019 0f01 	tst.w	r9, #1
 800a170:	d022      	beq.n	800a1b8 <__cvt+0xac>
 800a172:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a176:	eb07 0906 	add.w	r9, r7, r6
 800a17a:	d110      	bne.n	800a19e <__cvt+0x92>
 800a17c:	783b      	ldrb	r3, [r7, #0]
 800a17e:	2b30      	cmp	r3, #48	; 0x30
 800a180:	d10a      	bne.n	800a198 <__cvt+0x8c>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800a18e:	b918      	cbnz	r0, 800a198 <__cvt+0x8c>
 800a190:	f1c6 0601 	rsb	r6, r6, #1
 800a194:	f8ca 6000 	str.w	r6, [sl]
 800a198:	f8da 3000 	ldr.w	r3, [sl]
 800a19c:	4499      	add	r9, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 fc9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1aa:	b108      	cbz	r0, 800a1b0 <__cvt+0xa4>
 800a1ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b0:	2230      	movs	r2, #48	; 0x30
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	454b      	cmp	r3, r9
 800a1b6:	d307      	bcc.n	800a1c8 <__cvt+0xbc>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1bc:	1bdb      	subs	r3, r3, r7
 800a1be:	4638      	mov	r0, r7
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	b004      	add	sp, #16
 800a1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	e7f0      	b.n	800a1b2 <__cvt+0xa6>

0800a1d0 <__exponent>:
 800a1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	bfb8      	it	lt
 800a1d8:	4249      	neglt	r1, r1
 800a1da:	f803 2b02 	strb.w	r2, [r3], #2
 800a1de:	bfb4      	ite	lt
 800a1e0:	222d      	movlt	r2, #45	; 0x2d
 800a1e2:	222b      	movge	r2, #43	; 0x2b
 800a1e4:	2909      	cmp	r1, #9
 800a1e6:	7042      	strb	r2, [r0, #1]
 800a1e8:	dd2a      	ble.n	800a240 <__exponent+0x70>
 800a1ea:	f10d 0207 	add.w	r2, sp, #7
 800a1ee:	4617      	mov	r7, r2
 800a1f0:	260a      	movs	r6, #10
 800a1f2:	4694      	mov	ip, r2
 800a1f4:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1f8:	fb06 1415 	mls	r4, r6, r5, r1
 800a1fc:	3430      	adds	r4, #48	; 0x30
 800a1fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a202:	460c      	mov	r4, r1
 800a204:	2c63      	cmp	r4, #99	; 0x63
 800a206:	f102 32ff 	add.w	r2, r2, #4294967295
 800a20a:	4629      	mov	r1, r5
 800a20c:	dcf1      	bgt.n	800a1f2 <__exponent+0x22>
 800a20e:	3130      	adds	r1, #48	; 0x30
 800a210:	f1ac 0402 	sub.w	r4, ip, #2
 800a214:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a218:	1c41      	adds	r1, r0, #1
 800a21a:	4622      	mov	r2, r4
 800a21c:	42ba      	cmp	r2, r7
 800a21e:	d30a      	bcc.n	800a236 <__exponent+0x66>
 800a220:	f10d 0209 	add.w	r2, sp, #9
 800a224:	eba2 020c 	sub.w	r2, r2, ip
 800a228:	42bc      	cmp	r4, r7
 800a22a:	bf88      	it	hi
 800a22c:	2200      	movhi	r2, #0
 800a22e:	4413      	add	r3, r2
 800a230:	1a18      	subs	r0, r3, r0
 800a232:	b003      	add	sp, #12
 800a234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a236:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a23a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a23e:	e7ed      	b.n	800a21c <__exponent+0x4c>
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	3130      	adds	r1, #48	; 0x30
 800a244:	7083      	strb	r3, [r0, #2]
 800a246:	70c1      	strb	r1, [r0, #3]
 800a248:	1d03      	adds	r3, r0, #4
 800a24a:	e7f1      	b.n	800a230 <__exponent+0x60>

0800a24c <_printf_float>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	ed2d 8b02 	vpush	{d8}
 800a254:	b08d      	sub	sp, #52	; 0x34
 800a256:	460c      	mov	r4, r1
 800a258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a25c:	4616      	mov	r6, r2
 800a25e:	461f      	mov	r7, r3
 800a260:	4605      	mov	r5, r0
 800a262:	f000 fe01 	bl	800ae68 <_localeconv_r>
 800a266:	f8d0 a000 	ldr.w	sl, [r0]
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f6 f810 	bl	8000290 <strlen>
 800a270:	2300      	movs	r3, #0
 800a272:	930a      	str	r3, [sp, #40]	; 0x28
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	9305      	str	r3, [sp, #20]
 800a278:	f8d8 3000 	ldr.w	r3, [r8]
 800a27c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a280:	3307      	adds	r3, #7
 800a282:	f023 0307 	bic.w	r3, r3, #7
 800a286:	f103 0208 	add.w	r2, r3, #8
 800a28a:	f8c8 2000 	str.w	r2, [r8]
 800a28e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f8cd 8018 	str.w	r8, [sp, #24]
 800a29c:	ee08 0a10 	vmov	s16, r0
 800a2a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a2a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2a8:	4b9e      	ldr	r3, [pc, #632]	; (800a524 <_printf_float+0x2d8>)
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	f7f6 fc4d 	bl	8000b4c <__aeabi_dcmpun>
 800a2b2:	bb88      	cbnz	r0, 800a318 <_printf_float+0xcc>
 800a2b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b8:	4b9a      	ldr	r3, [pc, #616]	; (800a524 <_printf_float+0x2d8>)
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	f7f6 fc27 	bl	8000b10 <__aeabi_dcmple>
 800a2c2:	bb48      	cbnz	r0, 800a318 <_printf_float+0xcc>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	f7f6 fc16 	bl	8000afc <__aeabi_dcmplt>
 800a2d0:	b110      	cbz	r0, 800a2d8 <_printf_float+0x8c>
 800a2d2:	232d      	movs	r3, #45	; 0x2d
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d8:	4a93      	ldr	r2, [pc, #588]	; (800a528 <_printf_float+0x2dc>)
 800a2da:	4b94      	ldr	r3, [pc, #592]	; (800a52c <_printf_float+0x2e0>)
 800a2dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2e0:	bf94      	ite	ls
 800a2e2:	4690      	movls	r8, r2
 800a2e4:	4698      	movhi	r8, r3
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	6123      	str	r3, [r4, #16]
 800a2ea:	9b05      	ldr	r3, [sp, #20]
 800a2ec:	f023 0304 	bic.w	r3, r3, #4
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	9700      	str	r7, [sp, #0]
 800a2f8:	4633      	mov	r3, r6
 800a2fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 f9da 	bl	800a6b8 <_printf_common>
 800a304:	3001      	adds	r0, #1
 800a306:	f040 8090 	bne.w	800a42a <_printf_float+0x1de>
 800a30a:	f04f 30ff 	mov.w	r0, #4294967295
 800a30e:	b00d      	add	sp, #52	; 0x34
 800a310:	ecbd 8b02 	vpop	{d8}
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	4642      	mov	r2, r8
 800a31a:	464b      	mov	r3, r9
 800a31c:	4640      	mov	r0, r8
 800a31e:	4649      	mov	r1, r9
 800a320:	f7f6 fc14 	bl	8000b4c <__aeabi_dcmpun>
 800a324:	b140      	cbz	r0, 800a338 <_printf_float+0xec>
 800a326:	464b      	mov	r3, r9
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfbc      	itt	lt
 800a32c:	232d      	movlt	r3, #45	; 0x2d
 800a32e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a332:	4a7f      	ldr	r2, [pc, #508]	; (800a530 <_printf_float+0x2e4>)
 800a334:	4b7f      	ldr	r3, [pc, #508]	; (800a534 <_printf_float+0x2e8>)
 800a336:	e7d1      	b.n	800a2dc <_printf_float+0x90>
 800a338:	6863      	ldr	r3, [r4, #4]
 800a33a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a33e:	9206      	str	r2, [sp, #24]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	d13f      	bne.n	800a3c4 <_printf_float+0x178>
 800a344:	2306      	movs	r3, #6
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	6861      	ldr	r1, [r4, #4]
 800a34c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a350:	2300      	movs	r3, #0
 800a352:	9303      	str	r3, [sp, #12]
 800a354:	ab0a      	add	r3, sp, #40	; 0x28
 800a356:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a35a:	ab09      	add	r3, sp, #36	; 0x24
 800a35c:	ec49 8b10 	vmov	d0, r8, r9
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a368:	4628      	mov	r0, r5
 800a36a:	f7ff fecf 	bl	800a10c <__cvt>
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a372:	2b47      	cmp	r3, #71	; 0x47
 800a374:	4680      	mov	r8, r0
 800a376:	d108      	bne.n	800a38a <_printf_float+0x13e>
 800a378:	1cc8      	adds	r0, r1, #3
 800a37a:	db02      	blt.n	800a382 <_printf_float+0x136>
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	4299      	cmp	r1, r3
 800a380:	dd41      	ble.n	800a406 <_printf_float+0x1ba>
 800a382:	f1ab 0302 	sub.w	r3, fp, #2
 800a386:	fa5f fb83 	uxtb.w	fp, r3
 800a38a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a38e:	d820      	bhi.n	800a3d2 <_printf_float+0x186>
 800a390:	3901      	subs	r1, #1
 800a392:	465a      	mov	r2, fp
 800a394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a398:	9109      	str	r1, [sp, #36]	; 0x24
 800a39a:	f7ff ff19 	bl	800a1d0 <__exponent>
 800a39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a0:	1813      	adds	r3, r2, r0
 800a3a2:	2a01      	cmp	r2, #1
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	dc02      	bgt.n	800a3b0 <_printf_float+0x164>
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	07d2      	lsls	r2, r2, #31
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_float+0x168>
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d09c      	beq.n	800a2f6 <_printf_float+0xaa>
 800a3bc:	232d      	movs	r3, #45	; 0x2d
 800a3be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c2:	e798      	b.n	800a2f6 <_printf_float+0xaa>
 800a3c4:	9a06      	ldr	r2, [sp, #24]
 800a3c6:	2a47      	cmp	r2, #71	; 0x47
 800a3c8:	d1be      	bne.n	800a348 <_printf_float+0xfc>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1bc      	bne.n	800a348 <_printf_float+0xfc>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7b9      	b.n	800a346 <_printf_float+0xfa>
 800a3d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3d6:	d118      	bne.n	800a40a <_printf_float+0x1be>
 800a3d8:	2900      	cmp	r1, #0
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	dd0b      	ble.n	800a3f6 <_printf_float+0x1aa>
 800a3de:	6121      	str	r1, [r4, #16]
 800a3e0:	b913      	cbnz	r3, 800a3e8 <_printf_float+0x19c>
 800a3e2:	6822      	ldr	r2, [r4, #0]
 800a3e4:	07d0      	lsls	r0, r2, #31
 800a3e6:	d502      	bpl.n	800a3ee <_printf_float+0x1a2>
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	440b      	add	r3, r1
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3f0:	f04f 0900 	mov.w	r9, #0
 800a3f4:	e7de      	b.n	800a3b4 <_printf_float+0x168>
 800a3f6:	b913      	cbnz	r3, 800a3fe <_printf_float+0x1b2>
 800a3f8:	6822      	ldr	r2, [r4, #0]
 800a3fa:	07d2      	lsls	r2, r2, #31
 800a3fc:	d501      	bpl.n	800a402 <_printf_float+0x1b6>
 800a3fe:	3302      	adds	r3, #2
 800a400:	e7f4      	b.n	800a3ec <_printf_float+0x1a0>
 800a402:	2301      	movs	r3, #1
 800a404:	e7f2      	b.n	800a3ec <_printf_float+0x1a0>
 800a406:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a40c:	4299      	cmp	r1, r3
 800a40e:	db05      	blt.n	800a41c <_printf_float+0x1d0>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	6121      	str	r1, [r4, #16]
 800a414:	07d8      	lsls	r0, r3, #31
 800a416:	d5ea      	bpl.n	800a3ee <_printf_float+0x1a2>
 800a418:	1c4b      	adds	r3, r1, #1
 800a41a:	e7e7      	b.n	800a3ec <_printf_float+0x1a0>
 800a41c:	2900      	cmp	r1, #0
 800a41e:	bfd4      	ite	le
 800a420:	f1c1 0202 	rsble	r2, r1, #2
 800a424:	2201      	movgt	r2, #1
 800a426:	4413      	add	r3, r2
 800a428:	e7e0      	b.n	800a3ec <_printf_float+0x1a0>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	055a      	lsls	r2, r3, #21
 800a42e:	d407      	bmi.n	800a440 <_printf_float+0x1f4>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	4642      	mov	r2, r8
 800a434:	4631      	mov	r1, r6
 800a436:	4628      	mov	r0, r5
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	d12c      	bne.n	800a498 <_printf_float+0x24c>
 800a43e:	e764      	b.n	800a30a <_printf_float+0xbe>
 800a440:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a444:	f240 80e0 	bls.w	800a608 <_printf_float+0x3bc>
 800a448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a44c:	2200      	movs	r2, #0
 800a44e:	2300      	movs	r3, #0
 800a450:	f7f6 fb4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800a454:	2800      	cmp	r0, #0
 800a456:	d034      	beq.n	800a4c2 <_printf_float+0x276>
 800a458:	4a37      	ldr	r2, [pc, #220]	; (800a538 <_printf_float+0x2ec>)
 800a45a:	2301      	movs	r3, #1
 800a45c:	4631      	mov	r1, r6
 800a45e:	4628      	mov	r0, r5
 800a460:	47b8      	blx	r7
 800a462:	3001      	adds	r0, #1
 800a464:	f43f af51 	beq.w	800a30a <_printf_float+0xbe>
 800a468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a46c:	429a      	cmp	r2, r3
 800a46e:	db02      	blt.n	800a476 <_printf_float+0x22a>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	07d8      	lsls	r0, r3, #31
 800a474:	d510      	bpl.n	800a498 <_printf_float+0x24c>
 800a476:	ee18 3a10 	vmov	r3, s16
 800a47a:	4652      	mov	r2, sl
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	47b8      	blx	r7
 800a482:	3001      	adds	r0, #1
 800a484:	f43f af41 	beq.w	800a30a <_printf_float+0xbe>
 800a488:	f04f 0800 	mov.w	r8, #0
 800a48c:	f104 091a 	add.w	r9, r4, #26
 800a490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a492:	3b01      	subs	r3, #1
 800a494:	4543      	cmp	r3, r8
 800a496:	dc09      	bgt.n	800a4ac <_printf_float+0x260>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	079b      	lsls	r3, r3, #30
 800a49c:	f100 8107 	bmi.w	800a6ae <_printf_float+0x462>
 800a4a0:	68e0      	ldr	r0, [r4, #12]
 800a4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a4:	4298      	cmp	r0, r3
 800a4a6:	bfb8      	it	lt
 800a4a8:	4618      	movlt	r0, r3
 800a4aa:	e730      	b.n	800a30e <_printf_float+0xc2>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	464a      	mov	r2, r9
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f af27 	beq.w	800a30a <_printf_float+0xbe>
 800a4bc:	f108 0801 	add.w	r8, r8, #1
 800a4c0:	e7e6      	b.n	800a490 <_printf_float+0x244>
 800a4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dc39      	bgt.n	800a53c <_printf_float+0x2f0>
 800a4c8:	4a1b      	ldr	r2, [pc, #108]	; (800a538 <_printf_float+0x2ec>)
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af19 	beq.w	800a30a <_printf_float+0xbe>
 800a4d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	d102      	bne.n	800a4e6 <_printf_float+0x29a>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	07d9      	lsls	r1, r3, #31
 800a4e4:	d5d8      	bpl.n	800a498 <_printf_float+0x24c>
 800a4e6:	ee18 3a10 	vmov	r3, s16
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f af09 	beq.w	800a30a <_printf_float+0xbe>
 800a4f8:	f04f 0900 	mov.w	r9, #0
 800a4fc:	f104 0a1a 	add.w	sl, r4, #26
 800a500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a502:	425b      	negs	r3, r3
 800a504:	454b      	cmp	r3, r9
 800a506:	dc01      	bgt.n	800a50c <_printf_float+0x2c0>
 800a508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a50a:	e792      	b.n	800a432 <_printf_float+0x1e6>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4652      	mov	r2, sl
 800a510:	4631      	mov	r1, r6
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f aef7 	beq.w	800a30a <_printf_float+0xbe>
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e7ee      	b.n	800a500 <_printf_float+0x2b4>
 800a522:	bf00      	nop
 800a524:	7fefffff 	.word	0x7fefffff
 800a528:	0800d244 	.word	0x0800d244
 800a52c:	0800d248 	.word	0x0800d248
 800a530:	0800d24c 	.word	0x0800d24c
 800a534:	0800d250 	.word	0x0800d250
 800a538:	0800d254 	.word	0x0800d254
 800a53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a53e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a540:	429a      	cmp	r2, r3
 800a542:	bfa8      	it	ge
 800a544:	461a      	movge	r2, r3
 800a546:	2a00      	cmp	r2, #0
 800a548:	4691      	mov	r9, r2
 800a54a:	dc37      	bgt.n	800a5bc <_printf_float+0x370>
 800a54c:	f04f 0b00 	mov.w	fp, #0
 800a550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a554:	f104 021a 	add.w	r2, r4, #26
 800a558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55a:	9305      	str	r3, [sp, #20]
 800a55c:	eba3 0309 	sub.w	r3, r3, r9
 800a560:	455b      	cmp	r3, fp
 800a562:	dc33      	bgt.n	800a5cc <_printf_float+0x380>
 800a564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a568:	429a      	cmp	r2, r3
 800a56a:	db3b      	blt.n	800a5e4 <_printf_float+0x398>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	07da      	lsls	r2, r3, #31
 800a570:	d438      	bmi.n	800a5e4 <_printf_float+0x398>
 800a572:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a576:	eba2 0903 	sub.w	r9, r2, r3
 800a57a:	9b05      	ldr	r3, [sp, #20]
 800a57c:	1ad2      	subs	r2, r2, r3
 800a57e:	4591      	cmp	r9, r2
 800a580:	bfa8      	it	ge
 800a582:	4691      	movge	r9, r2
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	dc35      	bgt.n	800a5f6 <_printf_float+0x3aa>
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a592:	f104 0a1a 	add.w	sl, r4, #26
 800a596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	eba3 0309 	sub.w	r3, r3, r9
 800a5a0:	4543      	cmp	r3, r8
 800a5a2:	f77f af79 	ble.w	800a498 <_printf_float+0x24c>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4652      	mov	r2, sl
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	47b8      	blx	r7
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f43f aeaa 	beq.w	800a30a <_printf_float+0xbe>
 800a5b6:	f108 0801 	add.w	r8, r8, #1
 800a5ba:	e7ec      	b.n	800a596 <_printf_float+0x34a>
 800a5bc:	4613      	mov	r3, r2
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d1c0      	bne.n	800a54c <_printf_float+0x300>
 800a5ca:	e69e      	b.n	800a30a <_printf_float+0xbe>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4631      	mov	r1, r6
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	9205      	str	r2, [sp, #20]
 800a5d4:	47b8      	blx	r7
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	f43f ae97 	beq.w	800a30a <_printf_float+0xbe>
 800a5dc:	9a05      	ldr	r2, [sp, #20]
 800a5de:	f10b 0b01 	add.w	fp, fp, #1
 800a5e2:	e7b9      	b.n	800a558 <_printf_float+0x30c>
 800a5e4:	ee18 3a10 	vmov	r3, s16
 800a5e8:	4652      	mov	r2, sl
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d1be      	bne.n	800a572 <_printf_float+0x326>
 800a5f4:	e689      	b.n	800a30a <_printf_float+0xbe>
 800a5f6:	9a05      	ldr	r2, [sp, #20]
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	4442      	add	r2, r8
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	d1c1      	bne.n	800a58a <_printf_float+0x33e>
 800a606:	e680      	b.n	800a30a <_printf_float+0xbe>
 800a608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60a:	2a01      	cmp	r2, #1
 800a60c:	dc01      	bgt.n	800a612 <_printf_float+0x3c6>
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d53a      	bpl.n	800a688 <_printf_float+0x43c>
 800a612:	2301      	movs	r3, #1
 800a614:	4642      	mov	r2, r8
 800a616:	4631      	mov	r1, r6
 800a618:	4628      	mov	r0, r5
 800a61a:	47b8      	blx	r7
 800a61c:	3001      	adds	r0, #1
 800a61e:	f43f ae74 	beq.w	800a30a <_printf_float+0xbe>
 800a622:	ee18 3a10 	vmov	r3, s16
 800a626:	4652      	mov	r2, sl
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f ae6b 	beq.w	800a30a <_printf_float+0xbe>
 800a634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a638:	2200      	movs	r2, #0
 800a63a:	2300      	movs	r3, #0
 800a63c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a640:	f7f6 fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 800a644:	b9d8      	cbnz	r0, 800a67e <_printf_float+0x432>
 800a646:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a64a:	f108 0201 	add.w	r2, r8, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10e      	bne.n	800a676 <_printf_float+0x42a>
 800a658:	e657      	b.n	800a30a <_printf_float+0xbe>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae50 	beq.w	800a30a <_printf_float+0xbe>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	3b01      	subs	r3, #1
 800a672:	4543      	cmp	r3, r8
 800a674:	dcf1      	bgt.n	800a65a <_printf_float+0x40e>
 800a676:	464b      	mov	r3, r9
 800a678:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a67c:	e6da      	b.n	800a434 <_printf_float+0x1e8>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e7f2      	b.n	800a66e <_printf_float+0x422>
 800a688:	2301      	movs	r3, #1
 800a68a:	4642      	mov	r2, r8
 800a68c:	e7df      	b.n	800a64e <_printf_float+0x402>
 800a68e:	2301      	movs	r3, #1
 800a690:	464a      	mov	r2, r9
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f ae36 	beq.w	800a30a <_printf_float+0xbe>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6a6:	1a5b      	subs	r3, r3, r1
 800a6a8:	4543      	cmp	r3, r8
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x442>
 800a6ac:	e6f8      	b.n	800a4a0 <_printf_float+0x254>
 800a6ae:	f04f 0800 	mov.w	r8, #0
 800a6b2:	f104 0919 	add.w	r9, r4, #25
 800a6b6:	e7f4      	b.n	800a6a2 <_printf_float+0x456>

0800a6b8 <_printf_common>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4616      	mov	r6, r2
 800a6be:	4699      	mov	r9, r3
 800a6c0:	688a      	ldr	r2, [r1, #8]
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	bfb8      	it	lt
 800a6cc:	4613      	movlt	r3, r2
 800a6ce:	6033      	str	r3, [r6, #0]
 800a6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b10a      	cbz	r2, 800a6de <_printf_common+0x26>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6033      	str	r3, [r6, #0]
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	0699      	lsls	r1, r3, #26
 800a6e2:	bf42      	ittt	mi
 800a6e4:	6833      	ldrmi	r3, [r6, #0]
 800a6e6:	3302      	addmi	r3, #2
 800a6e8:	6033      	strmi	r3, [r6, #0]
 800a6ea:	6825      	ldr	r5, [r4, #0]
 800a6ec:	f015 0506 	ands.w	r5, r5, #6
 800a6f0:	d106      	bne.n	800a700 <_printf_common+0x48>
 800a6f2:	f104 0a19 	add.w	sl, r4, #25
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	6832      	ldr	r2, [r6, #0]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	42ab      	cmp	r3, r5
 800a6fe:	dc26      	bgt.n	800a74e <_printf_common+0x96>
 800a700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a704:	1e13      	subs	r3, r2, #0
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	bf18      	it	ne
 800a70a:	2301      	movne	r3, #1
 800a70c:	0692      	lsls	r2, r2, #26
 800a70e:	d42b      	bmi.n	800a768 <_printf_common+0xb0>
 800a710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a714:	4649      	mov	r1, r9
 800a716:	4638      	mov	r0, r7
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d01e      	beq.n	800a75c <_printf_common+0xa4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	f003 0306 	and.w	r3, r3, #6
 800a726:	2b04      	cmp	r3, #4
 800a728:	bf02      	ittt	eq
 800a72a:	68e5      	ldreq	r5, [r4, #12]
 800a72c:	6833      	ldreq	r3, [r6, #0]
 800a72e:	1aed      	subeq	r5, r5, r3
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	bf0c      	ite	eq
 800a734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a738:	2500      	movne	r5, #0
 800a73a:	4293      	cmp	r3, r2
 800a73c:	bfc4      	itt	gt
 800a73e:	1a9b      	subgt	r3, r3, r2
 800a740:	18ed      	addgt	r5, r5, r3
 800a742:	2600      	movs	r6, #0
 800a744:	341a      	adds	r4, #26
 800a746:	42b5      	cmp	r5, r6
 800a748:	d11a      	bne.n	800a780 <_printf_common+0xc8>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e008      	b.n	800a760 <_printf_common+0xa8>
 800a74e:	2301      	movs	r3, #1
 800a750:	4652      	mov	r2, sl
 800a752:	4649      	mov	r1, r9
 800a754:	4638      	mov	r0, r7
 800a756:	47c0      	blx	r8
 800a758:	3001      	adds	r0, #1
 800a75a:	d103      	bne.n	800a764 <_printf_common+0xac>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	3501      	adds	r5, #1
 800a766:	e7c6      	b.n	800a6f6 <_printf_common+0x3e>
 800a768:	18e1      	adds	r1, r4, r3
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	2030      	movs	r0, #48	; 0x30
 800a76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a772:	4422      	add	r2, r4
 800a774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a77c:	3302      	adds	r3, #2
 800a77e:	e7c7      	b.n	800a710 <_printf_common+0x58>
 800a780:	2301      	movs	r3, #1
 800a782:	4622      	mov	r2, r4
 800a784:	4649      	mov	r1, r9
 800a786:	4638      	mov	r0, r7
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d0e6      	beq.n	800a75c <_printf_common+0xa4>
 800a78e:	3601      	adds	r6, #1
 800a790:	e7d9      	b.n	800a746 <_printf_common+0x8e>
	...

0800a794 <_printf_i>:
 800a794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	7e0f      	ldrb	r7, [r1, #24]
 800a79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a79c:	2f78      	cmp	r7, #120	; 0x78
 800a79e:	4691      	mov	r9, r2
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	469a      	mov	sl, r3
 800a7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7aa:	d807      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ac:	2f62      	cmp	r7, #98	; 0x62
 800a7ae:	d80a      	bhi.n	800a7c6 <_printf_i+0x32>
 800a7b0:	2f00      	cmp	r7, #0
 800a7b2:	f000 80d4 	beq.w	800a95e <_printf_i+0x1ca>
 800a7b6:	2f58      	cmp	r7, #88	; 0x58
 800a7b8:	f000 80c0 	beq.w	800a93c <_printf_i+0x1a8>
 800a7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c4:	e03a      	b.n	800a83c <_printf_i+0xa8>
 800a7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ca:	2b15      	cmp	r3, #21
 800a7cc:	d8f6      	bhi.n	800a7bc <_printf_i+0x28>
 800a7ce:	a101      	add	r1, pc, #4	; (adr r1, 800a7d4 <_printf_i+0x40>)
 800a7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d4:	0800a82d 	.word	0x0800a82d
 800a7d8:	0800a841 	.word	0x0800a841
 800a7dc:	0800a7bd 	.word	0x0800a7bd
 800a7e0:	0800a7bd 	.word	0x0800a7bd
 800a7e4:	0800a7bd 	.word	0x0800a7bd
 800a7e8:	0800a7bd 	.word	0x0800a7bd
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a7bd 	.word	0x0800a7bd
 800a7f4:	0800a7bd 	.word	0x0800a7bd
 800a7f8:	0800a7bd 	.word	0x0800a7bd
 800a7fc:	0800a7bd 	.word	0x0800a7bd
 800a800:	0800a945 	.word	0x0800a945
 800a804:	0800a86d 	.word	0x0800a86d
 800a808:	0800a8ff 	.word	0x0800a8ff
 800a80c:	0800a7bd 	.word	0x0800a7bd
 800a810:	0800a7bd 	.word	0x0800a7bd
 800a814:	0800a967 	.word	0x0800a967
 800a818:	0800a7bd 	.word	0x0800a7bd
 800a81c:	0800a86d 	.word	0x0800a86d
 800a820:	0800a7bd 	.word	0x0800a7bd
 800a824:	0800a7bd 	.word	0x0800a7bd
 800a828:	0800a907 	.word	0x0800a907
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	1d1a      	adds	r2, r3, #4
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	602a      	str	r2, [r5, #0]
 800a834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a83c:	2301      	movs	r3, #1
 800a83e:	e09f      	b.n	800a980 <_printf_i+0x1ec>
 800a840:	6820      	ldr	r0, [r4, #0]
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	0607      	lsls	r7, r0, #24
 800a846:	f103 0104 	add.w	r1, r3, #4
 800a84a:	6029      	str	r1, [r5, #0]
 800a84c:	d501      	bpl.n	800a852 <_printf_i+0xbe>
 800a84e:	681e      	ldr	r6, [r3, #0]
 800a850:	e003      	b.n	800a85a <_printf_i+0xc6>
 800a852:	0646      	lsls	r6, r0, #25
 800a854:	d5fb      	bpl.n	800a84e <_printf_i+0xba>
 800a856:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a85a:	2e00      	cmp	r6, #0
 800a85c:	da03      	bge.n	800a866 <_printf_i+0xd2>
 800a85e:	232d      	movs	r3, #45	; 0x2d
 800a860:	4276      	negs	r6, r6
 800a862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a866:	485a      	ldr	r0, [pc, #360]	; (800a9d0 <_printf_i+0x23c>)
 800a868:	230a      	movs	r3, #10
 800a86a:	e012      	b.n	800a892 <_printf_i+0xfe>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	6820      	ldr	r0, [r4, #0]
 800a870:	1d19      	adds	r1, r3, #4
 800a872:	6029      	str	r1, [r5, #0]
 800a874:	0605      	lsls	r5, r0, #24
 800a876:	d501      	bpl.n	800a87c <_printf_i+0xe8>
 800a878:	681e      	ldr	r6, [r3, #0]
 800a87a:	e002      	b.n	800a882 <_printf_i+0xee>
 800a87c:	0641      	lsls	r1, r0, #25
 800a87e:	d5fb      	bpl.n	800a878 <_printf_i+0xe4>
 800a880:	881e      	ldrh	r6, [r3, #0]
 800a882:	4853      	ldr	r0, [pc, #332]	; (800a9d0 <_printf_i+0x23c>)
 800a884:	2f6f      	cmp	r7, #111	; 0x6f
 800a886:	bf0c      	ite	eq
 800a888:	2308      	moveq	r3, #8
 800a88a:	230a      	movne	r3, #10
 800a88c:	2100      	movs	r1, #0
 800a88e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a892:	6865      	ldr	r5, [r4, #4]
 800a894:	60a5      	str	r5, [r4, #8]
 800a896:	2d00      	cmp	r5, #0
 800a898:	bfa2      	ittt	ge
 800a89a:	6821      	ldrge	r1, [r4, #0]
 800a89c:	f021 0104 	bicge.w	r1, r1, #4
 800a8a0:	6021      	strge	r1, [r4, #0]
 800a8a2:	b90e      	cbnz	r6, 800a8a8 <_printf_i+0x114>
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	d04b      	beq.n	800a940 <_printf_i+0x1ac>
 800a8a8:	4615      	mov	r5, r2
 800a8aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b2:	5dc7      	ldrb	r7, [r0, r7]
 800a8b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8b8:	4637      	mov	r7, r6
 800a8ba:	42bb      	cmp	r3, r7
 800a8bc:	460e      	mov	r6, r1
 800a8be:	d9f4      	bls.n	800a8aa <_printf_i+0x116>
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d10b      	bne.n	800a8dc <_printf_i+0x148>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	07de      	lsls	r6, r3, #31
 800a8c8:	d508      	bpl.n	800a8dc <_printf_i+0x148>
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	6861      	ldr	r1, [r4, #4]
 800a8ce:	4299      	cmp	r1, r3
 800a8d0:	bfde      	ittt	le
 800a8d2:	2330      	movle	r3, #48	; 0x30
 800a8d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8dc:	1b52      	subs	r2, r2, r5
 800a8de:	6122      	str	r2, [r4, #16]
 800a8e0:	f8cd a000 	str.w	sl, [sp]
 800a8e4:	464b      	mov	r3, r9
 800a8e6:	aa03      	add	r2, sp, #12
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	f7ff fee4 	bl	800a6b8 <_printf_common>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d14a      	bne.n	800a98a <_printf_i+0x1f6>
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	b004      	add	sp, #16
 800a8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	f043 0320 	orr.w	r3, r3, #32
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	4833      	ldr	r0, [pc, #204]	; (800a9d4 <_printf_i+0x240>)
 800a908:	2778      	movs	r7, #120	; 0x78
 800a90a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	6829      	ldr	r1, [r5, #0]
 800a912:	061f      	lsls	r7, r3, #24
 800a914:	f851 6b04 	ldr.w	r6, [r1], #4
 800a918:	d402      	bmi.n	800a920 <_printf_i+0x18c>
 800a91a:	065f      	lsls	r7, r3, #25
 800a91c:	bf48      	it	mi
 800a91e:	b2b6      	uxthmi	r6, r6
 800a920:	07df      	lsls	r7, r3, #31
 800a922:	bf48      	it	mi
 800a924:	f043 0320 	orrmi.w	r3, r3, #32
 800a928:	6029      	str	r1, [r5, #0]
 800a92a:	bf48      	it	mi
 800a92c:	6023      	strmi	r3, [r4, #0]
 800a92e:	b91e      	cbnz	r6, 800a938 <_printf_i+0x1a4>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	f023 0320 	bic.w	r3, r3, #32
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	2310      	movs	r3, #16
 800a93a:	e7a7      	b.n	800a88c <_printf_i+0xf8>
 800a93c:	4824      	ldr	r0, [pc, #144]	; (800a9d0 <_printf_i+0x23c>)
 800a93e:	e7e4      	b.n	800a90a <_printf_i+0x176>
 800a940:	4615      	mov	r5, r2
 800a942:	e7bd      	b.n	800a8c0 <_printf_i+0x12c>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	6826      	ldr	r6, [r4, #0]
 800a948:	6961      	ldr	r1, [r4, #20]
 800a94a:	1d18      	adds	r0, r3, #4
 800a94c:	6028      	str	r0, [r5, #0]
 800a94e:	0635      	lsls	r5, r6, #24
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	d501      	bpl.n	800a958 <_printf_i+0x1c4>
 800a954:	6019      	str	r1, [r3, #0]
 800a956:	e002      	b.n	800a95e <_printf_i+0x1ca>
 800a958:	0670      	lsls	r0, r6, #25
 800a95a:	d5fb      	bpl.n	800a954 <_printf_i+0x1c0>
 800a95c:	8019      	strh	r1, [r3, #0]
 800a95e:	2300      	movs	r3, #0
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	4615      	mov	r5, r2
 800a964:	e7bc      	b.n	800a8e0 <_printf_i+0x14c>
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	1d1a      	adds	r2, r3, #4
 800a96a:	602a      	str	r2, [r5, #0]
 800a96c:	681d      	ldr	r5, [r3, #0]
 800a96e:	6862      	ldr	r2, [r4, #4]
 800a970:	2100      	movs	r1, #0
 800a972:	4628      	mov	r0, r5
 800a974:	f7f5 fc3c 	bl	80001f0 <memchr>
 800a978:	b108      	cbz	r0, 800a97e <_printf_i+0x1ea>
 800a97a:	1b40      	subs	r0, r0, r5
 800a97c:	6060      	str	r0, [r4, #4]
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	2300      	movs	r3, #0
 800a984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a988:	e7aa      	b.n	800a8e0 <_printf_i+0x14c>
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	462a      	mov	r2, r5
 800a98e:	4649      	mov	r1, r9
 800a990:	4640      	mov	r0, r8
 800a992:	47d0      	blx	sl
 800a994:	3001      	adds	r0, #1
 800a996:	d0ad      	beq.n	800a8f4 <_printf_i+0x160>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	079b      	lsls	r3, r3, #30
 800a99c:	d413      	bmi.n	800a9c6 <_printf_i+0x232>
 800a99e:	68e0      	ldr	r0, [r4, #12]
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	4298      	cmp	r0, r3
 800a9a4:	bfb8      	it	lt
 800a9a6:	4618      	movlt	r0, r3
 800a9a8:	e7a6      	b.n	800a8f8 <_printf_i+0x164>
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	47d0      	blx	sl
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d09d      	beq.n	800a8f4 <_printf_i+0x160>
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	68e3      	ldr	r3, [r4, #12]
 800a9bc:	9903      	ldr	r1, [sp, #12]
 800a9be:	1a5b      	subs	r3, r3, r1
 800a9c0:	42ab      	cmp	r3, r5
 800a9c2:	dcf2      	bgt.n	800a9aa <_printf_i+0x216>
 800a9c4:	e7eb      	b.n	800a99e <_printf_i+0x20a>
 800a9c6:	2500      	movs	r5, #0
 800a9c8:	f104 0619 	add.w	r6, r4, #25
 800a9cc:	e7f5      	b.n	800a9ba <_printf_i+0x226>
 800a9ce:	bf00      	nop
 800a9d0:	0800d256 	.word	0x0800d256
 800a9d4:	0800d267 	.word	0x0800d267

0800a9d8 <std>:
 800a9d8:	2300      	movs	r3, #0
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	4604      	mov	r4, r0
 800a9de:	e9c0 3300 	strd	r3, r3, [r0]
 800a9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9e6:	6083      	str	r3, [r0, #8]
 800a9e8:	8181      	strh	r1, [r0, #12]
 800a9ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a9ec:	81c2      	strh	r2, [r0, #14]
 800a9ee:	6183      	str	r3, [r0, #24]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	2208      	movs	r2, #8
 800a9f4:	305c      	adds	r0, #92	; 0x5c
 800a9f6:	f000 fa19 	bl	800ae2c <memset>
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <std+0x38>)
 800a9fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a9fe:	4b05      	ldr	r3, [pc, #20]	; (800aa14 <std+0x3c>)
 800aa00:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <std+0x40>)
 800aa04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <std+0x44>)
 800aa08:	6224      	str	r4, [r4, #32]
 800aa0a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa0c:	bd10      	pop	{r4, pc}
 800aa0e:	bf00      	nop
 800aa10:	0800ac7d 	.word	0x0800ac7d
 800aa14:	0800ac9f 	.word	0x0800ac9f
 800aa18:	0800acd7 	.word	0x0800acd7
 800aa1c:	0800acfb 	.word	0x0800acfb

0800aa20 <stdio_exit_handler>:
 800aa20:	4a02      	ldr	r2, [pc, #8]	; (800aa2c <stdio_exit_handler+0xc>)
 800aa22:	4903      	ldr	r1, [pc, #12]	; (800aa30 <stdio_exit_handler+0x10>)
 800aa24:	4803      	ldr	r0, [pc, #12]	; (800aa34 <stdio_exit_handler+0x14>)
 800aa26:	f000 b869 	b.w	800aafc <_fwalk_sglue>
 800aa2a:	bf00      	nop
 800aa2c:	2000009c 	.word	0x2000009c
 800aa30:	0800cc61 	.word	0x0800cc61
 800aa34:	200000a8 	.word	0x200000a8

0800aa38 <cleanup_stdio>:
 800aa38:	6841      	ldr	r1, [r0, #4]
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <cleanup_stdio+0x34>)
 800aa3c:	4299      	cmp	r1, r3
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	4604      	mov	r4, r0
 800aa42:	d001      	beq.n	800aa48 <cleanup_stdio+0x10>
 800aa44:	f002 f90c 	bl	800cc60 <_fflush_r>
 800aa48:	68a1      	ldr	r1, [r4, #8]
 800aa4a:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <cleanup_stdio+0x38>)
 800aa4c:	4299      	cmp	r1, r3
 800aa4e:	d002      	beq.n	800aa56 <cleanup_stdio+0x1e>
 800aa50:	4620      	mov	r0, r4
 800aa52:	f002 f905 	bl	800cc60 <_fflush_r>
 800aa56:	68e1      	ldr	r1, [r4, #12]
 800aa58:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <cleanup_stdio+0x3c>)
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d004      	beq.n	800aa68 <cleanup_stdio+0x30>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa64:	f002 b8fc 	b.w	800cc60 <_fflush_r>
 800aa68:	bd10      	pop	{r4, pc}
 800aa6a:	bf00      	nop
 800aa6c:	2000e5e4 	.word	0x2000e5e4
 800aa70:	2000e64c 	.word	0x2000e64c
 800aa74:	2000e6b4 	.word	0x2000e6b4

0800aa78 <global_stdio_init.part.0>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	4b0b      	ldr	r3, [pc, #44]	; (800aaa8 <global_stdio_init.part.0+0x30>)
 800aa7c:	4c0b      	ldr	r4, [pc, #44]	; (800aaac <global_stdio_init.part.0+0x34>)
 800aa7e:	4a0c      	ldr	r2, [pc, #48]	; (800aab0 <global_stdio_init.part.0+0x38>)
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	4620      	mov	r0, r4
 800aa84:	2200      	movs	r2, #0
 800aa86:	2104      	movs	r1, #4
 800aa88:	f7ff ffa6 	bl	800a9d8 <std>
 800aa8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa90:	2201      	movs	r2, #1
 800aa92:	2109      	movs	r1, #9
 800aa94:	f7ff ffa0 	bl	800a9d8 <std>
 800aa98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaa2:	2112      	movs	r1, #18
 800aaa4:	f7ff bf98 	b.w	800a9d8 <std>
 800aaa8:	2000e71c 	.word	0x2000e71c
 800aaac:	2000e5e4 	.word	0x2000e5e4
 800aab0:	0800aa21 	.word	0x0800aa21

0800aab4 <__sfp_lock_acquire>:
 800aab4:	4801      	ldr	r0, [pc, #4]	; (800aabc <__sfp_lock_acquire+0x8>)
 800aab6:	f000 baa1 	b.w	800affc <__retarget_lock_acquire_recursive>
 800aaba:	bf00      	nop
 800aabc:	2000e725 	.word	0x2000e725

0800aac0 <__sfp_lock_release>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__sfp_lock_release+0x8>)
 800aac2:	f000 ba9c 	b.w	800affe <__retarget_lock_release_recursive>
 800aac6:	bf00      	nop
 800aac8:	2000e725 	.word	0x2000e725

0800aacc <__sinit>:
 800aacc:	b510      	push	{r4, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	f7ff fff0 	bl	800aab4 <__sfp_lock_acquire>
 800aad4:	6a23      	ldr	r3, [r4, #32]
 800aad6:	b11b      	cbz	r3, 800aae0 <__sinit+0x14>
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f7ff bff0 	b.w	800aac0 <__sfp_lock_release>
 800aae0:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <__sinit+0x28>)
 800aae2:	6223      	str	r3, [r4, #32]
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <__sinit+0x2c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1f5      	bne.n	800aad8 <__sinit+0xc>
 800aaec:	f7ff ffc4 	bl	800aa78 <global_stdio_init.part.0>
 800aaf0:	e7f2      	b.n	800aad8 <__sinit+0xc>
 800aaf2:	bf00      	nop
 800aaf4:	0800aa39 	.word	0x0800aa39
 800aaf8:	2000e71c 	.word	0x2000e71c

0800aafc <_fwalk_sglue>:
 800aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	4607      	mov	r7, r0
 800ab02:	4688      	mov	r8, r1
 800ab04:	4614      	mov	r4, r2
 800ab06:	2600      	movs	r6, #0
 800ab08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ab10:	d505      	bpl.n	800ab1e <_fwalk_sglue+0x22>
 800ab12:	6824      	ldr	r4, [r4, #0]
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	d1f7      	bne.n	800ab08 <_fwalk_sglue+0xc>
 800ab18:	4630      	mov	r0, r6
 800ab1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d907      	bls.n	800ab34 <_fwalk_sglue+0x38>
 800ab24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	d003      	beq.n	800ab34 <_fwalk_sglue+0x38>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4638      	mov	r0, r7
 800ab30:	47c0      	blx	r8
 800ab32:	4306      	orrs	r6, r0
 800ab34:	3568      	adds	r5, #104	; 0x68
 800ab36:	e7e9      	b.n	800ab0c <_fwalk_sglue+0x10>

0800ab38 <iprintf>:
 800ab38:	b40f      	push	{r0, r1, r2, r3}
 800ab3a:	b507      	push	{r0, r1, r2, lr}
 800ab3c:	4906      	ldr	r1, [pc, #24]	; (800ab58 <iprintf+0x20>)
 800ab3e:	ab04      	add	r3, sp, #16
 800ab40:	6808      	ldr	r0, [r1, #0]
 800ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab46:	6881      	ldr	r1, [r0, #8]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	f001 fee9 	bl	800c920 <_vfiprintf_r>
 800ab4e:	b003      	add	sp, #12
 800ab50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab54:	b004      	add	sp, #16
 800ab56:	4770      	bx	lr
 800ab58:	200000f4 	.word	0x200000f4

0800ab5c <_puts_r>:
 800ab5c:	6a03      	ldr	r3, [r0, #32]
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	6884      	ldr	r4, [r0, #8]
 800ab62:	4605      	mov	r5, r0
 800ab64:	460e      	mov	r6, r1
 800ab66:	b90b      	cbnz	r3, 800ab6c <_puts_r+0x10>
 800ab68:	f7ff ffb0 	bl	800aacc <__sinit>
 800ab6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab6e:	07db      	lsls	r3, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_puts_r+0x22>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	0598      	lsls	r0, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_puts_r+0x22>
 800ab78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7a:	f000 fa3f 	bl	800affc <__retarget_lock_acquire_recursive>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	0719      	lsls	r1, r3, #28
 800ab82:	d513      	bpl.n	800abac <_puts_r+0x50>
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	b18b      	cbz	r3, 800abac <_puts_r+0x50>
 800ab88:	3e01      	subs	r6, #1
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab90:	3b01      	subs	r3, #1
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	b9e9      	cbnz	r1, 800abd2 <_puts_r+0x76>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da2e      	bge.n	800abf8 <_puts_r+0x9c>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	210a      	movs	r1, #10
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f000 f8af 	bl	800ad02 <__swbuf_r>
 800aba4:	3001      	adds	r0, #1
 800aba6:	d007      	beq.n	800abb8 <_puts_r+0x5c>
 800aba8:	250a      	movs	r5, #10
 800abaa:	e007      	b.n	800abbc <_puts_r+0x60>
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 f8e4 	bl	800ad7c <__swsetup_r>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d0e7      	beq.n	800ab88 <_puts_r+0x2c>
 800abb8:	f04f 35ff 	mov.w	r5, #4294967295
 800abbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abbe:	07da      	lsls	r2, r3, #31
 800abc0:	d405      	bmi.n	800abce <_puts_r+0x72>
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	059b      	lsls	r3, r3, #22
 800abc6:	d402      	bmi.n	800abce <_puts_r+0x72>
 800abc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abca:	f000 fa18 	bl	800affe <__retarget_lock_release_recursive>
 800abce:	4628      	mov	r0, r5
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da04      	bge.n	800abe0 <_puts_r+0x84>
 800abd6:	69a2      	ldr	r2, [r4, #24]
 800abd8:	429a      	cmp	r2, r3
 800abda:	dc06      	bgt.n	800abea <_puts_r+0x8e>
 800abdc:	290a      	cmp	r1, #10
 800abde:	d004      	beq.n	800abea <_puts_r+0x8e>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	6022      	str	r2, [r4, #0]
 800abe6:	7019      	strb	r1, [r3, #0]
 800abe8:	e7cf      	b.n	800ab8a <_puts_r+0x2e>
 800abea:	4622      	mov	r2, r4
 800abec:	4628      	mov	r0, r5
 800abee:	f000 f888 	bl	800ad02 <__swbuf_r>
 800abf2:	3001      	adds	r0, #1
 800abf4:	d1c9      	bne.n	800ab8a <_puts_r+0x2e>
 800abf6:	e7df      	b.n	800abb8 <_puts_r+0x5c>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	250a      	movs	r5, #10
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	701d      	strb	r5, [r3, #0]
 800ac02:	e7db      	b.n	800abbc <_puts_r+0x60>

0800ac04 <puts>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <puts+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f7ff bfa7 	b.w	800ab5c <_puts_r>
 800ac0e:	bf00      	nop
 800ac10:	200000f4 	.word	0x200000f4

0800ac14 <sniprintf>:
 800ac14:	b40c      	push	{r2, r3}
 800ac16:	b530      	push	{r4, r5, lr}
 800ac18:	4b17      	ldr	r3, [pc, #92]	; (800ac78 <sniprintf+0x64>)
 800ac1a:	1e0c      	subs	r4, r1, #0
 800ac1c:	681d      	ldr	r5, [r3, #0]
 800ac1e:	b09d      	sub	sp, #116	; 0x74
 800ac20:	da08      	bge.n	800ac34 <sniprintf+0x20>
 800ac22:	238b      	movs	r3, #139	; 0x8b
 800ac24:	602b      	str	r3, [r5, #0]
 800ac26:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2a:	b01d      	add	sp, #116	; 0x74
 800ac2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac30:	b002      	add	sp, #8
 800ac32:	4770      	bx	lr
 800ac34:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac3c:	bf14      	ite	ne
 800ac3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac42:	4623      	moveq	r3, r4
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	9307      	str	r3, [sp, #28]
 800ac48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac4c:	9002      	str	r0, [sp, #8]
 800ac4e:	9006      	str	r0, [sp, #24]
 800ac50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac56:	ab21      	add	r3, sp, #132	; 0x84
 800ac58:	a902      	add	r1, sp, #8
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	f001 fd37 	bl	800c6d0 <_svfiprintf_r>
 800ac62:	1c43      	adds	r3, r0, #1
 800ac64:	bfbc      	itt	lt
 800ac66:	238b      	movlt	r3, #139	; 0x8b
 800ac68:	602b      	strlt	r3, [r5, #0]
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	d0dd      	beq.n	800ac2a <sniprintf+0x16>
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	2200      	movs	r2, #0
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	e7d9      	b.n	800ac2a <sniprintf+0x16>
 800ac76:	bf00      	nop
 800ac78:	200000f4 	.word	0x200000f4

0800ac7c <__sread>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	460c      	mov	r4, r1
 800ac80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac84:	f000 f96c 	bl	800af60 <_read_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	bfab      	itete	ge
 800ac8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac90:	181b      	addge	r3, r3, r0
 800ac92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac96:	bfac      	ite	ge
 800ac98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac9a:	81a3      	strhlt	r3, [r4, #12]
 800ac9c:	bd10      	pop	{r4, pc}

0800ac9e <__swrite>:
 800ac9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca2:	461f      	mov	r7, r3
 800aca4:	898b      	ldrh	r3, [r1, #12]
 800aca6:	05db      	lsls	r3, r3, #23
 800aca8:	4605      	mov	r5, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	4616      	mov	r6, r2
 800acae:	d505      	bpl.n	800acbc <__swrite+0x1e>
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	2302      	movs	r3, #2
 800acb6:	2200      	movs	r2, #0
 800acb8:	f000 f940 	bl	800af3c <_lseek_r>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	4632      	mov	r2, r6
 800acca:	463b      	mov	r3, r7
 800accc:	4628      	mov	r0, r5
 800acce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	f000 b957 	b.w	800af84 <_write_r>

0800acd6 <__sseek>:
 800acd6:	b510      	push	{r4, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acde:	f000 f92d 	bl	800af3c <_lseek_r>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	bf15      	itete	ne
 800ace8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acf2:	81a3      	strheq	r3, [r4, #12]
 800acf4:	bf18      	it	ne
 800acf6:	81a3      	strhne	r3, [r4, #12]
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <__sclose>:
 800acfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfe:	f000 b8b7 	b.w	800ae70 <_close_r>

0800ad02 <__swbuf_r>:
 800ad02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad04:	460e      	mov	r6, r1
 800ad06:	4614      	mov	r4, r2
 800ad08:	4605      	mov	r5, r0
 800ad0a:	b118      	cbz	r0, 800ad14 <__swbuf_r+0x12>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <__swbuf_r+0x12>
 800ad10:	f7ff fedc 	bl	800aacc <__sinit>
 800ad14:	69a3      	ldr	r3, [r4, #24]
 800ad16:	60a3      	str	r3, [r4, #8]
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	071a      	lsls	r2, r3, #28
 800ad1c:	d525      	bpl.n	800ad6a <__swbuf_r+0x68>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	b31b      	cbz	r3, 800ad6a <__swbuf_r+0x68>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	6922      	ldr	r2, [r4, #16]
 800ad26:	1a98      	subs	r0, r3, r2
 800ad28:	6963      	ldr	r3, [r4, #20]
 800ad2a:	b2f6      	uxtb	r6, r6
 800ad2c:	4283      	cmp	r3, r0
 800ad2e:	4637      	mov	r7, r6
 800ad30:	dc04      	bgt.n	800ad3c <__swbuf_r+0x3a>
 800ad32:	4621      	mov	r1, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	f001 ff93 	bl	800cc60 <_fflush_r>
 800ad3a:	b9e0      	cbnz	r0, 800ad76 <__swbuf_r+0x74>
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	6022      	str	r2, [r4, #0]
 800ad48:	701e      	strb	r6, [r3, #0]
 800ad4a:	6962      	ldr	r2, [r4, #20]
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d004      	beq.n	800ad5c <__swbuf_r+0x5a>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	07db      	lsls	r3, r3, #31
 800ad56:	d506      	bpl.n	800ad66 <__swbuf_r+0x64>
 800ad58:	2e0a      	cmp	r6, #10
 800ad5a:	d104      	bne.n	800ad66 <__swbuf_r+0x64>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f001 ff7e 	bl	800cc60 <_fflush_r>
 800ad64:	b938      	cbnz	r0, 800ad76 <__swbuf_r+0x74>
 800ad66:	4638      	mov	r0, r7
 800ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	f000 f805 	bl	800ad7c <__swsetup_r>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d0d5      	beq.n	800ad22 <__swbuf_r+0x20>
 800ad76:	f04f 37ff 	mov.w	r7, #4294967295
 800ad7a:	e7f4      	b.n	800ad66 <__swbuf_r+0x64>

0800ad7c <__swsetup_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <__swsetup_r+0xac>)
 800ad80:	4605      	mov	r5, r0
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	460c      	mov	r4, r1
 800ad86:	b118      	cbz	r0, 800ad90 <__swsetup_r+0x14>
 800ad88:	6a03      	ldr	r3, [r0, #32]
 800ad8a:	b90b      	cbnz	r3, 800ad90 <__swsetup_r+0x14>
 800ad8c:	f7ff fe9e 	bl	800aacc <__sinit>
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad96:	0718      	lsls	r0, r3, #28
 800ad98:	d422      	bmi.n	800ade0 <__swsetup_r+0x64>
 800ad9a:	06d9      	lsls	r1, r3, #27
 800ad9c:	d407      	bmi.n	800adae <__swsetup_r+0x32>
 800ad9e:	2309      	movs	r3, #9
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e034      	b.n	800ae18 <__swsetup_r+0x9c>
 800adae:	0758      	lsls	r0, r3, #29
 800adb0:	d512      	bpl.n	800add8 <__swsetup_r+0x5c>
 800adb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb4:	b141      	cbz	r1, 800adc8 <__swsetup_r+0x4c>
 800adb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adba:	4299      	cmp	r1, r3
 800adbc:	d002      	beq.n	800adc4 <__swsetup_r+0x48>
 800adbe:	4628      	mov	r0, r5
 800adc0:	f000 ffb0 	bl	800bd24 <_free_r>
 800adc4:	2300      	movs	r3, #0
 800adc6:	6363      	str	r3, [r4, #52]	; 0x34
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	2300      	movs	r3, #0
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	f043 0308 	orr.w	r3, r3, #8
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	6923      	ldr	r3, [r4, #16]
 800ade2:	b94b      	cbnz	r3, 800adf8 <__swsetup_r+0x7c>
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adee:	d003      	beq.n	800adf8 <__swsetup_r+0x7c>
 800adf0:	4621      	mov	r1, r4
 800adf2:	4628      	mov	r0, r5
 800adf4:	f001 ff82 	bl	800ccfc <__smakebuf_r>
 800adf8:	89a0      	ldrh	r0, [r4, #12]
 800adfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adfe:	f010 0301 	ands.w	r3, r0, #1
 800ae02:	d00a      	beq.n	800ae1a <__swsetup_r+0x9e>
 800ae04:	2300      	movs	r3, #0
 800ae06:	60a3      	str	r3, [r4, #8]
 800ae08:	6963      	ldr	r3, [r4, #20]
 800ae0a:	425b      	negs	r3, r3
 800ae0c:	61a3      	str	r3, [r4, #24]
 800ae0e:	6923      	ldr	r3, [r4, #16]
 800ae10:	b943      	cbnz	r3, 800ae24 <__swsetup_r+0xa8>
 800ae12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae16:	d1c4      	bne.n	800ada2 <__swsetup_r+0x26>
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	0781      	lsls	r1, r0, #30
 800ae1c:	bf58      	it	pl
 800ae1e:	6963      	ldrpl	r3, [r4, #20]
 800ae20:	60a3      	str	r3, [r4, #8]
 800ae22:	e7f4      	b.n	800ae0e <__swsetup_r+0x92>
 800ae24:	2000      	movs	r0, #0
 800ae26:	e7f7      	b.n	800ae18 <__swsetup_r+0x9c>
 800ae28:	200000f4 	.word	0x200000f4

0800ae2c <memset>:
 800ae2c:	4402      	add	r2, r0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d100      	bne.n	800ae36 <memset+0xa>
 800ae34:	4770      	bx	lr
 800ae36:	f803 1b01 	strb.w	r1, [r3], #1
 800ae3a:	e7f9      	b.n	800ae30 <memset+0x4>

0800ae3c <strstr>:
 800ae3c:	780a      	ldrb	r2, [r1, #0]
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	b96a      	cbnz	r2, 800ae5e <strstr+0x22>
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d109      	bne.n	800ae5c <strstr+0x20>
 800ae48:	460c      	mov	r4, r1
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d0f6      	beq.n	800ae42 <strstr+0x6>
 800ae54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ae58:	429e      	cmp	r6, r3
 800ae5a:	d0f7      	beq.n	800ae4c <strstr+0x10>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	7803      	ldrb	r3, [r0, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1ef      	bne.n	800ae44 <strstr+0x8>
 800ae64:	4618      	mov	r0, r3
 800ae66:	e7ec      	b.n	800ae42 <strstr+0x6>

0800ae68 <_localeconv_r>:
 800ae68:	4800      	ldr	r0, [pc, #0]	; (800ae6c <_localeconv_r+0x4>)
 800ae6a:	4770      	bx	lr
 800ae6c:	200001e8 	.word	0x200001e8

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	; (800ae8c <_close_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 fcbf 	bl	80017fe <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	2000e720 	.word	0x2000e720

0800ae90 <_reclaim_reent>:
 800ae90:	4b29      	ldr	r3, [pc, #164]	; (800af38 <_reclaim_reent+0xa8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4283      	cmp	r3, r0
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	d04b      	beq.n	800af34 <_reclaim_reent+0xa4>
 800ae9c:	69c3      	ldr	r3, [r0, #28]
 800ae9e:	b143      	cbz	r3, 800aeb2 <_reclaim_reent+0x22>
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d144      	bne.n	800af30 <_reclaim_reent+0xa0>
 800aea6:	69e3      	ldr	r3, [r4, #28]
 800aea8:	6819      	ldr	r1, [r3, #0]
 800aeaa:	b111      	cbz	r1, 800aeb2 <_reclaim_reent+0x22>
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 ff39 	bl	800bd24 <_free_r>
 800aeb2:	6961      	ldr	r1, [r4, #20]
 800aeb4:	b111      	cbz	r1, 800aebc <_reclaim_reent+0x2c>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 ff34 	bl	800bd24 <_free_r>
 800aebc:	69e1      	ldr	r1, [r4, #28]
 800aebe:	b111      	cbz	r1, 800aec6 <_reclaim_reent+0x36>
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 ff2f 	bl	800bd24 <_free_r>
 800aec6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aec8:	b111      	cbz	r1, 800aed0 <_reclaim_reent+0x40>
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 ff2a 	bl	800bd24 <_free_r>
 800aed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aed2:	b111      	cbz	r1, 800aeda <_reclaim_reent+0x4a>
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 ff25 	bl	800bd24 <_free_r>
 800aeda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aedc:	b111      	cbz	r1, 800aee4 <_reclaim_reent+0x54>
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 ff20 	bl	800bd24 <_free_r>
 800aee4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aee6:	b111      	cbz	r1, 800aeee <_reclaim_reent+0x5e>
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 ff1b 	bl	800bd24 <_free_r>
 800aeee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aef0:	b111      	cbz	r1, 800aef8 <_reclaim_reent+0x68>
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ff16 	bl	800bd24 <_free_r>
 800aef8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aefa:	b111      	cbz	r1, 800af02 <_reclaim_reent+0x72>
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 ff11 	bl	800bd24 <_free_r>
 800af02:	6a23      	ldr	r3, [r4, #32]
 800af04:	b1b3      	cbz	r3, 800af34 <_reclaim_reent+0xa4>
 800af06:	4620      	mov	r0, r4
 800af08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af0c:	4718      	bx	r3
 800af0e:	5949      	ldr	r1, [r1, r5]
 800af10:	b941      	cbnz	r1, 800af24 <_reclaim_reent+0x94>
 800af12:	3504      	adds	r5, #4
 800af14:	69e3      	ldr	r3, [r4, #28]
 800af16:	2d80      	cmp	r5, #128	; 0x80
 800af18:	68d9      	ldr	r1, [r3, #12]
 800af1a:	d1f8      	bne.n	800af0e <_reclaim_reent+0x7e>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 ff01 	bl	800bd24 <_free_r>
 800af22:	e7c0      	b.n	800aea6 <_reclaim_reent+0x16>
 800af24:	680e      	ldr	r6, [r1, #0]
 800af26:	4620      	mov	r0, r4
 800af28:	f000 fefc 	bl	800bd24 <_free_r>
 800af2c:	4631      	mov	r1, r6
 800af2e:	e7ef      	b.n	800af10 <_reclaim_reent+0x80>
 800af30:	2500      	movs	r5, #0
 800af32:	e7ef      	b.n	800af14 <_reclaim_reent+0x84>
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	bf00      	nop
 800af38:	200000f4 	.word	0x200000f4

0800af3c <_lseek_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	; (800af5c <_lseek_r+0x20>)
 800af40:	4604      	mov	r4, r0
 800af42:	4608      	mov	r0, r1
 800af44:	4611      	mov	r1, r2
 800af46:	2200      	movs	r2, #0
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f7f6 fc7e 	bl	800184c <_lseek>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_lseek_r+0x1e>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_lseek_r+0x1e>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	2000e720 	.word	0x2000e720

0800af60 <_read_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_read_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f6 fc28 	bl	80017c4 <_read>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_read_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_read_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	2000e720 	.word	0x2000e720

0800af84 <_write_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	; (800afa4 <_write_r+0x20>)
 800af88:	4604      	mov	r4, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	602a      	str	r2, [r5, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f7 f85a 	bl	800204c <_write>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_write_r+0x1e>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_write_r+0x1e>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	2000e720 	.word	0x2000e720

0800afa8 <__errno>:
 800afa8:	4b01      	ldr	r3, [pc, #4]	; (800afb0 <__errno+0x8>)
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	200000f4 	.word	0x200000f4

0800afb4 <__libc_init_array>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4d0d      	ldr	r5, [pc, #52]	; (800afec <__libc_init_array+0x38>)
 800afb8:	4c0d      	ldr	r4, [pc, #52]	; (800aff0 <__libc_init_array+0x3c>)
 800afba:	1b64      	subs	r4, r4, r5
 800afbc:	10a4      	asrs	r4, r4, #2
 800afbe:	2600      	movs	r6, #0
 800afc0:	42a6      	cmp	r6, r4
 800afc2:	d109      	bne.n	800afd8 <__libc_init_array+0x24>
 800afc4:	4d0b      	ldr	r5, [pc, #44]	; (800aff4 <__libc_init_array+0x40>)
 800afc6:	4c0c      	ldr	r4, [pc, #48]	; (800aff8 <__libc_init_array+0x44>)
 800afc8:	f002 f808 	bl	800cfdc <_init>
 800afcc:	1b64      	subs	r4, r4, r5
 800afce:	10a4      	asrs	r4, r4, #2
 800afd0:	2600      	movs	r6, #0
 800afd2:	42a6      	cmp	r6, r4
 800afd4:	d105      	bne.n	800afe2 <__libc_init_array+0x2e>
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afdc:	4798      	blx	r3
 800afde:	3601      	adds	r6, #1
 800afe0:	e7ee      	b.n	800afc0 <__libc_init_array+0xc>
 800afe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe6:	4798      	blx	r3
 800afe8:	3601      	adds	r6, #1
 800afea:	e7f2      	b.n	800afd2 <__libc_init_array+0x1e>
 800afec:	0800d5bc 	.word	0x0800d5bc
 800aff0:	0800d5bc 	.word	0x0800d5bc
 800aff4:	0800d5bc 	.word	0x0800d5bc
 800aff8:	0800d5c0 	.word	0x0800d5c0

0800affc <__retarget_lock_acquire_recursive>:
 800affc:	4770      	bx	lr

0800affe <__retarget_lock_release_recursive>:
 800affe:	4770      	bx	lr

0800b000 <strcpy>:
 800b000:	4603      	mov	r3, r0
 800b002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b006:	f803 2b01 	strb.w	r2, [r3], #1
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	d1f9      	bne.n	800b002 <strcpy+0x2>
 800b00e:	4770      	bx	lr

0800b010 <memcpy>:
 800b010:	440a      	add	r2, r1
 800b012:	4291      	cmp	r1, r2
 800b014:	f100 33ff 	add.w	r3, r0, #4294967295
 800b018:	d100      	bne.n	800b01c <memcpy+0xc>
 800b01a:	4770      	bx	lr
 800b01c:	b510      	push	{r4, lr}
 800b01e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b022:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b026:	4291      	cmp	r1, r2
 800b028:	d1f9      	bne.n	800b01e <memcpy+0xe>
 800b02a:	bd10      	pop	{r4, pc}

0800b02c <quorem>:
 800b02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	6903      	ldr	r3, [r0, #16]
 800b032:	690c      	ldr	r4, [r1, #16]
 800b034:	42a3      	cmp	r3, r4
 800b036:	4607      	mov	r7, r0
 800b038:	db7e      	blt.n	800b138 <quorem+0x10c>
 800b03a:	3c01      	subs	r4, #1
 800b03c:	f101 0814 	add.w	r8, r1, #20
 800b040:	f100 0514 	add.w	r5, r0, #20
 800b044:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b048:	9301      	str	r3, [sp, #4]
 800b04a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b04e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b052:	3301      	adds	r3, #1
 800b054:	429a      	cmp	r2, r3
 800b056:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b05a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b05e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b062:	d331      	bcc.n	800b0c8 <quorem+0x9c>
 800b064:	f04f 0e00 	mov.w	lr, #0
 800b068:	4640      	mov	r0, r8
 800b06a:	46ac      	mov	ip, r5
 800b06c:	46f2      	mov	sl, lr
 800b06e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b072:	b293      	uxth	r3, r2
 800b074:	fb06 e303 	mla	r3, r6, r3, lr
 800b078:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b07c:	0c1a      	lsrs	r2, r3, #16
 800b07e:	b29b      	uxth	r3, r3
 800b080:	ebaa 0303 	sub.w	r3, sl, r3
 800b084:	f8dc a000 	ldr.w	sl, [ip]
 800b088:	fa13 f38a 	uxtah	r3, r3, sl
 800b08c:	fb06 220e 	mla	r2, r6, lr, r2
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	9b00      	ldr	r3, [sp, #0]
 800b094:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b098:	b292      	uxth	r2, r2
 800b09a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b09e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0a6:	4581      	cmp	r9, r0
 800b0a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ac:	f84c 3b04 	str.w	r3, [ip], #4
 800b0b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0b4:	d2db      	bcs.n	800b06e <quorem+0x42>
 800b0b6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0ba:	b92b      	cbnz	r3, 800b0c8 <quorem+0x9c>
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	3b04      	subs	r3, #4
 800b0c0:	429d      	cmp	r5, r3
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	d32c      	bcc.n	800b120 <quorem+0xf4>
 800b0c6:	613c      	str	r4, [r7, #16]
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f001 f9a7 	bl	800c41c <__mcmp>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	db22      	blt.n	800b118 <quorem+0xec>
 800b0d2:	3601      	adds	r6, #1
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0dc:	f8d1 c000 	ldr.w	ip, [r1]
 800b0e0:	b293      	uxth	r3, r2
 800b0e2:	1ac3      	subs	r3, r0, r3
 800b0e4:	0c12      	lsrs	r2, r2, #16
 800b0e6:	fa13 f38c 	uxtah	r3, r3, ip
 800b0ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b0ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f8:	45c1      	cmp	r9, r8
 800b0fa:	f841 3b04 	str.w	r3, [r1], #4
 800b0fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b102:	d2e9      	bcs.n	800b0d8 <quorem+0xac>
 800b104:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10c:	b922      	cbnz	r2, 800b118 <quorem+0xec>
 800b10e:	3b04      	subs	r3, #4
 800b110:	429d      	cmp	r5, r3
 800b112:	461a      	mov	r2, r3
 800b114:	d30a      	bcc.n	800b12c <quorem+0x100>
 800b116:	613c      	str	r4, [r7, #16]
 800b118:	4630      	mov	r0, r6
 800b11a:	b003      	add	sp, #12
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	6812      	ldr	r2, [r2, #0]
 800b122:	3b04      	subs	r3, #4
 800b124:	2a00      	cmp	r2, #0
 800b126:	d1ce      	bne.n	800b0c6 <quorem+0x9a>
 800b128:	3c01      	subs	r4, #1
 800b12a:	e7c9      	b.n	800b0c0 <quorem+0x94>
 800b12c:	6812      	ldr	r2, [r2, #0]
 800b12e:	3b04      	subs	r3, #4
 800b130:	2a00      	cmp	r2, #0
 800b132:	d1f0      	bne.n	800b116 <quorem+0xea>
 800b134:	3c01      	subs	r4, #1
 800b136:	e7eb      	b.n	800b110 <quorem+0xe4>
 800b138:	2000      	movs	r0, #0
 800b13a:	e7ee      	b.n	800b11a <quorem+0xee>
 800b13c:	0000      	movs	r0, r0
	...

0800b140 <_dtoa_r>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	ed2d 8b04 	vpush	{d8-d9}
 800b148:	69c5      	ldr	r5, [r0, #28]
 800b14a:	b093      	sub	sp, #76	; 0x4c
 800b14c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b150:	ec57 6b10 	vmov	r6, r7, d0
 800b154:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b158:	9107      	str	r1, [sp, #28]
 800b15a:	4604      	mov	r4, r0
 800b15c:	920a      	str	r2, [sp, #40]	; 0x28
 800b15e:	930d      	str	r3, [sp, #52]	; 0x34
 800b160:	b975      	cbnz	r5, 800b180 <_dtoa_r+0x40>
 800b162:	2010      	movs	r0, #16
 800b164:	f000 fe2a 	bl	800bdbc <malloc>
 800b168:	4602      	mov	r2, r0
 800b16a:	61e0      	str	r0, [r4, #28]
 800b16c:	b920      	cbnz	r0, 800b178 <_dtoa_r+0x38>
 800b16e:	4bae      	ldr	r3, [pc, #696]	; (800b428 <_dtoa_r+0x2e8>)
 800b170:	21ef      	movs	r1, #239	; 0xef
 800b172:	48ae      	ldr	r0, [pc, #696]	; (800b42c <_dtoa_r+0x2ec>)
 800b174:	f001 fe4a 	bl	800ce0c <__assert_func>
 800b178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b17c:	6005      	str	r5, [r0, #0]
 800b17e:	60c5      	str	r5, [r0, #12]
 800b180:	69e3      	ldr	r3, [r4, #28]
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	b151      	cbz	r1, 800b19c <_dtoa_r+0x5c>
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	604a      	str	r2, [r1, #4]
 800b18a:	2301      	movs	r3, #1
 800b18c:	4093      	lsls	r3, r2
 800b18e:	608b      	str	r3, [r1, #8]
 800b190:	4620      	mov	r0, r4
 800b192:	f000 ff07 	bl	800bfa4 <_Bfree>
 800b196:	69e3      	ldr	r3, [r4, #28]
 800b198:	2200      	movs	r2, #0
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	1e3b      	subs	r3, r7, #0
 800b19e:	bfbb      	ittet	lt
 800b1a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1a4:	9303      	strlt	r3, [sp, #12]
 800b1a6:	2300      	movge	r3, #0
 800b1a8:	2201      	movlt	r2, #1
 800b1aa:	bfac      	ite	ge
 800b1ac:	f8c8 3000 	strge.w	r3, [r8]
 800b1b0:	f8c8 2000 	strlt.w	r2, [r8]
 800b1b4:	4b9e      	ldr	r3, [pc, #632]	; (800b430 <_dtoa_r+0x2f0>)
 800b1b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b1ba:	ea33 0308 	bics.w	r3, r3, r8
 800b1be:	d11b      	bne.n	800b1f8 <_dtoa_r+0xb8>
 800b1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1c6:	6013      	str	r3, [r2, #0]
 800b1c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b1cc:	4333      	orrs	r3, r6
 800b1ce:	f000 8593 	beq.w	800bcf8 <_dtoa_r+0xbb8>
 800b1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1d4:	b963      	cbnz	r3, 800b1f0 <_dtoa_r+0xb0>
 800b1d6:	4b97      	ldr	r3, [pc, #604]	; (800b434 <_dtoa_r+0x2f4>)
 800b1d8:	e027      	b.n	800b22a <_dtoa_r+0xea>
 800b1da:	4b97      	ldr	r3, [pc, #604]	; (800b438 <_dtoa_r+0x2f8>)
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	3308      	adds	r3, #8
 800b1e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	9800      	ldr	r0, [sp, #0]
 800b1e6:	b013      	add	sp, #76	; 0x4c
 800b1e8:	ecbd 8b04 	vpop	{d8-d9}
 800b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f0:	4b90      	ldr	r3, [pc, #576]	; (800b434 <_dtoa_r+0x2f4>)
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	3303      	adds	r3, #3
 800b1f6:	e7f3      	b.n	800b1e0 <_dtoa_r+0xa0>
 800b1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	ec51 0b17 	vmov	r0, r1, d7
 800b202:	eeb0 8a47 	vmov.f32	s16, s14
 800b206:	eef0 8a67 	vmov.f32	s17, s15
 800b20a:	2300      	movs	r3, #0
 800b20c:	f7f5 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b210:	4681      	mov	r9, r0
 800b212:	b160      	cbz	r0, 800b22e <_dtoa_r+0xee>
 800b214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b216:	2301      	movs	r3, #1
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 8568 	beq.w	800bcf2 <_dtoa_r+0xbb2>
 800b222:	4b86      	ldr	r3, [pc, #536]	; (800b43c <_dtoa_r+0x2fc>)
 800b224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	3b01      	subs	r3, #1
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	e7da      	b.n	800b1e4 <_dtoa_r+0xa4>
 800b22e:	aa10      	add	r2, sp, #64	; 0x40
 800b230:	a911      	add	r1, sp, #68	; 0x44
 800b232:	4620      	mov	r0, r4
 800b234:	eeb0 0a48 	vmov.f32	s0, s16
 800b238:	eef0 0a68 	vmov.f32	s1, s17
 800b23c:	f001 f994 	bl	800c568 <__d2b>
 800b240:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b244:	4682      	mov	sl, r0
 800b246:	2d00      	cmp	r5, #0
 800b248:	d07f      	beq.n	800b34a <_dtoa_r+0x20a>
 800b24a:	ee18 3a90 	vmov	r3, s17
 800b24e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b252:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b256:	ec51 0b18 	vmov	r0, r1, d8
 800b25a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b25e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b262:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b266:	4619      	mov	r1, r3
 800b268:	2200      	movs	r2, #0
 800b26a:	4b75      	ldr	r3, [pc, #468]	; (800b440 <_dtoa_r+0x300>)
 800b26c:	f7f5 f81c 	bl	80002a8 <__aeabi_dsub>
 800b270:	a367      	add	r3, pc, #412	; (adr r3, 800b410 <_dtoa_r+0x2d0>)
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f7f5 f9cf 	bl	8000618 <__aeabi_dmul>
 800b27a:	a367      	add	r3, pc, #412	; (adr r3, 800b418 <_dtoa_r+0x2d8>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f814 	bl	80002ac <__adddf3>
 800b284:	4606      	mov	r6, r0
 800b286:	4628      	mov	r0, r5
 800b288:	460f      	mov	r7, r1
 800b28a:	f7f5 f95b 	bl	8000544 <__aeabi_i2d>
 800b28e:	a364      	add	r3, pc, #400	; (adr r3, 800b420 <_dtoa_r+0x2e0>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f9c0 	bl	8000618 <__aeabi_dmul>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4630      	mov	r0, r6
 800b29e:	4639      	mov	r1, r7
 800b2a0:	f7f5 f804 	bl	80002ac <__adddf3>
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	460f      	mov	r7, r1
 800b2a8:	f7f5 fc66 	bl	8000b78 <__aeabi_d2iz>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4683      	mov	fp, r0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	f7f5 fc21 	bl	8000afc <__aeabi_dcmplt>
 800b2ba:	b148      	cbz	r0, 800b2d0 <_dtoa_r+0x190>
 800b2bc:	4658      	mov	r0, fp
 800b2be:	f7f5 f941 	bl	8000544 <__aeabi_i2d>
 800b2c2:	4632      	mov	r2, r6
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	f7f5 fc0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2ca:	b908      	cbnz	r0, 800b2d0 <_dtoa_r+0x190>
 800b2cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2d0:	f1bb 0f16 	cmp.w	fp, #22
 800b2d4:	d857      	bhi.n	800b386 <_dtoa_r+0x246>
 800b2d6:	4b5b      	ldr	r3, [pc, #364]	; (800b444 <_dtoa_r+0x304>)
 800b2d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	ec51 0b18 	vmov	r0, r1, d8
 800b2e4:	f7f5 fc0a 	bl	8000afc <__aeabi_dcmplt>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d04e      	beq.n	800b38a <_dtoa_r+0x24a>
 800b2ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2f6:	1b5b      	subs	r3, r3, r5
 800b2f8:	1e5a      	subs	r2, r3, #1
 800b2fa:	bf45      	ittet	mi
 800b2fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b300:	9305      	strmi	r3, [sp, #20]
 800b302:	2300      	movpl	r3, #0
 800b304:	2300      	movmi	r3, #0
 800b306:	9206      	str	r2, [sp, #24]
 800b308:	bf54      	ite	pl
 800b30a:	9305      	strpl	r3, [sp, #20]
 800b30c:	9306      	strmi	r3, [sp, #24]
 800b30e:	f1bb 0f00 	cmp.w	fp, #0
 800b312:	db3c      	blt.n	800b38e <_dtoa_r+0x24e>
 800b314:	9b06      	ldr	r3, [sp, #24]
 800b316:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b31a:	445b      	add	r3, fp
 800b31c:	9306      	str	r3, [sp, #24]
 800b31e:	2300      	movs	r3, #0
 800b320:	9308      	str	r3, [sp, #32]
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	2b09      	cmp	r3, #9
 800b326:	d868      	bhi.n	800b3fa <_dtoa_r+0x2ba>
 800b328:	2b05      	cmp	r3, #5
 800b32a:	bfc4      	itt	gt
 800b32c:	3b04      	subgt	r3, #4
 800b32e:	9307      	strgt	r3, [sp, #28]
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	f1a3 0302 	sub.w	r3, r3, #2
 800b336:	bfcc      	ite	gt
 800b338:	2500      	movgt	r5, #0
 800b33a:	2501      	movle	r5, #1
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	f200 8085 	bhi.w	800b44c <_dtoa_r+0x30c>
 800b342:	e8df f003 	tbb	[pc, r3]
 800b346:	3b2e      	.short	0x3b2e
 800b348:	5839      	.short	0x5839
 800b34a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b34e:	441d      	add	r5, r3
 800b350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b354:	2b20      	cmp	r3, #32
 800b356:	bfc1      	itttt	gt
 800b358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b35c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b360:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b364:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b368:	bfd6      	itet	le
 800b36a:	f1c3 0320 	rsble	r3, r3, #32
 800b36e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b372:	fa06 f003 	lslle.w	r0, r6, r3
 800b376:	f7f5 f8d5 	bl	8000524 <__aeabi_ui2d>
 800b37a:	2201      	movs	r2, #1
 800b37c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b380:	3d01      	subs	r5, #1
 800b382:	920e      	str	r2, [sp, #56]	; 0x38
 800b384:	e76f      	b.n	800b266 <_dtoa_r+0x126>
 800b386:	2301      	movs	r3, #1
 800b388:	e7b3      	b.n	800b2f2 <_dtoa_r+0x1b2>
 800b38a:	900c      	str	r0, [sp, #48]	; 0x30
 800b38c:	e7b2      	b.n	800b2f4 <_dtoa_r+0x1b4>
 800b38e:	9b05      	ldr	r3, [sp, #20]
 800b390:	eba3 030b 	sub.w	r3, r3, fp
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	f1cb 0300 	rsb	r3, fp, #0
 800b39a:	9308      	str	r3, [sp, #32]
 800b39c:	2300      	movs	r3, #0
 800b39e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a0:	e7bf      	b.n	800b322 <_dtoa_r+0x1e2>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	dc52      	bgt.n	800b452 <_dtoa_r+0x312>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	9304      	str	r3, [sp, #16]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3b6:	e00b      	b.n	800b3d0 <_dtoa_r+0x290>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e7f3      	b.n	800b3a4 <_dtoa_r+0x264>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c2:	445b      	add	r3, fp
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	9304      	str	r3, [sp, #16]
 800b3cc:	bfb8      	it	lt
 800b3ce:	2301      	movlt	r3, #1
 800b3d0:	69e0      	ldr	r0, [r4, #28]
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	f102 0614 	add.w	r6, r2, #20
 800b3da:	429e      	cmp	r6, r3
 800b3dc:	d93d      	bls.n	800b45a <_dtoa_r+0x31a>
 800b3de:	6041      	str	r1, [r0, #4]
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 fd9f 	bl	800bf24 <_Balloc>
 800b3e6:	9000      	str	r0, [sp, #0]
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d139      	bne.n	800b460 <_dtoa_r+0x320>
 800b3ec:	4b16      	ldr	r3, [pc, #88]	; (800b448 <_dtoa_r+0x308>)
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	f240 11af 	movw	r1, #431	; 0x1af
 800b3f4:	e6bd      	b.n	800b172 <_dtoa_r+0x32>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e7e1      	b.n	800b3be <_dtoa_r+0x27e>
 800b3fa:	2501      	movs	r5, #1
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9307      	str	r3, [sp, #28]
 800b400:	9509      	str	r5, [sp, #36]	; 0x24
 800b402:	f04f 33ff 	mov.w	r3, #4294967295
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	2200      	movs	r2, #0
 800b40c:	2312      	movs	r3, #18
 800b40e:	e7d1      	b.n	800b3b4 <_dtoa_r+0x274>
 800b410:	636f4361 	.word	0x636f4361
 800b414:	3fd287a7 	.word	0x3fd287a7
 800b418:	8b60c8b3 	.word	0x8b60c8b3
 800b41c:	3fc68a28 	.word	0x3fc68a28
 800b420:	509f79fb 	.word	0x509f79fb
 800b424:	3fd34413 	.word	0x3fd34413
 800b428:	0800d285 	.word	0x0800d285
 800b42c:	0800d29c 	.word	0x0800d29c
 800b430:	7ff00000 	.word	0x7ff00000
 800b434:	0800d281 	.word	0x0800d281
 800b438:	0800d278 	.word	0x0800d278
 800b43c:	0800d255 	.word	0x0800d255
 800b440:	3ff80000 	.word	0x3ff80000
 800b444:	0800d388 	.word	0x0800d388
 800b448:	0800d2f4 	.word	0x0800d2f4
 800b44c:	2301      	movs	r3, #1
 800b44e:	9309      	str	r3, [sp, #36]	; 0x24
 800b450:	e7d7      	b.n	800b402 <_dtoa_r+0x2c2>
 800b452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	e7ba      	b.n	800b3d0 <_dtoa_r+0x290>
 800b45a:	3101      	adds	r1, #1
 800b45c:	0052      	lsls	r2, r2, #1
 800b45e:	e7ba      	b.n	800b3d6 <_dtoa_r+0x296>
 800b460:	69e3      	ldr	r3, [r4, #28]
 800b462:	9a00      	ldr	r2, [sp, #0]
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	2b0e      	cmp	r3, #14
 800b46a:	f200 80a8 	bhi.w	800b5be <_dtoa_r+0x47e>
 800b46e:	2d00      	cmp	r5, #0
 800b470:	f000 80a5 	beq.w	800b5be <_dtoa_r+0x47e>
 800b474:	f1bb 0f00 	cmp.w	fp, #0
 800b478:	dd38      	ble.n	800b4ec <_dtoa_r+0x3ac>
 800b47a:	4bc0      	ldr	r3, [pc, #768]	; (800b77c <_dtoa_r+0x63c>)
 800b47c:	f00b 020f 	and.w	r2, fp, #15
 800b480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b484:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b488:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b48c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b490:	d019      	beq.n	800b4c6 <_dtoa_r+0x386>
 800b492:	4bbb      	ldr	r3, [pc, #748]	; (800b780 <_dtoa_r+0x640>)
 800b494:	ec51 0b18 	vmov	r0, r1, d8
 800b498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b49c:	f7f5 f9e6 	bl	800086c <__aeabi_ddiv>
 800b4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4a4:	f008 080f 	and.w	r8, r8, #15
 800b4a8:	2503      	movs	r5, #3
 800b4aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b780 <_dtoa_r+0x640>
 800b4ae:	f1b8 0f00 	cmp.w	r8, #0
 800b4b2:	d10a      	bne.n	800b4ca <_dtoa_r+0x38a>
 800b4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	f7f5 f9d6 	bl	800086c <__aeabi_ddiv>
 800b4c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4c4:	e02b      	b.n	800b51e <_dtoa_r+0x3de>
 800b4c6:	2502      	movs	r5, #2
 800b4c8:	e7ef      	b.n	800b4aa <_dtoa_r+0x36a>
 800b4ca:	f018 0f01 	tst.w	r8, #1
 800b4ce:	d008      	beq.n	800b4e2 <_dtoa_r+0x3a2>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4d8:	f7f5 f89e 	bl	8000618 <__aeabi_dmul>
 800b4dc:	3501      	adds	r5, #1
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4e6:	f109 0908 	add.w	r9, r9, #8
 800b4ea:	e7e0      	b.n	800b4ae <_dtoa_r+0x36e>
 800b4ec:	f000 809f 	beq.w	800b62e <_dtoa_r+0x4ee>
 800b4f0:	f1cb 0600 	rsb	r6, fp, #0
 800b4f4:	4ba1      	ldr	r3, [pc, #644]	; (800b77c <_dtoa_r+0x63c>)
 800b4f6:	4fa2      	ldr	r7, [pc, #648]	; (800b780 <_dtoa_r+0x640>)
 800b4f8:	f006 020f 	and.w	r2, r6, #15
 800b4fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	ec51 0b18 	vmov	r0, r1, d8
 800b508:	f7f5 f886 	bl	8000618 <__aeabi_dmul>
 800b50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b510:	1136      	asrs	r6, r6, #4
 800b512:	2300      	movs	r3, #0
 800b514:	2502      	movs	r5, #2
 800b516:	2e00      	cmp	r6, #0
 800b518:	d17e      	bne.n	800b618 <_dtoa_r+0x4d8>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1d0      	bne.n	800b4c0 <_dtoa_r+0x380>
 800b51e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b520:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 8084 	beq.w	800b632 <_dtoa_r+0x4f2>
 800b52a:	4b96      	ldr	r3, [pc, #600]	; (800b784 <_dtoa_r+0x644>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f5 fae3 	bl	8000afc <__aeabi_dcmplt>
 800b536:	2800      	cmp	r0, #0
 800b538:	d07b      	beq.n	800b632 <_dtoa_r+0x4f2>
 800b53a:	9b04      	ldr	r3, [sp, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d078      	beq.n	800b632 <_dtoa_r+0x4f2>
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	dd39      	ble.n	800b5ba <_dtoa_r+0x47a>
 800b546:	4b90      	ldr	r3, [pc, #576]	; (800b788 <_dtoa_r+0x648>)
 800b548:	2200      	movs	r2, #0
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f5 f863 	bl	8000618 <__aeabi_dmul>
 800b552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b556:	9e01      	ldr	r6, [sp, #4]
 800b558:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b55c:	3501      	adds	r5, #1
 800b55e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b562:	4628      	mov	r0, r5
 800b564:	f7f4 ffee 	bl	8000544 <__aeabi_i2d>
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	f7f5 f854 	bl	8000618 <__aeabi_dmul>
 800b570:	4b86      	ldr	r3, [pc, #536]	; (800b78c <_dtoa_r+0x64c>)
 800b572:	2200      	movs	r2, #0
 800b574:	f7f4 fe9a 	bl	80002ac <__adddf3>
 800b578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	2e00      	cmp	r6, #0
 800b584:	d158      	bne.n	800b638 <_dtoa_r+0x4f8>
 800b586:	4b82      	ldr	r3, [pc, #520]	; (800b790 <_dtoa_r+0x650>)
 800b588:	2200      	movs	r2, #0
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe8b 	bl	80002a8 <__aeabi_dsub>
 800b592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b596:	4680      	mov	r8, r0
 800b598:	4689      	mov	r9, r1
 800b59a:	f7f5 facd 	bl	8000b38 <__aeabi_dcmpgt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f040 8296 	bne.w	800bad0 <_dtoa_r+0x990>
 800b5a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	f7f5 faa4 	bl	8000afc <__aeabi_dcmplt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f040 8289 	bne.w	800bacc <_dtoa_r+0x98c>
 800b5ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b5be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f2c0 814e 	blt.w	800b862 <_dtoa_r+0x722>
 800b5c6:	f1bb 0f0e 	cmp.w	fp, #14
 800b5ca:	f300 814a 	bgt.w	800b862 <_dtoa_r+0x722>
 800b5ce:	4b6b      	ldr	r3, [pc, #428]	; (800b77c <_dtoa_r+0x63c>)
 800b5d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b5d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f280 80dc 	bge.w	800b798 <_dtoa_r+0x658>
 800b5e0:	9b04      	ldr	r3, [sp, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f300 80d8 	bgt.w	800b798 <_dtoa_r+0x658>
 800b5e8:	f040 826f 	bne.w	800baca <_dtoa_r+0x98a>
 800b5ec:	4b68      	ldr	r3, [pc, #416]	; (800b790 <_dtoa_r+0x650>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	f7f5 f810 	bl	8000618 <__aeabi_dmul>
 800b5f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5fc:	f7f5 fa92 	bl	8000b24 <__aeabi_dcmpge>
 800b600:	9e04      	ldr	r6, [sp, #16]
 800b602:	4637      	mov	r7, r6
 800b604:	2800      	cmp	r0, #0
 800b606:	f040 8245 	bne.w	800ba94 <_dtoa_r+0x954>
 800b60a:	9d00      	ldr	r5, [sp, #0]
 800b60c:	2331      	movs	r3, #49	; 0x31
 800b60e:	f805 3b01 	strb.w	r3, [r5], #1
 800b612:	f10b 0b01 	add.w	fp, fp, #1
 800b616:	e241      	b.n	800ba9c <_dtoa_r+0x95c>
 800b618:	07f2      	lsls	r2, r6, #31
 800b61a:	d505      	bpl.n	800b628 <_dtoa_r+0x4e8>
 800b61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b620:	f7f4 fffa 	bl	8000618 <__aeabi_dmul>
 800b624:	3501      	adds	r5, #1
 800b626:	2301      	movs	r3, #1
 800b628:	1076      	asrs	r6, r6, #1
 800b62a:	3708      	adds	r7, #8
 800b62c:	e773      	b.n	800b516 <_dtoa_r+0x3d6>
 800b62e:	2502      	movs	r5, #2
 800b630:	e775      	b.n	800b51e <_dtoa_r+0x3de>
 800b632:	9e04      	ldr	r6, [sp, #16]
 800b634:	465f      	mov	r7, fp
 800b636:	e792      	b.n	800b55e <_dtoa_r+0x41e>
 800b638:	9900      	ldr	r1, [sp, #0]
 800b63a:	4b50      	ldr	r3, [pc, #320]	; (800b77c <_dtoa_r+0x63c>)
 800b63c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b640:	4431      	add	r1, r6
 800b642:	9102      	str	r1, [sp, #8]
 800b644:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b646:	eeb0 9a47 	vmov.f32	s18, s14
 800b64a:	eef0 9a67 	vmov.f32	s19, s15
 800b64e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b656:	2900      	cmp	r1, #0
 800b658:	d044      	beq.n	800b6e4 <_dtoa_r+0x5a4>
 800b65a:	494e      	ldr	r1, [pc, #312]	; (800b794 <_dtoa_r+0x654>)
 800b65c:	2000      	movs	r0, #0
 800b65e:	f7f5 f905 	bl	800086c <__aeabi_ddiv>
 800b662:	ec53 2b19 	vmov	r2, r3, d9
 800b666:	f7f4 fe1f 	bl	80002a8 <__aeabi_dsub>
 800b66a:	9d00      	ldr	r5, [sp, #0]
 800b66c:	ec41 0b19 	vmov	d9, r0, r1
 800b670:	4649      	mov	r1, r9
 800b672:	4640      	mov	r0, r8
 800b674:	f7f5 fa80 	bl	8000b78 <__aeabi_d2iz>
 800b678:	4606      	mov	r6, r0
 800b67a:	f7f4 ff63 	bl	8000544 <__aeabi_i2d>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4640      	mov	r0, r8
 800b684:	4649      	mov	r1, r9
 800b686:	f7f4 fe0f 	bl	80002a8 <__aeabi_dsub>
 800b68a:	3630      	adds	r6, #48	; 0x30
 800b68c:	f805 6b01 	strb.w	r6, [r5], #1
 800b690:	ec53 2b19 	vmov	r2, r3, d9
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	f7f5 fa30 	bl	8000afc <__aeabi_dcmplt>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d164      	bne.n	800b76a <_dtoa_r+0x62a>
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	464b      	mov	r3, r9
 800b6a4:	4937      	ldr	r1, [pc, #220]	; (800b784 <_dtoa_r+0x644>)
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f7f4 fdfe 	bl	80002a8 <__aeabi_dsub>
 800b6ac:	ec53 2b19 	vmov	r2, r3, d9
 800b6b0:	f7f5 fa24 	bl	8000afc <__aeabi_dcmplt>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	f040 80b6 	bne.w	800b826 <_dtoa_r+0x6e6>
 800b6ba:	9b02      	ldr	r3, [sp, #8]
 800b6bc:	429d      	cmp	r5, r3
 800b6be:	f43f af7c 	beq.w	800b5ba <_dtoa_r+0x47a>
 800b6c2:	4b31      	ldr	r3, [pc, #196]	; (800b788 <_dtoa_r+0x648>)
 800b6c4:	ec51 0b19 	vmov	r0, r1, d9
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f7f4 ffa5 	bl	8000618 <__aeabi_dmul>
 800b6ce:	4b2e      	ldr	r3, [pc, #184]	; (800b788 <_dtoa_r+0x648>)
 800b6d0:	ec41 0b19 	vmov	d9, r0, r1
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	4649      	mov	r1, r9
 800b6da:	f7f4 ff9d 	bl	8000618 <__aeabi_dmul>
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4689      	mov	r9, r1
 800b6e2:	e7c5      	b.n	800b670 <_dtoa_r+0x530>
 800b6e4:	ec51 0b17 	vmov	r0, r1, d7
 800b6e8:	f7f4 ff96 	bl	8000618 <__aeabi_dmul>
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	9d00      	ldr	r5, [sp, #0]
 800b6f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6f2:	ec41 0b19 	vmov	d9, r0, r1
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	f7f5 fa3d 	bl	8000b78 <__aeabi_d2iz>
 800b6fe:	4606      	mov	r6, r0
 800b700:	f7f4 ff20 	bl	8000544 <__aeabi_i2d>
 800b704:	3630      	adds	r6, #48	; 0x30
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	f7f4 fdcb 	bl	80002a8 <__aeabi_dsub>
 800b712:	f805 6b01 	strb.w	r6, [r5], #1
 800b716:	9b02      	ldr	r3, [sp, #8]
 800b718:	429d      	cmp	r5, r3
 800b71a:	4680      	mov	r8, r0
 800b71c:	4689      	mov	r9, r1
 800b71e:	f04f 0200 	mov.w	r2, #0
 800b722:	d124      	bne.n	800b76e <_dtoa_r+0x62e>
 800b724:	4b1b      	ldr	r3, [pc, #108]	; (800b794 <_dtoa_r+0x654>)
 800b726:	ec51 0b19 	vmov	r0, r1, d9
 800b72a:	f7f4 fdbf 	bl	80002ac <__adddf3>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	f7f5 f9ff 	bl	8000b38 <__aeabi_dcmpgt>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d173      	bne.n	800b826 <_dtoa_r+0x6e6>
 800b73e:	ec53 2b19 	vmov	r2, r3, d9
 800b742:	4914      	ldr	r1, [pc, #80]	; (800b794 <_dtoa_r+0x654>)
 800b744:	2000      	movs	r0, #0
 800b746:	f7f4 fdaf 	bl	80002a8 <__aeabi_dsub>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f9d3 	bl	8000afc <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	f43f af2f 	beq.w	800b5ba <_dtoa_r+0x47a>
 800b75c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b75e:	1e6b      	subs	r3, r5, #1
 800b760:	930f      	str	r3, [sp, #60]	; 0x3c
 800b762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b766:	2b30      	cmp	r3, #48	; 0x30
 800b768:	d0f8      	beq.n	800b75c <_dtoa_r+0x61c>
 800b76a:	46bb      	mov	fp, r7
 800b76c:	e04a      	b.n	800b804 <_dtoa_r+0x6c4>
 800b76e:	4b06      	ldr	r3, [pc, #24]	; (800b788 <_dtoa_r+0x648>)
 800b770:	f7f4 ff52 	bl	8000618 <__aeabi_dmul>
 800b774:	4680      	mov	r8, r0
 800b776:	4689      	mov	r9, r1
 800b778:	e7bd      	b.n	800b6f6 <_dtoa_r+0x5b6>
 800b77a:	bf00      	nop
 800b77c:	0800d388 	.word	0x0800d388
 800b780:	0800d360 	.word	0x0800d360
 800b784:	3ff00000 	.word	0x3ff00000
 800b788:	40240000 	.word	0x40240000
 800b78c:	401c0000 	.word	0x401c0000
 800b790:	40140000 	.word	0x40140000
 800b794:	3fe00000 	.word	0x3fe00000
 800b798:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b79c:	9d00      	ldr	r5, [sp, #0]
 800b79e:	4642      	mov	r2, r8
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f5 f861 	bl	800086c <__aeabi_ddiv>
 800b7aa:	f7f5 f9e5 	bl	8000b78 <__aeabi_d2iz>
 800b7ae:	9001      	str	r0, [sp, #4]
 800b7b0:	f7f4 fec8 	bl	8000544 <__aeabi_i2d>
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	f7f4 ff2e 	bl	8000618 <__aeabi_dmul>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	f7f4 fd70 	bl	80002a8 <__aeabi_dsub>
 800b7c8:	9e01      	ldr	r6, [sp, #4]
 800b7ca:	9f04      	ldr	r7, [sp, #16]
 800b7cc:	3630      	adds	r6, #48	; 0x30
 800b7ce:	f805 6b01 	strb.w	r6, [r5], #1
 800b7d2:	9e00      	ldr	r6, [sp, #0]
 800b7d4:	1bae      	subs	r6, r5, r6
 800b7d6:	42b7      	cmp	r7, r6
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	d134      	bne.n	800b848 <_dtoa_r+0x708>
 800b7de:	f7f4 fd65 	bl	80002ac <__adddf3>
 800b7e2:	4642      	mov	r2, r8
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	f7f5 f9a5 	bl	8000b38 <__aeabi_dcmpgt>
 800b7ee:	b9c8      	cbnz	r0, 800b824 <_dtoa_r+0x6e4>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	f7f5 f976 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7fc:	b110      	cbz	r0, 800b804 <_dtoa_r+0x6c4>
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	07db      	lsls	r3, r3, #31
 800b802:	d40f      	bmi.n	800b824 <_dtoa_r+0x6e4>
 800b804:	4651      	mov	r1, sl
 800b806:	4620      	mov	r0, r4
 800b808:	f000 fbcc 	bl	800bfa4 <_Bfree>
 800b80c:	2300      	movs	r3, #0
 800b80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b810:	702b      	strb	r3, [r5, #0]
 800b812:	f10b 0301 	add.w	r3, fp, #1
 800b816:	6013      	str	r3, [r2, #0]
 800b818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f43f ace2 	beq.w	800b1e4 <_dtoa_r+0xa4>
 800b820:	601d      	str	r5, [r3, #0]
 800b822:	e4df      	b.n	800b1e4 <_dtoa_r+0xa4>
 800b824:	465f      	mov	r7, fp
 800b826:	462b      	mov	r3, r5
 800b828:	461d      	mov	r5, r3
 800b82a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b82e:	2a39      	cmp	r2, #57	; 0x39
 800b830:	d106      	bne.n	800b840 <_dtoa_r+0x700>
 800b832:	9a00      	ldr	r2, [sp, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d1f7      	bne.n	800b828 <_dtoa_r+0x6e8>
 800b838:	9900      	ldr	r1, [sp, #0]
 800b83a:	2230      	movs	r2, #48	; 0x30
 800b83c:	3701      	adds	r7, #1
 800b83e:	700a      	strb	r2, [r1, #0]
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	3201      	adds	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	e790      	b.n	800b76a <_dtoa_r+0x62a>
 800b848:	4ba3      	ldr	r3, [pc, #652]	; (800bad8 <_dtoa_r+0x998>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	f7f4 fee4 	bl	8000618 <__aeabi_dmul>
 800b850:	2200      	movs	r2, #0
 800b852:	2300      	movs	r3, #0
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	f7f5 f946 	bl	8000ae8 <__aeabi_dcmpeq>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d09e      	beq.n	800b79e <_dtoa_r+0x65e>
 800b860:	e7d0      	b.n	800b804 <_dtoa_r+0x6c4>
 800b862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b864:	2a00      	cmp	r2, #0
 800b866:	f000 80ca 	beq.w	800b9fe <_dtoa_r+0x8be>
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	2a01      	cmp	r2, #1
 800b86e:	f300 80ad 	bgt.w	800b9cc <_dtoa_r+0x88c>
 800b872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b874:	2a00      	cmp	r2, #0
 800b876:	f000 80a5 	beq.w	800b9c4 <_dtoa_r+0x884>
 800b87a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b87e:	9e08      	ldr	r6, [sp, #32]
 800b880:	9d05      	ldr	r5, [sp, #20]
 800b882:	9a05      	ldr	r2, [sp, #20]
 800b884:	441a      	add	r2, r3
 800b886:	9205      	str	r2, [sp, #20]
 800b888:	9a06      	ldr	r2, [sp, #24]
 800b88a:	2101      	movs	r1, #1
 800b88c:	441a      	add	r2, r3
 800b88e:	4620      	mov	r0, r4
 800b890:	9206      	str	r2, [sp, #24]
 800b892:	f000 fc3d 	bl	800c110 <__i2b>
 800b896:	4607      	mov	r7, r0
 800b898:	b165      	cbz	r5, 800b8b4 <_dtoa_r+0x774>
 800b89a:	9b06      	ldr	r3, [sp, #24]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dd09      	ble.n	800b8b4 <_dtoa_r+0x774>
 800b8a0:	42ab      	cmp	r3, r5
 800b8a2:	9a05      	ldr	r2, [sp, #20]
 800b8a4:	bfa8      	it	ge
 800b8a6:	462b      	movge	r3, r5
 800b8a8:	1ad2      	subs	r2, r2, r3
 800b8aa:	9205      	str	r2, [sp, #20]
 800b8ac:	9a06      	ldr	r2, [sp, #24]
 800b8ae:	1aed      	subs	r5, r5, r3
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	9306      	str	r3, [sp, #24]
 800b8b4:	9b08      	ldr	r3, [sp, #32]
 800b8b6:	b1f3      	cbz	r3, 800b8f6 <_dtoa_r+0x7b6>
 800b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f000 80a3 	beq.w	800ba06 <_dtoa_r+0x8c6>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	dd10      	ble.n	800b8e6 <_dtoa_r+0x7a6>
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 fce1 	bl	800c290 <__pow5mult>
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	4601      	mov	r1, r0
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fc31 	bl	800c13c <__multiply>
 800b8da:	4651      	mov	r1, sl
 800b8dc:	4680      	mov	r8, r0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fb60 	bl	800bfa4 <_Bfree>
 800b8e4:	46c2      	mov	sl, r8
 800b8e6:	9b08      	ldr	r3, [sp, #32]
 800b8e8:	1b9a      	subs	r2, r3, r6
 800b8ea:	d004      	beq.n	800b8f6 <_dtoa_r+0x7b6>
 800b8ec:	4651      	mov	r1, sl
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 fcce 	bl	800c290 <__pow5mult>
 800b8f4:	4682      	mov	sl, r0
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fc09 	bl	800c110 <__i2b>
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b900:	2b00      	cmp	r3, #0
 800b902:	4606      	mov	r6, r0
 800b904:	f340 8081 	ble.w	800ba0a <_dtoa_r+0x8ca>
 800b908:	461a      	mov	r2, r3
 800b90a:	4601      	mov	r1, r0
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fcbf 	bl	800c290 <__pow5mult>
 800b912:	9b07      	ldr	r3, [sp, #28]
 800b914:	2b01      	cmp	r3, #1
 800b916:	4606      	mov	r6, r0
 800b918:	dd7a      	ble.n	800ba10 <_dtoa_r+0x8d0>
 800b91a:	f04f 0800 	mov.w	r8, #0
 800b91e:	6933      	ldr	r3, [r6, #16]
 800b920:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b924:	6918      	ldr	r0, [r3, #16]
 800b926:	f000 fba5 	bl	800c074 <__hi0bits>
 800b92a:	f1c0 0020 	rsb	r0, r0, #32
 800b92e:	9b06      	ldr	r3, [sp, #24]
 800b930:	4418      	add	r0, r3
 800b932:	f010 001f 	ands.w	r0, r0, #31
 800b936:	f000 8094 	beq.w	800ba62 <_dtoa_r+0x922>
 800b93a:	f1c0 0320 	rsb	r3, r0, #32
 800b93e:	2b04      	cmp	r3, #4
 800b940:	f340 8085 	ble.w	800ba4e <_dtoa_r+0x90e>
 800b944:	9b05      	ldr	r3, [sp, #20]
 800b946:	f1c0 001c 	rsb	r0, r0, #28
 800b94a:	4403      	add	r3, r0
 800b94c:	9305      	str	r3, [sp, #20]
 800b94e:	9b06      	ldr	r3, [sp, #24]
 800b950:	4403      	add	r3, r0
 800b952:	4405      	add	r5, r0
 800b954:	9306      	str	r3, [sp, #24]
 800b956:	9b05      	ldr	r3, [sp, #20]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dd05      	ble.n	800b968 <_dtoa_r+0x828>
 800b95c:	4651      	mov	r1, sl
 800b95e:	461a      	mov	r2, r3
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fcef 	bl	800c344 <__lshift>
 800b966:	4682      	mov	sl, r0
 800b968:	9b06      	ldr	r3, [sp, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dd05      	ble.n	800b97a <_dtoa_r+0x83a>
 800b96e:	4631      	mov	r1, r6
 800b970:	461a      	mov	r2, r3
 800b972:	4620      	mov	r0, r4
 800b974:	f000 fce6 	bl	800c344 <__lshift>
 800b978:	4606      	mov	r6, r0
 800b97a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d072      	beq.n	800ba66 <_dtoa_r+0x926>
 800b980:	4631      	mov	r1, r6
 800b982:	4650      	mov	r0, sl
 800b984:	f000 fd4a 	bl	800c41c <__mcmp>
 800b988:	2800      	cmp	r0, #0
 800b98a:	da6c      	bge.n	800ba66 <_dtoa_r+0x926>
 800b98c:	2300      	movs	r3, #0
 800b98e:	4651      	mov	r1, sl
 800b990:	220a      	movs	r2, #10
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fb28 	bl	800bfe8 <__multadd>
 800b998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b99e:	4682      	mov	sl, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 81b0 	beq.w	800bd06 <_dtoa_r+0xbc6>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4639      	mov	r1, r7
 800b9aa:	220a      	movs	r2, #10
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 fb1b 	bl	800bfe8 <__multadd>
 800b9b2:	9b01      	ldr	r3, [sp, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	f300 8096 	bgt.w	800bae8 <_dtoa_r+0x9a8>
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	dc59      	bgt.n	800ba76 <_dtoa_r+0x936>
 800b9c2:	e091      	b.n	800bae8 <_dtoa_r+0x9a8>
 800b9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ca:	e758      	b.n	800b87e <_dtoa_r+0x73e>
 800b9cc:	9b04      	ldr	r3, [sp, #16]
 800b9ce:	1e5e      	subs	r6, r3, #1
 800b9d0:	9b08      	ldr	r3, [sp, #32]
 800b9d2:	42b3      	cmp	r3, r6
 800b9d4:	bfbf      	itttt	lt
 800b9d6:	9b08      	ldrlt	r3, [sp, #32]
 800b9d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b9da:	9608      	strlt	r6, [sp, #32]
 800b9dc:	1af3      	sublt	r3, r6, r3
 800b9de:	bfb4      	ite	lt
 800b9e0:	18d2      	addlt	r2, r2, r3
 800b9e2:	1b9e      	subge	r6, r3, r6
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	bfbc      	itt	lt
 800b9e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b9ea:	2600      	movlt	r6, #0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bfb7      	itett	lt
 800b9f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b9f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b9f8:	1a9d      	sublt	r5, r3, r2
 800b9fa:	2300      	movlt	r3, #0
 800b9fc:	e741      	b.n	800b882 <_dtoa_r+0x742>
 800b9fe:	9e08      	ldr	r6, [sp, #32]
 800ba00:	9d05      	ldr	r5, [sp, #20]
 800ba02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba04:	e748      	b.n	800b898 <_dtoa_r+0x758>
 800ba06:	9a08      	ldr	r2, [sp, #32]
 800ba08:	e770      	b.n	800b8ec <_dtoa_r+0x7ac>
 800ba0a:	9b07      	ldr	r3, [sp, #28]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	dc19      	bgt.n	800ba44 <_dtoa_r+0x904>
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	b9bb      	cbnz	r3, 800ba44 <_dtoa_r+0x904>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba1a:	b99b      	cbnz	r3, 800ba44 <_dtoa_r+0x904>
 800ba1c:	9b03      	ldr	r3, [sp, #12]
 800ba1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba22:	0d1b      	lsrs	r3, r3, #20
 800ba24:	051b      	lsls	r3, r3, #20
 800ba26:	b183      	cbz	r3, 800ba4a <_dtoa_r+0x90a>
 800ba28:	9b05      	ldr	r3, [sp, #20]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	9305      	str	r3, [sp, #20]
 800ba2e:	9b06      	ldr	r3, [sp, #24]
 800ba30:	3301      	adds	r3, #1
 800ba32:	9306      	str	r3, [sp, #24]
 800ba34:	f04f 0801 	mov.w	r8, #1
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f47f af6f 	bne.w	800b91e <_dtoa_r+0x7de>
 800ba40:	2001      	movs	r0, #1
 800ba42:	e774      	b.n	800b92e <_dtoa_r+0x7ee>
 800ba44:	f04f 0800 	mov.w	r8, #0
 800ba48:	e7f6      	b.n	800ba38 <_dtoa_r+0x8f8>
 800ba4a:	4698      	mov	r8, r3
 800ba4c:	e7f4      	b.n	800ba38 <_dtoa_r+0x8f8>
 800ba4e:	d082      	beq.n	800b956 <_dtoa_r+0x816>
 800ba50:	9a05      	ldr	r2, [sp, #20]
 800ba52:	331c      	adds	r3, #28
 800ba54:	441a      	add	r2, r3
 800ba56:	9205      	str	r2, [sp, #20]
 800ba58:	9a06      	ldr	r2, [sp, #24]
 800ba5a:	441a      	add	r2, r3
 800ba5c:	441d      	add	r5, r3
 800ba5e:	9206      	str	r2, [sp, #24]
 800ba60:	e779      	b.n	800b956 <_dtoa_r+0x816>
 800ba62:	4603      	mov	r3, r0
 800ba64:	e7f4      	b.n	800ba50 <_dtoa_r+0x910>
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dc37      	bgt.n	800badc <_dtoa_r+0x99c>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	dd34      	ble.n	800badc <_dtoa_r+0x99c>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	b963      	cbnz	r3, 800ba94 <_dtoa_r+0x954>
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	2205      	movs	r2, #5
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 fab2 	bl	800bfe8 <__multadd>
 800ba84:	4601      	mov	r1, r0
 800ba86:	4606      	mov	r6, r0
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f000 fcc7 	bl	800c41c <__mcmp>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	f73f adbb 	bgt.w	800b60a <_dtoa_r+0x4ca>
 800ba94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba96:	9d00      	ldr	r5, [sp, #0]
 800ba98:	ea6f 0b03 	mvn.w	fp, r3
 800ba9c:	f04f 0800 	mov.w	r8, #0
 800baa0:	4631      	mov	r1, r6
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fa7e 	bl	800bfa4 <_Bfree>
 800baa8:	2f00      	cmp	r7, #0
 800baaa:	f43f aeab 	beq.w	800b804 <_dtoa_r+0x6c4>
 800baae:	f1b8 0f00 	cmp.w	r8, #0
 800bab2:	d005      	beq.n	800bac0 <_dtoa_r+0x980>
 800bab4:	45b8      	cmp	r8, r7
 800bab6:	d003      	beq.n	800bac0 <_dtoa_r+0x980>
 800bab8:	4641      	mov	r1, r8
 800baba:	4620      	mov	r0, r4
 800babc:	f000 fa72 	bl	800bfa4 <_Bfree>
 800bac0:	4639      	mov	r1, r7
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fa6e 	bl	800bfa4 <_Bfree>
 800bac8:	e69c      	b.n	800b804 <_dtoa_r+0x6c4>
 800baca:	2600      	movs	r6, #0
 800bacc:	4637      	mov	r7, r6
 800bace:	e7e1      	b.n	800ba94 <_dtoa_r+0x954>
 800bad0:	46bb      	mov	fp, r7
 800bad2:	4637      	mov	r7, r6
 800bad4:	e599      	b.n	800b60a <_dtoa_r+0x4ca>
 800bad6:	bf00      	nop
 800bad8:	40240000 	.word	0x40240000
 800badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f000 80c8 	beq.w	800bc74 <_dtoa_r+0xb34>
 800bae4:	9b04      	ldr	r3, [sp, #16]
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	2d00      	cmp	r5, #0
 800baea:	dd05      	ble.n	800baf8 <_dtoa_r+0x9b8>
 800baec:	4639      	mov	r1, r7
 800baee:	462a      	mov	r2, r5
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fc27 	bl	800c344 <__lshift>
 800baf6:	4607      	mov	r7, r0
 800baf8:	f1b8 0f00 	cmp.w	r8, #0
 800bafc:	d05b      	beq.n	800bbb6 <_dtoa_r+0xa76>
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fa0f 	bl	800bf24 <_Balloc>
 800bb06:	4605      	mov	r5, r0
 800bb08:	b928      	cbnz	r0, 800bb16 <_dtoa_r+0x9d6>
 800bb0a:	4b83      	ldr	r3, [pc, #524]	; (800bd18 <_dtoa_r+0xbd8>)
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bb12:	f7ff bb2e 	b.w	800b172 <_dtoa_r+0x32>
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	3202      	adds	r2, #2
 800bb1a:	0092      	lsls	r2, r2, #2
 800bb1c:	f107 010c 	add.w	r1, r7, #12
 800bb20:	300c      	adds	r0, #12
 800bb22:	f7ff fa75 	bl	800b010 <memcpy>
 800bb26:	2201      	movs	r2, #1
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f000 fc0a 	bl	800c344 <__lshift>
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	9308      	str	r3, [sp, #32]
 800bb3e:	9b02      	ldr	r3, [sp, #8]
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	46b8      	mov	r8, r7
 800bb46:	9306      	str	r3, [sp, #24]
 800bb48:	4607      	mov	r7, r0
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	4650      	mov	r0, sl
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	f7ff fa6a 	bl	800b02c <quorem>
 800bb58:	4641      	mov	r1, r8
 800bb5a:	9002      	str	r0, [sp, #8]
 800bb5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb60:	4650      	mov	r0, sl
 800bb62:	f000 fc5b 	bl	800c41c <__mcmp>
 800bb66:	463a      	mov	r2, r7
 800bb68:	9005      	str	r0, [sp, #20]
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f000 fc71 	bl	800c454 <__mdiff>
 800bb72:	68c2      	ldr	r2, [r0, #12]
 800bb74:	4605      	mov	r5, r0
 800bb76:	bb02      	cbnz	r2, 800bbba <_dtoa_r+0xa7a>
 800bb78:	4601      	mov	r1, r0
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f000 fc4e 	bl	800c41c <__mcmp>
 800bb80:	4602      	mov	r2, r0
 800bb82:	4629      	mov	r1, r5
 800bb84:	4620      	mov	r0, r4
 800bb86:	9209      	str	r2, [sp, #36]	; 0x24
 800bb88:	f000 fa0c 	bl	800bfa4 <_Bfree>
 800bb8c:	9b07      	ldr	r3, [sp, #28]
 800bb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb90:	9d04      	ldr	r5, [sp, #16]
 800bb92:	ea43 0102 	orr.w	r1, r3, r2
 800bb96:	9b06      	ldr	r3, [sp, #24]
 800bb98:	4319      	orrs	r1, r3
 800bb9a:	d110      	bne.n	800bbbe <_dtoa_r+0xa7e>
 800bb9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bba0:	d029      	beq.n	800bbf6 <_dtoa_r+0xab6>
 800bba2:	9b05      	ldr	r3, [sp, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	dd02      	ble.n	800bbae <_dtoa_r+0xa6e>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	f883 9000 	strb.w	r9, [r3]
 800bbb4:	e774      	b.n	800baa0 <_dtoa_r+0x960>
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	e7ba      	b.n	800bb30 <_dtoa_r+0x9f0>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	e7e1      	b.n	800bb82 <_dtoa_r+0xa42>
 800bbbe:	9b05      	ldr	r3, [sp, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db04      	blt.n	800bbce <_dtoa_r+0xa8e>
 800bbc4:	9907      	ldr	r1, [sp, #28]
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	9906      	ldr	r1, [sp, #24]
 800bbca:	430b      	orrs	r3, r1
 800bbcc:	d120      	bne.n	800bc10 <_dtoa_r+0xad0>
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	dded      	ble.n	800bbae <_dtoa_r+0xa6e>
 800bbd2:	4651      	mov	r1, sl
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 fbb4 	bl	800c344 <__lshift>
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4682      	mov	sl, r0
 800bbe0:	f000 fc1c 	bl	800c41c <__mcmp>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	dc03      	bgt.n	800bbf0 <_dtoa_r+0xab0>
 800bbe8:	d1e1      	bne.n	800bbae <_dtoa_r+0xa6e>
 800bbea:	f019 0f01 	tst.w	r9, #1
 800bbee:	d0de      	beq.n	800bbae <_dtoa_r+0xa6e>
 800bbf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bbf4:	d1d8      	bne.n	800bba8 <_dtoa_r+0xa68>
 800bbf6:	9a01      	ldr	r2, [sp, #4]
 800bbf8:	2339      	movs	r3, #57	; 0x39
 800bbfa:	7013      	strb	r3, [r2, #0]
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	461d      	mov	r5, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc06:	2a39      	cmp	r2, #57	; 0x39
 800bc08:	d06c      	beq.n	800bce4 <_dtoa_r+0xba4>
 800bc0a:	3201      	adds	r2, #1
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	e747      	b.n	800baa0 <_dtoa_r+0x960>
 800bc10:	2a00      	cmp	r2, #0
 800bc12:	dd07      	ble.n	800bc24 <_dtoa_r+0xae4>
 800bc14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc18:	d0ed      	beq.n	800bbf6 <_dtoa_r+0xab6>
 800bc1a:	9a01      	ldr	r2, [sp, #4]
 800bc1c:	f109 0301 	add.w	r3, r9, #1
 800bc20:	7013      	strb	r3, [r2, #0]
 800bc22:	e73d      	b.n	800baa0 <_dtoa_r+0x960>
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	9a08      	ldr	r2, [sp, #32]
 800bc28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d043      	beq.n	800bcb8 <_dtoa_r+0xb78>
 800bc30:	4651      	mov	r1, sl
 800bc32:	2300      	movs	r3, #0
 800bc34:	220a      	movs	r2, #10
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 f9d6 	bl	800bfe8 <__multadd>
 800bc3c:	45b8      	cmp	r8, r7
 800bc3e:	4682      	mov	sl, r0
 800bc40:	f04f 0300 	mov.w	r3, #0
 800bc44:	f04f 020a 	mov.w	r2, #10
 800bc48:	4641      	mov	r1, r8
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	d107      	bne.n	800bc5e <_dtoa_r+0xb1e>
 800bc4e:	f000 f9cb 	bl	800bfe8 <__multadd>
 800bc52:	4680      	mov	r8, r0
 800bc54:	4607      	mov	r7, r0
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	e775      	b.n	800bb4a <_dtoa_r+0xa0a>
 800bc5e:	f000 f9c3 	bl	800bfe8 <__multadd>
 800bc62:	4639      	mov	r1, r7
 800bc64:	4680      	mov	r8, r0
 800bc66:	2300      	movs	r3, #0
 800bc68:	220a      	movs	r2, #10
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f000 f9bc 	bl	800bfe8 <__multadd>
 800bc70:	4607      	mov	r7, r0
 800bc72:	e7f0      	b.n	800bc56 <_dtoa_r+0xb16>
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	9301      	str	r3, [sp, #4]
 800bc78:	9d00      	ldr	r5, [sp, #0]
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	f7ff f9d5 	bl	800b02c <quorem>
 800bc82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	f805 9b01 	strb.w	r9, [r5], #1
 800bc8c:	1aea      	subs	r2, r5, r3
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	4293      	cmp	r3, r2
 800bc92:	dd07      	ble.n	800bca4 <_dtoa_r+0xb64>
 800bc94:	4651      	mov	r1, sl
 800bc96:	2300      	movs	r3, #0
 800bc98:	220a      	movs	r2, #10
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f9a4 	bl	800bfe8 <__multadd>
 800bca0:	4682      	mov	sl, r0
 800bca2:	e7ea      	b.n	800bc7a <_dtoa_r+0xb3a>
 800bca4:	9b01      	ldr	r3, [sp, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfc8      	it	gt
 800bcaa:	461d      	movgt	r5, r3
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	bfd8      	it	le
 800bcb0:	2501      	movle	r5, #1
 800bcb2:	441d      	add	r5, r3
 800bcb4:	f04f 0800 	mov.w	r8, #0
 800bcb8:	4651      	mov	r1, sl
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f000 fb41 	bl	800c344 <__lshift>
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4682      	mov	sl, r0
 800bcc6:	f000 fba9 	bl	800c41c <__mcmp>
 800bcca:	2800      	cmp	r0, #0
 800bccc:	dc96      	bgt.n	800bbfc <_dtoa_r+0xabc>
 800bcce:	d102      	bne.n	800bcd6 <_dtoa_r+0xb96>
 800bcd0:	f019 0f01 	tst.w	r9, #1
 800bcd4:	d192      	bne.n	800bbfc <_dtoa_r+0xabc>
 800bcd6:	462b      	mov	r3, r5
 800bcd8:	461d      	mov	r5, r3
 800bcda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcde:	2a30      	cmp	r2, #48	; 0x30
 800bce0:	d0fa      	beq.n	800bcd8 <_dtoa_r+0xb98>
 800bce2:	e6dd      	b.n	800baa0 <_dtoa_r+0x960>
 800bce4:	9a00      	ldr	r2, [sp, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d189      	bne.n	800bbfe <_dtoa_r+0xabe>
 800bcea:	f10b 0b01 	add.w	fp, fp, #1
 800bcee:	2331      	movs	r3, #49	; 0x31
 800bcf0:	e796      	b.n	800bc20 <_dtoa_r+0xae0>
 800bcf2:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <_dtoa_r+0xbdc>)
 800bcf4:	f7ff ba99 	b.w	800b22a <_dtoa_r+0xea>
 800bcf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f47f aa6d 	bne.w	800b1da <_dtoa_r+0x9a>
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <_dtoa_r+0xbe0>)
 800bd02:	f7ff ba92 	b.w	800b22a <_dtoa_r+0xea>
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dcb5      	bgt.n	800bc78 <_dtoa_r+0xb38>
 800bd0c:	9b07      	ldr	r3, [sp, #28]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	f73f aeb1 	bgt.w	800ba76 <_dtoa_r+0x936>
 800bd14:	e7b0      	b.n	800bc78 <_dtoa_r+0xb38>
 800bd16:	bf00      	nop
 800bd18:	0800d2f4 	.word	0x0800d2f4
 800bd1c:	0800d254 	.word	0x0800d254
 800bd20:	0800d278 	.word	0x0800d278

0800bd24 <_free_r>:
 800bd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd26:	2900      	cmp	r1, #0
 800bd28:	d044      	beq.n	800bdb4 <_free_r+0x90>
 800bd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd2e:	9001      	str	r0, [sp, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f1a1 0404 	sub.w	r4, r1, #4
 800bd36:	bfb8      	it	lt
 800bd38:	18e4      	addlt	r4, r4, r3
 800bd3a:	f000 f8e7 	bl	800bf0c <__malloc_lock>
 800bd3e:	4a1e      	ldr	r2, [pc, #120]	; (800bdb8 <_free_r+0x94>)
 800bd40:	9801      	ldr	r0, [sp, #4]
 800bd42:	6813      	ldr	r3, [r2, #0]
 800bd44:	b933      	cbnz	r3, 800bd54 <_free_r+0x30>
 800bd46:	6063      	str	r3, [r4, #4]
 800bd48:	6014      	str	r4, [r2, #0]
 800bd4a:	b003      	add	sp, #12
 800bd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd50:	f000 b8e2 	b.w	800bf18 <__malloc_unlock>
 800bd54:	42a3      	cmp	r3, r4
 800bd56:	d908      	bls.n	800bd6a <_free_r+0x46>
 800bd58:	6825      	ldr	r5, [r4, #0]
 800bd5a:	1961      	adds	r1, r4, r5
 800bd5c:	428b      	cmp	r3, r1
 800bd5e:	bf01      	itttt	eq
 800bd60:	6819      	ldreq	r1, [r3, #0]
 800bd62:	685b      	ldreq	r3, [r3, #4]
 800bd64:	1949      	addeq	r1, r1, r5
 800bd66:	6021      	streq	r1, [r4, #0]
 800bd68:	e7ed      	b.n	800bd46 <_free_r+0x22>
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	b10b      	cbz	r3, 800bd74 <_free_r+0x50>
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	d9fa      	bls.n	800bd6a <_free_r+0x46>
 800bd74:	6811      	ldr	r1, [r2, #0]
 800bd76:	1855      	adds	r5, r2, r1
 800bd78:	42a5      	cmp	r5, r4
 800bd7a:	d10b      	bne.n	800bd94 <_free_r+0x70>
 800bd7c:	6824      	ldr	r4, [r4, #0]
 800bd7e:	4421      	add	r1, r4
 800bd80:	1854      	adds	r4, r2, r1
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	6011      	str	r1, [r2, #0]
 800bd86:	d1e0      	bne.n	800bd4a <_free_r+0x26>
 800bd88:	681c      	ldr	r4, [r3, #0]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	6053      	str	r3, [r2, #4]
 800bd8e:	440c      	add	r4, r1
 800bd90:	6014      	str	r4, [r2, #0]
 800bd92:	e7da      	b.n	800bd4a <_free_r+0x26>
 800bd94:	d902      	bls.n	800bd9c <_free_r+0x78>
 800bd96:	230c      	movs	r3, #12
 800bd98:	6003      	str	r3, [r0, #0]
 800bd9a:	e7d6      	b.n	800bd4a <_free_r+0x26>
 800bd9c:	6825      	ldr	r5, [r4, #0]
 800bd9e:	1961      	adds	r1, r4, r5
 800bda0:	428b      	cmp	r3, r1
 800bda2:	bf04      	itt	eq
 800bda4:	6819      	ldreq	r1, [r3, #0]
 800bda6:	685b      	ldreq	r3, [r3, #4]
 800bda8:	6063      	str	r3, [r4, #4]
 800bdaa:	bf04      	itt	eq
 800bdac:	1949      	addeq	r1, r1, r5
 800bdae:	6021      	streq	r1, [r4, #0]
 800bdb0:	6054      	str	r4, [r2, #4]
 800bdb2:	e7ca      	b.n	800bd4a <_free_r+0x26>
 800bdb4:	b003      	add	sp, #12
 800bdb6:	bd30      	pop	{r4, r5, pc}
 800bdb8:	2000e728 	.word	0x2000e728

0800bdbc <malloc>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <malloc+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f000 b823 	b.w	800be0c <_malloc_r>
 800bdc6:	bf00      	nop
 800bdc8:	200000f4 	.word	0x200000f4

0800bdcc <sbrk_aligned>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	4e0e      	ldr	r6, [pc, #56]	; (800be08 <sbrk_aligned+0x3c>)
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	6831      	ldr	r1, [r6, #0]
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	b911      	cbnz	r1, 800bdde <sbrk_aligned+0x12>
 800bdd8:	f001 f808 	bl	800cdec <_sbrk_r>
 800bddc:	6030      	str	r0, [r6, #0]
 800bdde:	4621      	mov	r1, r4
 800bde0:	4628      	mov	r0, r5
 800bde2:	f001 f803 	bl	800cdec <_sbrk_r>
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	d00a      	beq.n	800be00 <sbrk_aligned+0x34>
 800bdea:	1cc4      	adds	r4, r0, #3
 800bdec:	f024 0403 	bic.w	r4, r4, #3
 800bdf0:	42a0      	cmp	r0, r4
 800bdf2:	d007      	beq.n	800be04 <sbrk_aligned+0x38>
 800bdf4:	1a21      	subs	r1, r4, r0
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 fff8 	bl	800cdec <_sbrk_r>
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d101      	bne.n	800be04 <sbrk_aligned+0x38>
 800be00:	f04f 34ff 	mov.w	r4, #4294967295
 800be04:	4620      	mov	r0, r4
 800be06:	bd70      	pop	{r4, r5, r6, pc}
 800be08:	2000e72c 	.word	0x2000e72c

0800be0c <_malloc_r>:
 800be0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be10:	1ccd      	adds	r5, r1, #3
 800be12:	f025 0503 	bic.w	r5, r5, #3
 800be16:	3508      	adds	r5, #8
 800be18:	2d0c      	cmp	r5, #12
 800be1a:	bf38      	it	cc
 800be1c:	250c      	movcc	r5, #12
 800be1e:	2d00      	cmp	r5, #0
 800be20:	4607      	mov	r7, r0
 800be22:	db01      	blt.n	800be28 <_malloc_r+0x1c>
 800be24:	42a9      	cmp	r1, r5
 800be26:	d905      	bls.n	800be34 <_malloc_r+0x28>
 800be28:	230c      	movs	r3, #12
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	2600      	movs	r6, #0
 800be2e:	4630      	mov	r0, r6
 800be30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf08 <_malloc_r+0xfc>
 800be38:	f000 f868 	bl	800bf0c <__malloc_lock>
 800be3c:	f8d8 3000 	ldr.w	r3, [r8]
 800be40:	461c      	mov	r4, r3
 800be42:	bb5c      	cbnz	r4, 800be9c <_malloc_r+0x90>
 800be44:	4629      	mov	r1, r5
 800be46:	4638      	mov	r0, r7
 800be48:	f7ff ffc0 	bl	800bdcc <sbrk_aligned>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	4604      	mov	r4, r0
 800be50:	d155      	bne.n	800befe <_malloc_r+0xf2>
 800be52:	f8d8 4000 	ldr.w	r4, [r8]
 800be56:	4626      	mov	r6, r4
 800be58:	2e00      	cmp	r6, #0
 800be5a:	d145      	bne.n	800bee8 <_malloc_r+0xdc>
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	d048      	beq.n	800bef2 <_malloc_r+0xe6>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	4631      	mov	r1, r6
 800be64:	4638      	mov	r0, r7
 800be66:	eb04 0903 	add.w	r9, r4, r3
 800be6a:	f000 ffbf 	bl	800cdec <_sbrk_r>
 800be6e:	4581      	cmp	r9, r0
 800be70:	d13f      	bne.n	800bef2 <_malloc_r+0xe6>
 800be72:	6821      	ldr	r1, [r4, #0]
 800be74:	1a6d      	subs	r5, r5, r1
 800be76:	4629      	mov	r1, r5
 800be78:	4638      	mov	r0, r7
 800be7a:	f7ff ffa7 	bl	800bdcc <sbrk_aligned>
 800be7e:	3001      	adds	r0, #1
 800be80:	d037      	beq.n	800bef2 <_malloc_r+0xe6>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	442b      	add	r3, r5
 800be86:	6023      	str	r3, [r4, #0]
 800be88:	f8d8 3000 	ldr.w	r3, [r8]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d038      	beq.n	800bf02 <_malloc_r+0xf6>
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	42a2      	cmp	r2, r4
 800be94:	d12b      	bne.n	800beee <_malloc_r+0xe2>
 800be96:	2200      	movs	r2, #0
 800be98:	605a      	str	r2, [r3, #4]
 800be9a:	e00f      	b.n	800bebc <_malloc_r+0xb0>
 800be9c:	6822      	ldr	r2, [r4, #0]
 800be9e:	1b52      	subs	r2, r2, r5
 800bea0:	d41f      	bmi.n	800bee2 <_malloc_r+0xd6>
 800bea2:	2a0b      	cmp	r2, #11
 800bea4:	d917      	bls.n	800bed6 <_malloc_r+0xca>
 800bea6:	1961      	adds	r1, r4, r5
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	6025      	str	r5, [r4, #0]
 800beac:	bf18      	it	ne
 800beae:	6059      	strne	r1, [r3, #4]
 800beb0:	6863      	ldr	r3, [r4, #4]
 800beb2:	bf08      	it	eq
 800beb4:	f8c8 1000 	streq.w	r1, [r8]
 800beb8:	5162      	str	r2, [r4, r5]
 800beba:	604b      	str	r3, [r1, #4]
 800bebc:	4638      	mov	r0, r7
 800bebe:	f104 060b 	add.w	r6, r4, #11
 800bec2:	f000 f829 	bl	800bf18 <__malloc_unlock>
 800bec6:	f026 0607 	bic.w	r6, r6, #7
 800beca:	1d23      	adds	r3, r4, #4
 800becc:	1af2      	subs	r2, r6, r3
 800bece:	d0ae      	beq.n	800be2e <_malloc_r+0x22>
 800bed0:	1b9b      	subs	r3, r3, r6
 800bed2:	50a3      	str	r3, [r4, r2]
 800bed4:	e7ab      	b.n	800be2e <_malloc_r+0x22>
 800bed6:	42a3      	cmp	r3, r4
 800bed8:	6862      	ldr	r2, [r4, #4]
 800beda:	d1dd      	bne.n	800be98 <_malloc_r+0x8c>
 800bedc:	f8c8 2000 	str.w	r2, [r8]
 800bee0:	e7ec      	b.n	800bebc <_malloc_r+0xb0>
 800bee2:	4623      	mov	r3, r4
 800bee4:	6864      	ldr	r4, [r4, #4]
 800bee6:	e7ac      	b.n	800be42 <_malloc_r+0x36>
 800bee8:	4634      	mov	r4, r6
 800beea:	6876      	ldr	r6, [r6, #4]
 800beec:	e7b4      	b.n	800be58 <_malloc_r+0x4c>
 800beee:	4613      	mov	r3, r2
 800bef0:	e7cc      	b.n	800be8c <_malloc_r+0x80>
 800bef2:	230c      	movs	r3, #12
 800bef4:	603b      	str	r3, [r7, #0]
 800bef6:	4638      	mov	r0, r7
 800bef8:	f000 f80e 	bl	800bf18 <__malloc_unlock>
 800befc:	e797      	b.n	800be2e <_malloc_r+0x22>
 800befe:	6025      	str	r5, [r4, #0]
 800bf00:	e7dc      	b.n	800bebc <_malloc_r+0xb0>
 800bf02:	605b      	str	r3, [r3, #4]
 800bf04:	deff      	udf	#255	; 0xff
 800bf06:	bf00      	nop
 800bf08:	2000e728 	.word	0x2000e728

0800bf0c <__malloc_lock>:
 800bf0c:	4801      	ldr	r0, [pc, #4]	; (800bf14 <__malloc_lock+0x8>)
 800bf0e:	f7ff b875 	b.w	800affc <__retarget_lock_acquire_recursive>
 800bf12:	bf00      	nop
 800bf14:	2000e724 	.word	0x2000e724

0800bf18 <__malloc_unlock>:
 800bf18:	4801      	ldr	r0, [pc, #4]	; (800bf20 <__malloc_unlock+0x8>)
 800bf1a:	f7ff b870 	b.w	800affe <__retarget_lock_release_recursive>
 800bf1e:	bf00      	nop
 800bf20:	2000e724 	.word	0x2000e724

0800bf24 <_Balloc>:
 800bf24:	b570      	push	{r4, r5, r6, lr}
 800bf26:	69c6      	ldr	r6, [r0, #28]
 800bf28:	4604      	mov	r4, r0
 800bf2a:	460d      	mov	r5, r1
 800bf2c:	b976      	cbnz	r6, 800bf4c <_Balloc+0x28>
 800bf2e:	2010      	movs	r0, #16
 800bf30:	f7ff ff44 	bl	800bdbc <malloc>
 800bf34:	4602      	mov	r2, r0
 800bf36:	61e0      	str	r0, [r4, #28]
 800bf38:	b920      	cbnz	r0, 800bf44 <_Balloc+0x20>
 800bf3a:	4b18      	ldr	r3, [pc, #96]	; (800bf9c <_Balloc+0x78>)
 800bf3c:	4818      	ldr	r0, [pc, #96]	; (800bfa0 <_Balloc+0x7c>)
 800bf3e:	216b      	movs	r1, #107	; 0x6b
 800bf40:	f000 ff64 	bl	800ce0c <__assert_func>
 800bf44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf48:	6006      	str	r6, [r0, #0]
 800bf4a:	60c6      	str	r6, [r0, #12]
 800bf4c:	69e6      	ldr	r6, [r4, #28]
 800bf4e:	68f3      	ldr	r3, [r6, #12]
 800bf50:	b183      	cbz	r3, 800bf74 <_Balloc+0x50>
 800bf52:	69e3      	ldr	r3, [r4, #28]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf5a:	b9b8      	cbnz	r0, 800bf8c <_Balloc+0x68>
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	fa01 f605 	lsl.w	r6, r1, r5
 800bf62:	1d72      	adds	r2, r6, #5
 800bf64:	0092      	lsls	r2, r2, #2
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 ff6e 	bl	800ce48 <_calloc_r>
 800bf6c:	b160      	cbz	r0, 800bf88 <_Balloc+0x64>
 800bf6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf72:	e00e      	b.n	800bf92 <_Balloc+0x6e>
 800bf74:	2221      	movs	r2, #33	; 0x21
 800bf76:	2104      	movs	r1, #4
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 ff65 	bl	800ce48 <_calloc_r>
 800bf7e:	69e3      	ldr	r3, [r4, #28]
 800bf80:	60f0      	str	r0, [r6, #12]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e4      	bne.n	800bf52 <_Balloc+0x2e>
 800bf88:	2000      	movs	r0, #0
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	6802      	ldr	r2, [r0, #0]
 800bf8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf92:	2300      	movs	r3, #0
 800bf94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf98:	e7f7      	b.n	800bf8a <_Balloc+0x66>
 800bf9a:	bf00      	nop
 800bf9c:	0800d285 	.word	0x0800d285
 800bfa0:	0800d305 	.word	0x0800d305

0800bfa4 <_Bfree>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	69c6      	ldr	r6, [r0, #28]
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	b976      	cbnz	r6, 800bfcc <_Bfree+0x28>
 800bfae:	2010      	movs	r0, #16
 800bfb0:	f7ff ff04 	bl	800bdbc <malloc>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	61e8      	str	r0, [r5, #28]
 800bfb8:	b920      	cbnz	r0, 800bfc4 <_Bfree+0x20>
 800bfba:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <_Bfree+0x3c>)
 800bfbc:	4809      	ldr	r0, [pc, #36]	; (800bfe4 <_Bfree+0x40>)
 800bfbe:	218f      	movs	r1, #143	; 0x8f
 800bfc0:	f000 ff24 	bl	800ce0c <__assert_func>
 800bfc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfc8:	6006      	str	r6, [r0, #0]
 800bfca:	60c6      	str	r6, [r0, #12]
 800bfcc:	b13c      	cbz	r4, 800bfde <_Bfree+0x3a>
 800bfce:	69eb      	ldr	r3, [r5, #28]
 800bfd0:	6862      	ldr	r2, [r4, #4]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfd8:	6021      	str	r1, [r4, #0]
 800bfda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	0800d285 	.word	0x0800d285
 800bfe4:	0800d305 	.word	0x0800d305

0800bfe8 <__multadd>:
 800bfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfec:	690d      	ldr	r5, [r1, #16]
 800bfee:	4607      	mov	r7, r0
 800bff0:	460c      	mov	r4, r1
 800bff2:	461e      	mov	r6, r3
 800bff4:	f101 0c14 	add.w	ip, r1, #20
 800bff8:	2000      	movs	r0, #0
 800bffa:	f8dc 3000 	ldr.w	r3, [ip]
 800bffe:	b299      	uxth	r1, r3
 800c000:	fb02 6101 	mla	r1, r2, r1, r6
 800c004:	0c1e      	lsrs	r6, r3, #16
 800c006:	0c0b      	lsrs	r3, r1, #16
 800c008:	fb02 3306 	mla	r3, r2, r6, r3
 800c00c:	b289      	uxth	r1, r1
 800c00e:	3001      	adds	r0, #1
 800c010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c014:	4285      	cmp	r5, r0
 800c016:	f84c 1b04 	str.w	r1, [ip], #4
 800c01a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c01e:	dcec      	bgt.n	800bffa <__multadd+0x12>
 800c020:	b30e      	cbz	r6, 800c066 <__multadd+0x7e>
 800c022:	68a3      	ldr	r3, [r4, #8]
 800c024:	42ab      	cmp	r3, r5
 800c026:	dc19      	bgt.n	800c05c <__multadd+0x74>
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	4638      	mov	r0, r7
 800c02c:	3101      	adds	r1, #1
 800c02e:	f7ff ff79 	bl	800bf24 <_Balloc>
 800c032:	4680      	mov	r8, r0
 800c034:	b928      	cbnz	r0, 800c042 <__multadd+0x5a>
 800c036:	4602      	mov	r2, r0
 800c038:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <__multadd+0x84>)
 800c03a:	480d      	ldr	r0, [pc, #52]	; (800c070 <__multadd+0x88>)
 800c03c:	21ba      	movs	r1, #186	; 0xba
 800c03e:	f000 fee5 	bl	800ce0c <__assert_func>
 800c042:	6922      	ldr	r2, [r4, #16]
 800c044:	3202      	adds	r2, #2
 800c046:	f104 010c 	add.w	r1, r4, #12
 800c04a:	0092      	lsls	r2, r2, #2
 800c04c:	300c      	adds	r0, #12
 800c04e:	f7fe ffdf 	bl	800b010 <memcpy>
 800c052:	4621      	mov	r1, r4
 800c054:	4638      	mov	r0, r7
 800c056:	f7ff ffa5 	bl	800bfa4 <_Bfree>
 800c05a:	4644      	mov	r4, r8
 800c05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c060:	3501      	adds	r5, #1
 800c062:	615e      	str	r6, [r3, #20]
 800c064:	6125      	str	r5, [r4, #16]
 800c066:	4620      	mov	r0, r4
 800c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06c:	0800d2f4 	.word	0x0800d2f4
 800c070:	0800d305 	.word	0x0800d305

0800c074 <__hi0bits>:
 800c074:	0c03      	lsrs	r3, r0, #16
 800c076:	041b      	lsls	r3, r3, #16
 800c078:	b9d3      	cbnz	r3, 800c0b0 <__hi0bits+0x3c>
 800c07a:	0400      	lsls	r0, r0, #16
 800c07c:	2310      	movs	r3, #16
 800c07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c082:	bf04      	itt	eq
 800c084:	0200      	lsleq	r0, r0, #8
 800c086:	3308      	addeq	r3, #8
 800c088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c08c:	bf04      	itt	eq
 800c08e:	0100      	lsleq	r0, r0, #4
 800c090:	3304      	addeq	r3, #4
 800c092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c096:	bf04      	itt	eq
 800c098:	0080      	lsleq	r0, r0, #2
 800c09a:	3302      	addeq	r3, #2
 800c09c:	2800      	cmp	r0, #0
 800c09e:	db05      	blt.n	800c0ac <__hi0bits+0x38>
 800c0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0a4:	f103 0301 	add.w	r3, r3, #1
 800c0a8:	bf08      	it	eq
 800c0aa:	2320      	moveq	r3, #32
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	4770      	bx	lr
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	e7e4      	b.n	800c07e <__hi0bits+0xa>

0800c0b4 <__lo0bits>:
 800c0b4:	6803      	ldr	r3, [r0, #0]
 800c0b6:	f013 0207 	ands.w	r2, r3, #7
 800c0ba:	d00c      	beq.n	800c0d6 <__lo0bits+0x22>
 800c0bc:	07d9      	lsls	r1, r3, #31
 800c0be:	d422      	bmi.n	800c106 <__lo0bits+0x52>
 800c0c0:	079a      	lsls	r2, r3, #30
 800c0c2:	bf49      	itett	mi
 800c0c4:	085b      	lsrmi	r3, r3, #1
 800c0c6:	089b      	lsrpl	r3, r3, #2
 800c0c8:	6003      	strmi	r3, [r0, #0]
 800c0ca:	2201      	movmi	r2, #1
 800c0cc:	bf5c      	itt	pl
 800c0ce:	6003      	strpl	r3, [r0, #0]
 800c0d0:	2202      	movpl	r2, #2
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	4770      	bx	lr
 800c0d6:	b299      	uxth	r1, r3
 800c0d8:	b909      	cbnz	r1, 800c0de <__lo0bits+0x2a>
 800c0da:	0c1b      	lsrs	r3, r3, #16
 800c0dc:	2210      	movs	r2, #16
 800c0de:	b2d9      	uxtb	r1, r3
 800c0e0:	b909      	cbnz	r1, 800c0e6 <__lo0bits+0x32>
 800c0e2:	3208      	adds	r2, #8
 800c0e4:	0a1b      	lsrs	r3, r3, #8
 800c0e6:	0719      	lsls	r1, r3, #28
 800c0e8:	bf04      	itt	eq
 800c0ea:	091b      	lsreq	r3, r3, #4
 800c0ec:	3204      	addeq	r2, #4
 800c0ee:	0799      	lsls	r1, r3, #30
 800c0f0:	bf04      	itt	eq
 800c0f2:	089b      	lsreq	r3, r3, #2
 800c0f4:	3202      	addeq	r2, #2
 800c0f6:	07d9      	lsls	r1, r3, #31
 800c0f8:	d403      	bmi.n	800c102 <__lo0bits+0x4e>
 800c0fa:	085b      	lsrs	r3, r3, #1
 800c0fc:	f102 0201 	add.w	r2, r2, #1
 800c100:	d003      	beq.n	800c10a <__lo0bits+0x56>
 800c102:	6003      	str	r3, [r0, #0]
 800c104:	e7e5      	b.n	800c0d2 <__lo0bits+0x1e>
 800c106:	2200      	movs	r2, #0
 800c108:	e7e3      	b.n	800c0d2 <__lo0bits+0x1e>
 800c10a:	2220      	movs	r2, #32
 800c10c:	e7e1      	b.n	800c0d2 <__lo0bits+0x1e>
	...

0800c110 <__i2b>:
 800c110:	b510      	push	{r4, lr}
 800c112:	460c      	mov	r4, r1
 800c114:	2101      	movs	r1, #1
 800c116:	f7ff ff05 	bl	800bf24 <_Balloc>
 800c11a:	4602      	mov	r2, r0
 800c11c:	b928      	cbnz	r0, 800c12a <__i2b+0x1a>
 800c11e:	4b05      	ldr	r3, [pc, #20]	; (800c134 <__i2b+0x24>)
 800c120:	4805      	ldr	r0, [pc, #20]	; (800c138 <__i2b+0x28>)
 800c122:	f240 1145 	movw	r1, #325	; 0x145
 800c126:	f000 fe71 	bl	800ce0c <__assert_func>
 800c12a:	2301      	movs	r3, #1
 800c12c:	6144      	str	r4, [r0, #20]
 800c12e:	6103      	str	r3, [r0, #16]
 800c130:	bd10      	pop	{r4, pc}
 800c132:	bf00      	nop
 800c134:	0800d2f4 	.word	0x0800d2f4
 800c138:	0800d305 	.word	0x0800d305

0800c13c <__multiply>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	4691      	mov	r9, r2
 800c142:	690a      	ldr	r2, [r1, #16]
 800c144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c148:	429a      	cmp	r2, r3
 800c14a:	bfb8      	it	lt
 800c14c:	460b      	movlt	r3, r1
 800c14e:	460c      	mov	r4, r1
 800c150:	bfbc      	itt	lt
 800c152:	464c      	movlt	r4, r9
 800c154:	4699      	movlt	r9, r3
 800c156:	6927      	ldr	r7, [r4, #16]
 800c158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c15c:	68a3      	ldr	r3, [r4, #8]
 800c15e:	6861      	ldr	r1, [r4, #4]
 800c160:	eb07 060a 	add.w	r6, r7, sl
 800c164:	42b3      	cmp	r3, r6
 800c166:	b085      	sub	sp, #20
 800c168:	bfb8      	it	lt
 800c16a:	3101      	addlt	r1, #1
 800c16c:	f7ff feda 	bl	800bf24 <_Balloc>
 800c170:	b930      	cbnz	r0, 800c180 <__multiply+0x44>
 800c172:	4602      	mov	r2, r0
 800c174:	4b44      	ldr	r3, [pc, #272]	; (800c288 <__multiply+0x14c>)
 800c176:	4845      	ldr	r0, [pc, #276]	; (800c28c <__multiply+0x150>)
 800c178:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c17c:	f000 fe46 	bl	800ce0c <__assert_func>
 800c180:	f100 0514 	add.w	r5, r0, #20
 800c184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c188:	462b      	mov	r3, r5
 800c18a:	2200      	movs	r2, #0
 800c18c:	4543      	cmp	r3, r8
 800c18e:	d321      	bcc.n	800c1d4 <__multiply+0x98>
 800c190:	f104 0314 	add.w	r3, r4, #20
 800c194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c198:	f109 0314 	add.w	r3, r9, #20
 800c19c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1a0:	9202      	str	r2, [sp, #8]
 800c1a2:	1b3a      	subs	r2, r7, r4
 800c1a4:	3a15      	subs	r2, #21
 800c1a6:	f022 0203 	bic.w	r2, r2, #3
 800c1aa:	3204      	adds	r2, #4
 800c1ac:	f104 0115 	add.w	r1, r4, #21
 800c1b0:	428f      	cmp	r7, r1
 800c1b2:	bf38      	it	cc
 800c1b4:	2204      	movcc	r2, #4
 800c1b6:	9201      	str	r2, [sp, #4]
 800c1b8:	9a02      	ldr	r2, [sp, #8]
 800c1ba:	9303      	str	r3, [sp, #12]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d80c      	bhi.n	800c1da <__multiply+0x9e>
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	dd03      	ble.n	800c1cc <__multiply+0x90>
 800c1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d05b      	beq.n	800c284 <__multiply+0x148>
 800c1cc:	6106      	str	r6, [r0, #16]
 800c1ce:	b005      	add	sp, #20
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	f843 2b04 	str.w	r2, [r3], #4
 800c1d8:	e7d8      	b.n	800c18c <__multiply+0x50>
 800c1da:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1de:	f1ba 0f00 	cmp.w	sl, #0
 800c1e2:	d024      	beq.n	800c22e <__multiply+0xf2>
 800c1e4:	f104 0e14 	add.w	lr, r4, #20
 800c1e8:	46a9      	mov	r9, r5
 800c1ea:	f04f 0c00 	mov.w	ip, #0
 800c1ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1f2:	f8d9 1000 	ldr.w	r1, [r9]
 800c1f6:	fa1f fb82 	uxth.w	fp, r2
 800c1fa:	b289      	uxth	r1, r1
 800c1fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c204:	f8d9 2000 	ldr.w	r2, [r9]
 800c208:	4461      	add	r1, ip
 800c20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c20e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c216:	b289      	uxth	r1, r1
 800c218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c21c:	4577      	cmp	r7, lr
 800c21e:	f849 1b04 	str.w	r1, [r9], #4
 800c222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c226:	d8e2      	bhi.n	800c1ee <__multiply+0xb2>
 800c228:	9a01      	ldr	r2, [sp, #4]
 800c22a:	f845 c002 	str.w	ip, [r5, r2]
 800c22e:	9a03      	ldr	r2, [sp, #12]
 800c230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c234:	3304      	adds	r3, #4
 800c236:	f1b9 0f00 	cmp.w	r9, #0
 800c23a:	d021      	beq.n	800c280 <__multiply+0x144>
 800c23c:	6829      	ldr	r1, [r5, #0]
 800c23e:	f104 0c14 	add.w	ip, r4, #20
 800c242:	46ae      	mov	lr, r5
 800c244:	f04f 0a00 	mov.w	sl, #0
 800c248:	f8bc b000 	ldrh.w	fp, [ip]
 800c24c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c250:	fb09 220b 	mla	r2, r9, fp, r2
 800c254:	4452      	add	r2, sl
 800c256:	b289      	uxth	r1, r1
 800c258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c25c:	f84e 1b04 	str.w	r1, [lr], #4
 800c260:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c268:	f8be 1000 	ldrh.w	r1, [lr]
 800c26c:	fb09 110a 	mla	r1, r9, sl, r1
 800c270:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c274:	4567      	cmp	r7, ip
 800c276:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c27a:	d8e5      	bhi.n	800c248 <__multiply+0x10c>
 800c27c:	9a01      	ldr	r2, [sp, #4]
 800c27e:	50a9      	str	r1, [r5, r2]
 800c280:	3504      	adds	r5, #4
 800c282:	e799      	b.n	800c1b8 <__multiply+0x7c>
 800c284:	3e01      	subs	r6, #1
 800c286:	e79b      	b.n	800c1c0 <__multiply+0x84>
 800c288:	0800d2f4 	.word	0x0800d2f4
 800c28c:	0800d305 	.word	0x0800d305

0800c290 <__pow5mult>:
 800c290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c294:	4615      	mov	r5, r2
 800c296:	f012 0203 	ands.w	r2, r2, #3
 800c29a:	4606      	mov	r6, r0
 800c29c:	460f      	mov	r7, r1
 800c29e:	d007      	beq.n	800c2b0 <__pow5mult+0x20>
 800c2a0:	4c25      	ldr	r4, [pc, #148]	; (800c338 <__pow5mult+0xa8>)
 800c2a2:	3a01      	subs	r2, #1
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2aa:	f7ff fe9d 	bl	800bfe8 <__multadd>
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	10ad      	asrs	r5, r5, #2
 800c2b2:	d03d      	beq.n	800c330 <__pow5mult+0xa0>
 800c2b4:	69f4      	ldr	r4, [r6, #28]
 800c2b6:	b97c      	cbnz	r4, 800c2d8 <__pow5mult+0x48>
 800c2b8:	2010      	movs	r0, #16
 800c2ba:	f7ff fd7f 	bl	800bdbc <malloc>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	61f0      	str	r0, [r6, #28]
 800c2c2:	b928      	cbnz	r0, 800c2d0 <__pow5mult+0x40>
 800c2c4:	4b1d      	ldr	r3, [pc, #116]	; (800c33c <__pow5mult+0xac>)
 800c2c6:	481e      	ldr	r0, [pc, #120]	; (800c340 <__pow5mult+0xb0>)
 800c2c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c2cc:	f000 fd9e 	bl	800ce0c <__assert_func>
 800c2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2d4:	6004      	str	r4, [r0, #0]
 800c2d6:	60c4      	str	r4, [r0, #12]
 800c2d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2e0:	b94c      	cbnz	r4, 800c2f6 <__pow5mult+0x66>
 800c2e2:	f240 2171 	movw	r1, #625	; 0x271
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7ff ff12 	bl	800c110 <__i2b>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	6003      	str	r3, [r0, #0]
 800c2f6:	f04f 0900 	mov.w	r9, #0
 800c2fa:	07eb      	lsls	r3, r5, #31
 800c2fc:	d50a      	bpl.n	800c314 <__pow5mult+0x84>
 800c2fe:	4639      	mov	r1, r7
 800c300:	4622      	mov	r2, r4
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ff1a 	bl	800c13c <__multiply>
 800c308:	4639      	mov	r1, r7
 800c30a:	4680      	mov	r8, r0
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7ff fe49 	bl	800bfa4 <_Bfree>
 800c312:	4647      	mov	r7, r8
 800c314:	106d      	asrs	r5, r5, #1
 800c316:	d00b      	beq.n	800c330 <__pow5mult+0xa0>
 800c318:	6820      	ldr	r0, [r4, #0]
 800c31a:	b938      	cbnz	r0, 800c32c <__pow5mult+0x9c>
 800c31c:	4622      	mov	r2, r4
 800c31e:	4621      	mov	r1, r4
 800c320:	4630      	mov	r0, r6
 800c322:	f7ff ff0b 	bl	800c13c <__multiply>
 800c326:	6020      	str	r0, [r4, #0]
 800c328:	f8c0 9000 	str.w	r9, [r0]
 800c32c:	4604      	mov	r4, r0
 800c32e:	e7e4      	b.n	800c2fa <__pow5mult+0x6a>
 800c330:	4638      	mov	r0, r7
 800c332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c336:	bf00      	nop
 800c338:	0800d450 	.word	0x0800d450
 800c33c:	0800d285 	.word	0x0800d285
 800c340:	0800d305 	.word	0x0800d305

0800c344 <__lshift>:
 800c344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c348:	460c      	mov	r4, r1
 800c34a:	6849      	ldr	r1, [r1, #4]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	4607      	mov	r7, r0
 800c356:	4691      	mov	r9, r2
 800c358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c35c:	f108 0601 	add.w	r6, r8, #1
 800c360:	42b3      	cmp	r3, r6
 800c362:	db0b      	blt.n	800c37c <__lshift+0x38>
 800c364:	4638      	mov	r0, r7
 800c366:	f7ff fddd 	bl	800bf24 <_Balloc>
 800c36a:	4605      	mov	r5, r0
 800c36c:	b948      	cbnz	r0, 800c382 <__lshift+0x3e>
 800c36e:	4602      	mov	r2, r0
 800c370:	4b28      	ldr	r3, [pc, #160]	; (800c414 <__lshift+0xd0>)
 800c372:	4829      	ldr	r0, [pc, #164]	; (800c418 <__lshift+0xd4>)
 800c374:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c378:	f000 fd48 	bl	800ce0c <__assert_func>
 800c37c:	3101      	adds	r1, #1
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	e7ee      	b.n	800c360 <__lshift+0x1c>
 800c382:	2300      	movs	r3, #0
 800c384:	f100 0114 	add.w	r1, r0, #20
 800c388:	f100 0210 	add.w	r2, r0, #16
 800c38c:	4618      	mov	r0, r3
 800c38e:	4553      	cmp	r3, sl
 800c390:	db33      	blt.n	800c3fa <__lshift+0xb6>
 800c392:	6920      	ldr	r0, [r4, #16]
 800c394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c398:	f104 0314 	add.w	r3, r4, #20
 800c39c:	f019 091f 	ands.w	r9, r9, #31
 800c3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3a8:	d02b      	beq.n	800c402 <__lshift+0xbe>
 800c3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800c3ae:	468a      	mov	sl, r1
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	6818      	ldr	r0, [r3, #0]
 800c3b4:	fa00 f009 	lsl.w	r0, r0, r9
 800c3b8:	4310      	orrs	r0, r2
 800c3ba:	f84a 0b04 	str.w	r0, [sl], #4
 800c3be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c2:	459c      	cmp	ip, r3
 800c3c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3c8:	d8f3      	bhi.n	800c3b2 <__lshift+0x6e>
 800c3ca:	ebac 0304 	sub.w	r3, ip, r4
 800c3ce:	3b15      	subs	r3, #21
 800c3d0:	f023 0303 	bic.w	r3, r3, #3
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	f104 0015 	add.w	r0, r4, #21
 800c3da:	4584      	cmp	ip, r0
 800c3dc:	bf38      	it	cc
 800c3de:	2304      	movcc	r3, #4
 800c3e0:	50ca      	str	r2, [r1, r3]
 800c3e2:	b10a      	cbz	r2, 800c3e8 <__lshift+0xa4>
 800c3e4:	f108 0602 	add.w	r6, r8, #2
 800c3e8:	3e01      	subs	r6, #1
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	612e      	str	r6, [r5, #16]
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	f7ff fdd8 	bl	800bfa4 <_Bfree>
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3fe:	3301      	adds	r3, #1
 800c400:	e7c5      	b.n	800c38e <__lshift+0x4a>
 800c402:	3904      	subs	r1, #4
 800c404:	f853 2b04 	ldr.w	r2, [r3], #4
 800c408:	f841 2f04 	str.w	r2, [r1, #4]!
 800c40c:	459c      	cmp	ip, r3
 800c40e:	d8f9      	bhi.n	800c404 <__lshift+0xc0>
 800c410:	e7ea      	b.n	800c3e8 <__lshift+0xa4>
 800c412:	bf00      	nop
 800c414:	0800d2f4 	.word	0x0800d2f4
 800c418:	0800d305 	.word	0x0800d305

0800c41c <__mcmp>:
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	6902      	ldr	r2, [r0, #16]
 800c420:	690c      	ldr	r4, [r1, #16]
 800c422:	1b12      	subs	r2, r2, r4
 800c424:	d10e      	bne.n	800c444 <__mcmp+0x28>
 800c426:	f100 0314 	add.w	r3, r0, #20
 800c42a:	3114      	adds	r1, #20
 800c42c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c430:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c434:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c438:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c43c:	42a5      	cmp	r5, r4
 800c43e:	d003      	beq.n	800c448 <__mcmp+0x2c>
 800c440:	d305      	bcc.n	800c44e <__mcmp+0x32>
 800c442:	2201      	movs	r2, #1
 800c444:	4610      	mov	r0, r2
 800c446:	bd30      	pop	{r4, r5, pc}
 800c448:	4283      	cmp	r3, r0
 800c44a:	d3f3      	bcc.n	800c434 <__mcmp+0x18>
 800c44c:	e7fa      	b.n	800c444 <__mcmp+0x28>
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295
 800c452:	e7f7      	b.n	800c444 <__mcmp+0x28>

0800c454 <__mdiff>:
 800c454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	460c      	mov	r4, r1
 800c45a:	4606      	mov	r6, r0
 800c45c:	4611      	mov	r1, r2
 800c45e:	4620      	mov	r0, r4
 800c460:	4690      	mov	r8, r2
 800c462:	f7ff ffdb 	bl	800c41c <__mcmp>
 800c466:	1e05      	subs	r5, r0, #0
 800c468:	d110      	bne.n	800c48c <__mdiff+0x38>
 800c46a:	4629      	mov	r1, r5
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff fd59 	bl	800bf24 <_Balloc>
 800c472:	b930      	cbnz	r0, 800c482 <__mdiff+0x2e>
 800c474:	4b3a      	ldr	r3, [pc, #232]	; (800c560 <__mdiff+0x10c>)
 800c476:	4602      	mov	r2, r0
 800c478:	f240 2137 	movw	r1, #567	; 0x237
 800c47c:	4839      	ldr	r0, [pc, #228]	; (800c564 <__mdiff+0x110>)
 800c47e:	f000 fcc5 	bl	800ce0c <__assert_func>
 800c482:	2301      	movs	r3, #1
 800c484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c48c:	bfa4      	itt	ge
 800c48e:	4643      	movge	r3, r8
 800c490:	46a0      	movge	r8, r4
 800c492:	4630      	mov	r0, r6
 800c494:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c498:	bfa6      	itte	ge
 800c49a:	461c      	movge	r4, r3
 800c49c:	2500      	movge	r5, #0
 800c49e:	2501      	movlt	r5, #1
 800c4a0:	f7ff fd40 	bl	800bf24 <_Balloc>
 800c4a4:	b920      	cbnz	r0, 800c4b0 <__mdiff+0x5c>
 800c4a6:	4b2e      	ldr	r3, [pc, #184]	; (800c560 <__mdiff+0x10c>)
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	f240 2145 	movw	r1, #581	; 0x245
 800c4ae:	e7e5      	b.n	800c47c <__mdiff+0x28>
 800c4b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4b4:	6926      	ldr	r6, [r4, #16]
 800c4b6:	60c5      	str	r5, [r0, #12]
 800c4b8:	f104 0914 	add.w	r9, r4, #20
 800c4bc:	f108 0514 	add.w	r5, r8, #20
 800c4c0:	f100 0e14 	add.w	lr, r0, #20
 800c4c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4cc:	f108 0210 	add.w	r2, r8, #16
 800c4d0:	46f2      	mov	sl, lr
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4dc:	fa11 f88b 	uxtah	r8, r1, fp
 800c4e0:	b299      	uxth	r1, r3
 800c4e2:	0c1b      	lsrs	r3, r3, #16
 800c4e4:	eba8 0801 	sub.w	r8, r8, r1
 800c4e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4f0:	fa1f f888 	uxth.w	r8, r8
 800c4f4:	1419      	asrs	r1, r3, #16
 800c4f6:	454e      	cmp	r6, r9
 800c4f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4fc:	f84a 3b04 	str.w	r3, [sl], #4
 800c500:	d8e8      	bhi.n	800c4d4 <__mdiff+0x80>
 800c502:	1b33      	subs	r3, r6, r4
 800c504:	3b15      	subs	r3, #21
 800c506:	f023 0303 	bic.w	r3, r3, #3
 800c50a:	3304      	adds	r3, #4
 800c50c:	3415      	adds	r4, #21
 800c50e:	42a6      	cmp	r6, r4
 800c510:	bf38      	it	cc
 800c512:	2304      	movcc	r3, #4
 800c514:	441d      	add	r5, r3
 800c516:	4473      	add	r3, lr
 800c518:	469e      	mov	lr, r3
 800c51a:	462e      	mov	r6, r5
 800c51c:	4566      	cmp	r6, ip
 800c51e:	d30e      	bcc.n	800c53e <__mdiff+0xea>
 800c520:	f10c 0203 	add.w	r2, ip, #3
 800c524:	1b52      	subs	r2, r2, r5
 800c526:	f022 0203 	bic.w	r2, r2, #3
 800c52a:	3d03      	subs	r5, #3
 800c52c:	45ac      	cmp	ip, r5
 800c52e:	bf38      	it	cc
 800c530:	2200      	movcc	r2, #0
 800c532:	4413      	add	r3, r2
 800c534:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c538:	b17a      	cbz	r2, 800c55a <__mdiff+0x106>
 800c53a:	6107      	str	r7, [r0, #16]
 800c53c:	e7a4      	b.n	800c488 <__mdiff+0x34>
 800c53e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c542:	fa11 f288 	uxtah	r2, r1, r8
 800c546:	1414      	asrs	r4, r2, #16
 800c548:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c54c:	b292      	uxth	r2, r2
 800c54e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c552:	f84e 2b04 	str.w	r2, [lr], #4
 800c556:	1421      	asrs	r1, r4, #16
 800c558:	e7e0      	b.n	800c51c <__mdiff+0xc8>
 800c55a:	3f01      	subs	r7, #1
 800c55c:	e7ea      	b.n	800c534 <__mdiff+0xe0>
 800c55e:	bf00      	nop
 800c560:	0800d2f4 	.word	0x0800d2f4
 800c564:	0800d305 	.word	0x0800d305

0800c568 <__d2b>:
 800c568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	460f      	mov	r7, r1
 800c56e:	2101      	movs	r1, #1
 800c570:	ec59 8b10 	vmov	r8, r9, d0
 800c574:	4616      	mov	r6, r2
 800c576:	f7ff fcd5 	bl	800bf24 <_Balloc>
 800c57a:	4604      	mov	r4, r0
 800c57c:	b930      	cbnz	r0, 800c58c <__d2b+0x24>
 800c57e:	4602      	mov	r2, r0
 800c580:	4b24      	ldr	r3, [pc, #144]	; (800c614 <__d2b+0xac>)
 800c582:	4825      	ldr	r0, [pc, #148]	; (800c618 <__d2b+0xb0>)
 800c584:	f240 310f 	movw	r1, #783	; 0x30f
 800c588:	f000 fc40 	bl	800ce0c <__assert_func>
 800c58c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c590:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c594:	bb2d      	cbnz	r5, 800c5e2 <__d2b+0x7a>
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f1b8 0300 	subs.w	r3, r8, #0
 800c59c:	d026      	beq.n	800c5ec <__d2b+0x84>
 800c59e:	4668      	mov	r0, sp
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	f7ff fd87 	bl	800c0b4 <__lo0bits>
 800c5a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5aa:	b1e8      	cbz	r0, 800c5e8 <__d2b+0x80>
 800c5ac:	f1c0 0320 	rsb	r3, r0, #32
 800c5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b4:	430b      	orrs	r3, r1
 800c5b6:	40c2      	lsrs	r2, r0
 800c5b8:	6163      	str	r3, [r4, #20]
 800c5ba:	9201      	str	r2, [sp, #4]
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	61a3      	str	r3, [r4, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	bf14      	ite	ne
 800c5c4:	2202      	movne	r2, #2
 800c5c6:	2201      	moveq	r2, #1
 800c5c8:	6122      	str	r2, [r4, #16]
 800c5ca:	b1bd      	cbz	r5, 800c5fc <__d2b+0x94>
 800c5cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5d0:	4405      	add	r5, r0
 800c5d2:	603d      	str	r5, [r7, #0]
 800c5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5d8:	6030      	str	r0, [r6, #0]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	b003      	add	sp, #12
 800c5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5e6:	e7d6      	b.n	800c596 <__d2b+0x2e>
 800c5e8:	6161      	str	r1, [r4, #20]
 800c5ea:	e7e7      	b.n	800c5bc <__d2b+0x54>
 800c5ec:	a801      	add	r0, sp, #4
 800c5ee:	f7ff fd61 	bl	800c0b4 <__lo0bits>
 800c5f2:	9b01      	ldr	r3, [sp, #4]
 800c5f4:	6163      	str	r3, [r4, #20]
 800c5f6:	3020      	adds	r0, #32
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	e7e5      	b.n	800c5c8 <__d2b+0x60>
 800c5fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c604:	6038      	str	r0, [r7, #0]
 800c606:	6918      	ldr	r0, [r3, #16]
 800c608:	f7ff fd34 	bl	800c074 <__hi0bits>
 800c60c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c610:	e7e2      	b.n	800c5d8 <__d2b+0x70>
 800c612:	bf00      	nop
 800c614:	0800d2f4 	.word	0x0800d2f4
 800c618:	0800d305 	.word	0x0800d305

0800c61c <__ssputs_r>:
 800c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	688e      	ldr	r6, [r1, #8]
 800c622:	461f      	mov	r7, r3
 800c624:	42be      	cmp	r6, r7
 800c626:	680b      	ldr	r3, [r1, #0]
 800c628:	4682      	mov	sl, r0
 800c62a:	460c      	mov	r4, r1
 800c62c:	4690      	mov	r8, r2
 800c62e:	d82c      	bhi.n	800c68a <__ssputs_r+0x6e>
 800c630:	898a      	ldrh	r2, [r1, #12]
 800c632:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c636:	d026      	beq.n	800c686 <__ssputs_r+0x6a>
 800c638:	6965      	ldr	r5, [r4, #20]
 800c63a:	6909      	ldr	r1, [r1, #16]
 800c63c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c640:	eba3 0901 	sub.w	r9, r3, r1
 800c644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c648:	1c7b      	adds	r3, r7, #1
 800c64a:	444b      	add	r3, r9
 800c64c:	106d      	asrs	r5, r5, #1
 800c64e:	429d      	cmp	r5, r3
 800c650:	bf38      	it	cc
 800c652:	461d      	movcc	r5, r3
 800c654:	0553      	lsls	r3, r2, #21
 800c656:	d527      	bpl.n	800c6a8 <__ssputs_r+0x8c>
 800c658:	4629      	mov	r1, r5
 800c65a:	f7ff fbd7 	bl	800be0c <_malloc_r>
 800c65e:	4606      	mov	r6, r0
 800c660:	b360      	cbz	r0, 800c6bc <__ssputs_r+0xa0>
 800c662:	6921      	ldr	r1, [r4, #16]
 800c664:	464a      	mov	r2, r9
 800c666:	f7fe fcd3 	bl	800b010 <memcpy>
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c674:	81a3      	strh	r3, [r4, #12]
 800c676:	6126      	str	r6, [r4, #16]
 800c678:	6165      	str	r5, [r4, #20]
 800c67a:	444e      	add	r6, r9
 800c67c:	eba5 0509 	sub.w	r5, r5, r9
 800c680:	6026      	str	r6, [r4, #0]
 800c682:	60a5      	str	r5, [r4, #8]
 800c684:	463e      	mov	r6, r7
 800c686:	42be      	cmp	r6, r7
 800c688:	d900      	bls.n	800c68c <__ssputs_r+0x70>
 800c68a:	463e      	mov	r6, r7
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	4632      	mov	r2, r6
 800c690:	4641      	mov	r1, r8
 800c692:	f000 fb6f 	bl	800cd74 <memmove>
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	1b9b      	subs	r3, r3, r6
 800c69a:	60a3      	str	r3, [r4, #8]
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	4433      	add	r3, r6
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a8:	462a      	mov	r2, r5
 800c6aa:	f000 fbf5 	bl	800ce98 <_realloc_r>
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d1e0      	bne.n	800c676 <__ssputs_r+0x5a>
 800c6b4:	6921      	ldr	r1, [r4, #16]
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	f7ff fb34 	bl	800bd24 <_free_r>
 800c6bc:	230c      	movs	r3, #12
 800c6be:	f8ca 3000 	str.w	r3, [sl]
 800c6c2:	89a3      	ldrh	r3, [r4, #12]
 800c6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6c8:	81a3      	strh	r3, [r4, #12]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	e7e9      	b.n	800c6a4 <__ssputs_r+0x88>

0800c6d0 <_svfiprintf_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	4698      	mov	r8, r3
 800c6d6:	898b      	ldrh	r3, [r1, #12]
 800c6d8:	061b      	lsls	r3, r3, #24
 800c6da:	b09d      	sub	sp, #116	; 0x74
 800c6dc:	4607      	mov	r7, r0
 800c6de:	460d      	mov	r5, r1
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	d50e      	bpl.n	800c702 <_svfiprintf_r+0x32>
 800c6e4:	690b      	ldr	r3, [r1, #16]
 800c6e6:	b963      	cbnz	r3, 800c702 <_svfiprintf_r+0x32>
 800c6e8:	2140      	movs	r1, #64	; 0x40
 800c6ea:	f7ff fb8f 	bl	800be0c <_malloc_r>
 800c6ee:	6028      	str	r0, [r5, #0]
 800c6f0:	6128      	str	r0, [r5, #16]
 800c6f2:	b920      	cbnz	r0, 800c6fe <_svfiprintf_r+0x2e>
 800c6f4:	230c      	movs	r3, #12
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fc:	e0d0      	b.n	800c8a0 <_svfiprintf_r+0x1d0>
 800c6fe:	2340      	movs	r3, #64	; 0x40
 800c700:	616b      	str	r3, [r5, #20]
 800c702:	2300      	movs	r3, #0
 800c704:	9309      	str	r3, [sp, #36]	; 0x24
 800c706:	2320      	movs	r3, #32
 800c708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c710:	2330      	movs	r3, #48	; 0x30
 800c712:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c8b8 <_svfiprintf_r+0x1e8>
 800c716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c71a:	f04f 0901 	mov.w	r9, #1
 800c71e:	4623      	mov	r3, r4
 800c720:	469a      	mov	sl, r3
 800c722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c726:	b10a      	cbz	r2, 800c72c <_svfiprintf_r+0x5c>
 800c728:	2a25      	cmp	r2, #37	; 0x25
 800c72a:	d1f9      	bne.n	800c720 <_svfiprintf_r+0x50>
 800c72c:	ebba 0b04 	subs.w	fp, sl, r4
 800c730:	d00b      	beq.n	800c74a <_svfiprintf_r+0x7a>
 800c732:	465b      	mov	r3, fp
 800c734:	4622      	mov	r2, r4
 800c736:	4629      	mov	r1, r5
 800c738:	4638      	mov	r0, r7
 800c73a:	f7ff ff6f 	bl	800c61c <__ssputs_r>
 800c73e:	3001      	adds	r0, #1
 800c740:	f000 80a9 	beq.w	800c896 <_svfiprintf_r+0x1c6>
 800c744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c746:	445a      	add	r2, fp
 800c748:	9209      	str	r2, [sp, #36]	; 0x24
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 80a1 	beq.w	800c896 <_svfiprintf_r+0x1c6>
 800c754:	2300      	movs	r3, #0
 800c756:	f04f 32ff 	mov.w	r2, #4294967295
 800c75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c75e:	f10a 0a01 	add.w	sl, sl, #1
 800c762:	9304      	str	r3, [sp, #16]
 800c764:	9307      	str	r3, [sp, #28]
 800c766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c76a:	931a      	str	r3, [sp, #104]	; 0x68
 800c76c:	4654      	mov	r4, sl
 800c76e:	2205      	movs	r2, #5
 800c770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c774:	4850      	ldr	r0, [pc, #320]	; (800c8b8 <_svfiprintf_r+0x1e8>)
 800c776:	f7f3 fd3b 	bl	80001f0 <memchr>
 800c77a:	9a04      	ldr	r2, [sp, #16]
 800c77c:	b9d8      	cbnz	r0, 800c7b6 <_svfiprintf_r+0xe6>
 800c77e:	06d0      	lsls	r0, r2, #27
 800c780:	bf44      	itt	mi
 800c782:	2320      	movmi	r3, #32
 800c784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c788:	0711      	lsls	r1, r2, #28
 800c78a:	bf44      	itt	mi
 800c78c:	232b      	movmi	r3, #43	; 0x2b
 800c78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c792:	f89a 3000 	ldrb.w	r3, [sl]
 800c796:	2b2a      	cmp	r3, #42	; 0x2a
 800c798:	d015      	beq.n	800c7c6 <_svfiprintf_r+0xf6>
 800c79a:	9a07      	ldr	r2, [sp, #28]
 800c79c:	4654      	mov	r4, sl
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f04f 0c0a 	mov.w	ip, #10
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7aa:	3b30      	subs	r3, #48	; 0x30
 800c7ac:	2b09      	cmp	r3, #9
 800c7ae:	d94d      	bls.n	800c84c <_svfiprintf_r+0x17c>
 800c7b0:	b1b0      	cbz	r0, 800c7e0 <_svfiprintf_r+0x110>
 800c7b2:	9207      	str	r2, [sp, #28]
 800c7b4:	e014      	b.n	800c7e0 <_svfiprintf_r+0x110>
 800c7b6:	eba0 0308 	sub.w	r3, r0, r8
 800c7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	46a2      	mov	sl, r4
 800c7c4:	e7d2      	b.n	800c76c <_svfiprintf_r+0x9c>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	1d19      	adds	r1, r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	9103      	str	r1, [sp, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfbb      	ittet	lt
 800c7d2:	425b      	neglt	r3, r3
 800c7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d8:	9307      	strge	r3, [sp, #28]
 800c7da:	9307      	strlt	r3, [sp, #28]
 800c7dc:	bfb8      	it	lt
 800c7de:	9204      	strlt	r2, [sp, #16]
 800c7e0:	7823      	ldrb	r3, [r4, #0]
 800c7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c7e4:	d10c      	bne.n	800c800 <_svfiprintf_r+0x130>
 800c7e6:	7863      	ldrb	r3, [r4, #1]
 800c7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ea:	d134      	bne.n	800c856 <_svfiprintf_r+0x186>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	1d1a      	adds	r2, r3, #4
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	9203      	str	r2, [sp, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfb8      	it	lt
 800c7f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7fc:	3402      	adds	r4, #2
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c8c8 <_svfiprintf_r+0x1f8>
 800c804:	7821      	ldrb	r1, [r4, #0]
 800c806:	2203      	movs	r2, #3
 800c808:	4650      	mov	r0, sl
 800c80a:	f7f3 fcf1 	bl	80001f0 <memchr>
 800c80e:	b138      	cbz	r0, 800c820 <_svfiprintf_r+0x150>
 800c810:	9b04      	ldr	r3, [sp, #16]
 800c812:	eba0 000a 	sub.w	r0, r0, sl
 800c816:	2240      	movs	r2, #64	; 0x40
 800c818:	4082      	lsls	r2, r0
 800c81a:	4313      	orrs	r3, r2
 800c81c:	3401      	adds	r4, #1
 800c81e:	9304      	str	r3, [sp, #16]
 800c820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c824:	4825      	ldr	r0, [pc, #148]	; (800c8bc <_svfiprintf_r+0x1ec>)
 800c826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c82a:	2206      	movs	r2, #6
 800c82c:	f7f3 fce0 	bl	80001f0 <memchr>
 800c830:	2800      	cmp	r0, #0
 800c832:	d038      	beq.n	800c8a6 <_svfiprintf_r+0x1d6>
 800c834:	4b22      	ldr	r3, [pc, #136]	; (800c8c0 <_svfiprintf_r+0x1f0>)
 800c836:	bb1b      	cbnz	r3, 800c880 <_svfiprintf_r+0x1b0>
 800c838:	9b03      	ldr	r3, [sp, #12]
 800c83a:	3307      	adds	r3, #7
 800c83c:	f023 0307 	bic.w	r3, r3, #7
 800c840:	3308      	adds	r3, #8
 800c842:	9303      	str	r3, [sp, #12]
 800c844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c846:	4433      	add	r3, r6
 800c848:	9309      	str	r3, [sp, #36]	; 0x24
 800c84a:	e768      	b.n	800c71e <_svfiprintf_r+0x4e>
 800c84c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c850:	460c      	mov	r4, r1
 800c852:	2001      	movs	r0, #1
 800c854:	e7a6      	b.n	800c7a4 <_svfiprintf_r+0xd4>
 800c856:	2300      	movs	r3, #0
 800c858:	3401      	adds	r4, #1
 800c85a:	9305      	str	r3, [sp, #20]
 800c85c:	4619      	mov	r1, r3
 800c85e:	f04f 0c0a 	mov.w	ip, #10
 800c862:	4620      	mov	r0, r4
 800c864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c868:	3a30      	subs	r2, #48	; 0x30
 800c86a:	2a09      	cmp	r2, #9
 800c86c:	d903      	bls.n	800c876 <_svfiprintf_r+0x1a6>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0c6      	beq.n	800c800 <_svfiprintf_r+0x130>
 800c872:	9105      	str	r1, [sp, #20]
 800c874:	e7c4      	b.n	800c800 <_svfiprintf_r+0x130>
 800c876:	fb0c 2101 	mla	r1, ip, r1, r2
 800c87a:	4604      	mov	r4, r0
 800c87c:	2301      	movs	r3, #1
 800c87e:	e7f0      	b.n	800c862 <_svfiprintf_r+0x192>
 800c880:	ab03      	add	r3, sp, #12
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	462a      	mov	r2, r5
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <_svfiprintf_r+0x1f4>)
 800c888:	a904      	add	r1, sp, #16
 800c88a:	4638      	mov	r0, r7
 800c88c:	f7fd fcde 	bl	800a24c <_printf_float>
 800c890:	1c42      	adds	r2, r0, #1
 800c892:	4606      	mov	r6, r0
 800c894:	d1d6      	bne.n	800c844 <_svfiprintf_r+0x174>
 800c896:	89ab      	ldrh	r3, [r5, #12]
 800c898:	065b      	lsls	r3, r3, #25
 800c89a:	f53f af2d 	bmi.w	800c6f8 <_svfiprintf_r+0x28>
 800c89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8a0:	b01d      	add	sp, #116	; 0x74
 800c8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a6:	ab03      	add	r3, sp, #12
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	4b05      	ldr	r3, [pc, #20]	; (800c8c4 <_svfiprintf_r+0x1f4>)
 800c8ae:	a904      	add	r1, sp, #16
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	f7fd ff6f 	bl	800a794 <_printf_i>
 800c8b6:	e7eb      	b.n	800c890 <_svfiprintf_r+0x1c0>
 800c8b8:	0800d45c 	.word	0x0800d45c
 800c8bc:	0800d466 	.word	0x0800d466
 800c8c0:	0800a24d 	.word	0x0800a24d
 800c8c4:	0800c61d 	.word	0x0800c61d
 800c8c8:	0800d462 	.word	0x0800d462

0800c8cc <__sfputc_r>:
 800c8cc:	6893      	ldr	r3, [r2, #8]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	b410      	push	{r4}
 800c8d4:	6093      	str	r3, [r2, #8]
 800c8d6:	da08      	bge.n	800c8ea <__sfputc_r+0x1e>
 800c8d8:	6994      	ldr	r4, [r2, #24]
 800c8da:	42a3      	cmp	r3, r4
 800c8dc:	db01      	blt.n	800c8e2 <__sfputc_r+0x16>
 800c8de:	290a      	cmp	r1, #10
 800c8e0:	d103      	bne.n	800c8ea <__sfputc_r+0x1e>
 800c8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e6:	f7fe ba0c 	b.w	800ad02 <__swbuf_r>
 800c8ea:	6813      	ldr	r3, [r2, #0]
 800c8ec:	1c58      	adds	r0, r3, #1
 800c8ee:	6010      	str	r0, [r2, #0]
 800c8f0:	7019      	strb	r1, [r3, #0]
 800c8f2:	4608      	mov	r0, r1
 800c8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <__sfputs_r>:
 800c8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	460f      	mov	r7, r1
 800c900:	4614      	mov	r4, r2
 800c902:	18d5      	adds	r5, r2, r3
 800c904:	42ac      	cmp	r4, r5
 800c906:	d101      	bne.n	800c90c <__sfputs_r+0x12>
 800c908:	2000      	movs	r0, #0
 800c90a:	e007      	b.n	800c91c <__sfputs_r+0x22>
 800c90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c910:	463a      	mov	r2, r7
 800c912:	4630      	mov	r0, r6
 800c914:	f7ff ffda 	bl	800c8cc <__sfputc_r>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d1f3      	bne.n	800c904 <__sfputs_r+0xa>
 800c91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c920 <_vfiprintf_r>:
 800c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c924:	460d      	mov	r5, r1
 800c926:	b09d      	sub	sp, #116	; 0x74
 800c928:	4614      	mov	r4, r2
 800c92a:	4698      	mov	r8, r3
 800c92c:	4606      	mov	r6, r0
 800c92e:	b118      	cbz	r0, 800c938 <_vfiprintf_r+0x18>
 800c930:	6a03      	ldr	r3, [r0, #32]
 800c932:	b90b      	cbnz	r3, 800c938 <_vfiprintf_r+0x18>
 800c934:	f7fe f8ca 	bl	800aacc <__sinit>
 800c938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93a:	07d9      	lsls	r1, r3, #31
 800c93c:	d405      	bmi.n	800c94a <_vfiprintf_r+0x2a>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	059a      	lsls	r2, r3, #22
 800c942:	d402      	bmi.n	800c94a <_vfiprintf_r+0x2a>
 800c944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c946:	f7fe fb59 	bl	800affc <__retarget_lock_acquire_recursive>
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	071b      	lsls	r3, r3, #28
 800c94e:	d501      	bpl.n	800c954 <_vfiprintf_r+0x34>
 800c950:	692b      	ldr	r3, [r5, #16]
 800c952:	b99b      	cbnz	r3, 800c97c <_vfiprintf_r+0x5c>
 800c954:	4629      	mov	r1, r5
 800c956:	4630      	mov	r0, r6
 800c958:	f7fe fa10 	bl	800ad7c <__swsetup_r>
 800c95c:	b170      	cbz	r0, 800c97c <_vfiprintf_r+0x5c>
 800c95e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c960:	07dc      	lsls	r4, r3, #31
 800c962:	d504      	bpl.n	800c96e <_vfiprintf_r+0x4e>
 800c964:	f04f 30ff 	mov.w	r0, #4294967295
 800c968:	b01d      	add	sp, #116	; 0x74
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	89ab      	ldrh	r3, [r5, #12]
 800c970:	0598      	lsls	r0, r3, #22
 800c972:	d4f7      	bmi.n	800c964 <_vfiprintf_r+0x44>
 800c974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c976:	f7fe fb42 	bl	800affe <__retarget_lock_release_recursive>
 800c97a:	e7f3      	b.n	800c964 <_vfiprintf_r+0x44>
 800c97c:	2300      	movs	r3, #0
 800c97e:	9309      	str	r3, [sp, #36]	; 0x24
 800c980:	2320      	movs	r3, #32
 800c982:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c986:	f8cd 800c 	str.w	r8, [sp, #12]
 800c98a:	2330      	movs	r3, #48	; 0x30
 800c98c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb40 <_vfiprintf_r+0x220>
 800c990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c994:	f04f 0901 	mov.w	r9, #1
 800c998:	4623      	mov	r3, r4
 800c99a:	469a      	mov	sl, r3
 800c99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9a0:	b10a      	cbz	r2, 800c9a6 <_vfiprintf_r+0x86>
 800c9a2:	2a25      	cmp	r2, #37	; 0x25
 800c9a4:	d1f9      	bne.n	800c99a <_vfiprintf_r+0x7a>
 800c9a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9aa:	d00b      	beq.n	800c9c4 <_vfiprintf_r+0xa4>
 800c9ac:	465b      	mov	r3, fp
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff ffa1 	bl	800c8fa <__sfputs_r>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	f000 80a9 	beq.w	800cb10 <_vfiprintf_r+0x1f0>
 800c9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9c0:	445a      	add	r2, fp
 800c9c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 80a1 	beq.w	800cb10 <_vfiprintf_r+0x1f0>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9d8:	f10a 0a01 	add.w	sl, sl, #1
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	9307      	str	r3, [sp, #28]
 800c9e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2205      	movs	r2, #5
 800c9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ee:	4854      	ldr	r0, [pc, #336]	; (800cb40 <_vfiprintf_r+0x220>)
 800c9f0:	f7f3 fbfe 	bl	80001f0 <memchr>
 800c9f4:	9a04      	ldr	r2, [sp, #16]
 800c9f6:	b9d8      	cbnz	r0, 800ca30 <_vfiprintf_r+0x110>
 800c9f8:	06d1      	lsls	r1, r2, #27
 800c9fa:	bf44      	itt	mi
 800c9fc:	2320      	movmi	r3, #32
 800c9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca02:	0713      	lsls	r3, r2, #28
 800ca04:	bf44      	itt	mi
 800ca06:	232b      	movmi	r3, #43	; 0x2b
 800ca08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca10:	2b2a      	cmp	r3, #42	; 0x2a
 800ca12:	d015      	beq.n	800ca40 <_vfiprintf_r+0x120>
 800ca14:	9a07      	ldr	r2, [sp, #28]
 800ca16:	4654      	mov	r4, sl
 800ca18:	2000      	movs	r0, #0
 800ca1a:	f04f 0c0a 	mov.w	ip, #10
 800ca1e:	4621      	mov	r1, r4
 800ca20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca24:	3b30      	subs	r3, #48	; 0x30
 800ca26:	2b09      	cmp	r3, #9
 800ca28:	d94d      	bls.n	800cac6 <_vfiprintf_r+0x1a6>
 800ca2a:	b1b0      	cbz	r0, 800ca5a <_vfiprintf_r+0x13a>
 800ca2c:	9207      	str	r2, [sp, #28]
 800ca2e:	e014      	b.n	800ca5a <_vfiprintf_r+0x13a>
 800ca30:	eba0 0308 	sub.w	r3, r0, r8
 800ca34:	fa09 f303 	lsl.w	r3, r9, r3
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	9304      	str	r3, [sp, #16]
 800ca3c:	46a2      	mov	sl, r4
 800ca3e:	e7d2      	b.n	800c9e6 <_vfiprintf_r+0xc6>
 800ca40:	9b03      	ldr	r3, [sp, #12]
 800ca42:	1d19      	adds	r1, r3, #4
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	9103      	str	r1, [sp, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	bfbb      	ittet	lt
 800ca4c:	425b      	neglt	r3, r3
 800ca4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca52:	9307      	strge	r3, [sp, #28]
 800ca54:	9307      	strlt	r3, [sp, #28]
 800ca56:	bfb8      	it	lt
 800ca58:	9204      	strlt	r2, [sp, #16]
 800ca5a:	7823      	ldrb	r3, [r4, #0]
 800ca5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca5e:	d10c      	bne.n	800ca7a <_vfiprintf_r+0x15a>
 800ca60:	7863      	ldrb	r3, [r4, #1]
 800ca62:	2b2a      	cmp	r3, #42	; 0x2a
 800ca64:	d134      	bne.n	800cad0 <_vfiprintf_r+0x1b0>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	1d1a      	adds	r2, r3, #4
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	9203      	str	r2, [sp, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	bfb8      	it	lt
 800ca72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca76:	3402      	adds	r4, #2
 800ca78:	9305      	str	r3, [sp, #20]
 800ca7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb50 <_vfiprintf_r+0x230>
 800ca7e:	7821      	ldrb	r1, [r4, #0]
 800ca80:	2203      	movs	r2, #3
 800ca82:	4650      	mov	r0, sl
 800ca84:	f7f3 fbb4 	bl	80001f0 <memchr>
 800ca88:	b138      	cbz	r0, 800ca9a <_vfiprintf_r+0x17a>
 800ca8a:	9b04      	ldr	r3, [sp, #16]
 800ca8c:	eba0 000a 	sub.w	r0, r0, sl
 800ca90:	2240      	movs	r2, #64	; 0x40
 800ca92:	4082      	lsls	r2, r0
 800ca94:	4313      	orrs	r3, r2
 800ca96:	3401      	adds	r4, #1
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca9e:	4829      	ldr	r0, [pc, #164]	; (800cb44 <_vfiprintf_r+0x224>)
 800caa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caa4:	2206      	movs	r2, #6
 800caa6:	f7f3 fba3 	bl	80001f0 <memchr>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d03f      	beq.n	800cb2e <_vfiprintf_r+0x20e>
 800caae:	4b26      	ldr	r3, [pc, #152]	; (800cb48 <_vfiprintf_r+0x228>)
 800cab0:	bb1b      	cbnz	r3, 800cafa <_vfiprintf_r+0x1da>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	3307      	adds	r3, #7
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	3308      	adds	r3, #8
 800cabc:	9303      	str	r3, [sp, #12]
 800cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac0:	443b      	add	r3, r7
 800cac2:	9309      	str	r3, [sp, #36]	; 0x24
 800cac4:	e768      	b.n	800c998 <_vfiprintf_r+0x78>
 800cac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800caca:	460c      	mov	r4, r1
 800cacc:	2001      	movs	r0, #1
 800cace:	e7a6      	b.n	800ca1e <_vfiprintf_r+0xfe>
 800cad0:	2300      	movs	r3, #0
 800cad2:	3401      	adds	r4, #1
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	4619      	mov	r1, r3
 800cad8:	f04f 0c0a 	mov.w	ip, #10
 800cadc:	4620      	mov	r0, r4
 800cade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae2:	3a30      	subs	r2, #48	; 0x30
 800cae4:	2a09      	cmp	r2, #9
 800cae6:	d903      	bls.n	800caf0 <_vfiprintf_r+0x1d0>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0c6      	beq.n	800ca7a <_vfiprintf_r+0x15a>
 800caec:	9105      	str	r1, [sp, #20]
 800caee:	e7c4      	b.n	800ca7a <_vfiprintf_r+0x15a>
 800caf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800caf4:	4604      	mov	r4, r0
 800caf6:	2301      	movs	r3, #1
 800caf8:	e7f0      	b.n	800cadc <_vfiprintf_r+0x1bc>
 800cafa:	ab03      	add	r3, sp, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	462a      	mov	r2, r5
 800cb00:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <_vfiprintf_r+0x22c>)
 800cb02:	a904      	add	r1, sp, #16
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7fd fba1 	bl	800a24c <_printf_float>
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	1c78      	adds	r0, r7, #1
 800cb0e:	d1d6      	bne.n	800cabe <_vfiprintf_r+0x19e>
 800cb10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb12:	07d9      	lsls	r1, r3, #31
 800cb14:	d405      	bmi.n	800cb22 <_vfiprintf_r+0x202>
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	059a      	lsls	r2, r3, #22
 800cb1a:	d402      	bmi.n	800cb22 <_vfiprintf_r+0x202>
 800cb1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb1e:	f7fe fa6e 	bl	800affe <__retarget_lock_release_recursive>
 800cb22:	89ab      	ldrh	r3, [r5, #12]
 800cb24:	065b      	lsls	r3, r3, #25
 800cb26:	f53f af1d 	bmi.w	800c964 <_vfiprintf_r+0x44>
 800cb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb2c:	e71c      	b.n	800c968 <_vfiprintf_r+0x48>
 800cb2e:	ab03      	add	r3, sp, #12
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	462a      	mov	r2, r5
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_vfiprintf_r+0x22c>)
 800cb36:	a904      	add	r1, sp, #16
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7fd fe2b 	bl	800a794 <_printf_i>
 800cb3e:	e7e4      	b.n	800cb0a <_vfiprintf_r+0x1ea>
 800cb40:	0800d45c 	.word	0x0800d45c
 800cb44:	0800d466 	.word	0x0800d466
 800cb48:	0800a24d 	.word	0x0800a24d
 800cb4c:	0800c8fb 	.word	0x0800c8fb
 800cb50:	0800d462 	.word	0x0800d462

0800cb54 <__sflush_r>:
 800cb54:	898a      	ldrh	r2, [r1, #12]
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	0710      	lsls	r0, r2, #28
 800cb5e:	460c      	mov	r4, r1
 800cb60:	d458      	bmi.n	800cc14 <__sflush_r+0xc0>
 800cb62:	684b      	ldr	r3, [r1, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dc05      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb6e:	2000      	movs	r0, #0
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d0f9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	6a21      	ldr	r1, [r4, #32]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	d032      	beq.n	800cbee <__sflush_r+0x9a>
 800cb88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	075a      	lsls	r2, r3, #29
 800cb8e:	d505      	bpl.n	800cb9c <__sflush_r+0x48>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	1ac0      	subs	r0, r0, r3
 800cb94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb96:	b10b      	cbz	r3, 800cb9c <__sflush_r+0x48>
 800cb98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb9a:	1ac0      	subs	r0, r0, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4602      	mov	r2, r0
 800cba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b0      	blx	r6
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	d106      	bne.n	800cbbc <__sflush_r+0x68>
 800cbae:	6829      	ldr	r1, [r5, #0]
 800cbb0:	291d      	cmp	r1, #29
 800cbb2:	d82b      	bhi.n	800cc0c <__sflush_r+0xb8>
 800cbb4:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <__sflush_r+0x108>)
 800cbb6:	410a      	asrs	r2, r1
 800cbb8:	07d6      	lsls	r6, r2, #31
 800cbba:	d427      	bmi.n	800cc0c <__sflush_r+0xb8>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	6062      	str	r2, [r4, #4]
 800cbc0:	04d9      	lsls	r1, r3, #19
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	6022      	str	r2, [r4, #0]
 800cbc6:	d504      	bpl.n	800cbd2 <__sflush_r+0x7e>
 800cbc8:	1c42      	adds	r2, r0, #1
 800cbca:	d101      	bne.n	800cbd0 <__sflush_r+0x7c>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b903      	cbnz	r3, 800cbd2 <__sflush_r+0x7e>
 800cbd0:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd4:	602f      	str	r7, [r5, #0]
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d0c9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cbda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbde:	4299      	cmp	r1, r3
 800cbe0:	d002      	beq.n	800cbe8 <__sflush_r+0x94>
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f7ff f89e 	bl	800bd24 <_free_r>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	6360      	str	r0, [r4, #52]	; 0x34
 800cbec:	e7c0      	b.n	800cb70 <__sflush_r+0x1c>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c41      	adds	r1, r0, #1
 800cbf6:	d1c8      	bne.n	800cb8a <__sflush_r+0x36>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c5      	beq.n	800cb8a <__sflush_r+0x36>
 800cbfe:	2b1d      	cmp	r3, #29
 800cc00:	d001      	beq.n	800cc06 <__sflush_r+0xb2>
 800cc02:	2b16      	cmp	r3, #22
 800cc04:	d101      	bne.n	800cc0a <__sflush_r+0xb6>
 800cc06:	602f      	str	r7, [r5, #0]
 800cc08:	e7b1      	b.n	800cb6e <__sflush_r+0x1a>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	e7ad      	b.n	800cb70 <__sflush_r+0x1c>
 800cc14:	690f      	ldr	r7, [r1, #16]
 800cc16:	2f00      	cmp	r7, #0
 800cc18:	d0a9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cc1a:	0793      	lsls	r3, r2, #30
 800cc1c:	680e      	ldr	r6, [r1, #0]
 800cc1e:	bf08      	it	eq
 800cc20:	694b      	ldreq	r3, [r1, #20]
 800cc22:	600f      	str	r7, [r1, #0]
 800cc24:	bf18      	it	ne
 800cc26:	2300      	movne	r3, #0
 800cc28:	eba6 0807 	sub.w	r8, r6, r7
 800cc2c:	608b      	str	r3, [r1, #8]
 800cc2e:	f1b8 0f00 	cmp.w	r8, #0
 800cc32:	dd9c      	ble.n	800cb6e <__sflush_r+0x1a>
 800cc34:	6a21      	ldr	r1, [r4, #32]
 800cc36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc38:	4643      	mov	r3, r8
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dc06      	bgt.n	800cc52 <__sflush_r+0xfe>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e78e      	b.n	800cb70 <__sflush_r+0x1c>
 800cc52:	4407      	add	r7, r0
 800cc54:	eba8 0800 	sub.w	r8, r8, r0
 800cc58:	e7e9      	b.n	800cc2e <__sflush_r+0xda>
 800cc5a:	bf00      	nop
 800cc5c:	dfbffffe 	.word	0xdfbffffe

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f7fd ff29 	bl	800aacc <__sinit>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f3      	beq.n	800cc6a <_fflush_r+0xa>
 800cc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d404      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc88:	0599      	lsls	r1, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc8e:	f7fe f9b5 	bl	800affc <__retarget_lock_acquire_recursive>
 800cc92:	4628      	mov	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	f7ff ff5d 	bl	800cb54 <__sflush_r>
 800cc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	4605      	mov	r5, r0
 800cca0:	d4e4      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	059b      	lsls	r3, r3, #22
 800cca6:	d4e1      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccaa:	f7fe f9a8 	bl	800affe <__retarget_lock_release_recursive>
 800ccae:	e7dd      	b.n	800cc6c <_fflush_r+0xc>

0800ccb0 <__swhatbuf_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	2900      	cmp	r1, #0
 800ccba:	b096      	sub	sp, #88	; 0x58
 800ccbc:	4615      	mov	r5, r2
 800ccbe:	461e      	mov	r6, r3
 800ccc0:	da0d      	bge.n	800ccde <__swhatbuf_r+0x2e>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ccc8:	f04f 0100 	mov.w	r1, #0
 800cccc:	bf0c      	ite	eq
 800ccce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ccd2:	2340      	movne	r3, #64	; 0x40
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	6031      	str	r1, [r6, #0]
 800ccd8:	602b      	str	r3, [r5, #0]
 800ccda:	b016      	add	sp, #88	; 0x58
 800ccdc:	bd70      	pop	{r4, r5, r6, pc}
 800ccde:	466a      	mov	r2, sp
 800cce0:	f000 f862 	bl	800cda8 <_fstat_r>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	dbec      	blt.n	800ccc2 <__swhatbuf_r+0x12>
 800cce8:	9901      	ldr	r1, [sp, #4]
 800ccea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ccee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ccf2:	4259      	negs	r1, r3
 800ccf4:	4159      	adcs	r1, r3
 800ccf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccfa:	e7eb      	b.n	800ccd4 <__swhatbuf_r+0x24>

0800ccfc <__smakebuf_r>:
 800ccfc:	898b      	ldrh	r3, [r1, #12]
 800ccfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd00:	079d      	lsls	r5, r3, #30
 800cd02:	4606      	mov	r6, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	d507      	bpl.n	800cd18 <__smakebuf_r+0x1c>
 800cd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	2301      	movs	r3, #1
 800cd12:	6163      	str	r3, [r4, #20]
 800cd14:	b002      	add	sp, #8
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	ab01      	add	r3, sp, #4
 800cd1a:	466a      	mov	r2, sp
 800cd1c:	f7ff ffc8 	bl	800ccb0 <__swhatbuf_r>
 800cd20:	9900      	ldr	r1, [sp, #0]
 800cd22:	4605      	mov	r5, r0
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff f871 	bl	800be0c <_malloc_r>
 800cd2a:	b948      	cbnz	r0, 800cd40 <__smakebuf_r+0x44>
 800cd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d4ef      	bmi.n	800cd14 <__smakebuf_r+0x18>
 800cd34:	f023 0303 	bic.w	r3, r3, #3
 800cd38:	f043 0302 	orr.w	r3, r3, #2
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	e7e3      	b.n	800cd08 <__smakebuf_r+0xc>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	9b00      	ldr	r3, [sp, #0]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	6120      	str	r0, [r4, #16]
 800cd52:	b15b      	cbz	r3, 800cd6c <__smakebuf_r+0x70>
 800cd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 f837 	bl	800cdcc <_isatty_r>
 800cd5e:	b128      	cbz	r0, 800cd6c <__smakebuf_r+0x70>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	f043 0301 	orr.w	r3, r3, #1
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	431d      	orrs	r5, r3
 800cd70:	81a5      	strh	r5, [r4, #12]
 800cd72:	e7cf      	b.n	800cd14 <__smakebuf_r+0x18>

0800cd74 <memmove>:
 800cd74:	4288      	cmp	r0, r1
 800cd76:	b510      	push	{r4, lr}
 800cd78:	eb01 0402 	add.w	r4, r1, r2
 800cd7c:	d902      	bls.n	800cd84 <memmove+0x10>
 800cd7e:	4284      	cmp	r4, r0
 800cd80:	4623      	mov	r3, r4
 800cd82:	d807      	bhi.n	800cd94 <memmove+0x20>
 800cd84:	1e43      	subs	r3, r0, #1
 800cd86:	42a1      	cmp	r1, r4
 800cd88:	d008      	beq.n	800cd9c <memmove+0x28>
 800cd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd92:	e7f8      	b.n	800cd86 <memmove+0x12>
 800cd94:	4402      	add	r2, r0
 800cd96:	4601      	mov	r1, r0
 800cd98:	428a      	cmp	r2, r1
 800cd9a:	d100      	bne.n	800cd9e <memmove+0x2a>
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cda6:	e7f7      	b.n	800cd98 <memmove+0x24>

0800cda8 <_fstat_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	; (800cdc8 <_fstat_r+0x20>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	602b      	str	r3, [r5, #0]
 800cdb6:	f7f4 fd2e 	bl	8001816 <_fstat>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	d102      	bne.n	800cdc4 <_fstat_r+0x1c>
 800cdbe:	682b      	ldr	r3, [r5, #0]
 800cdc0:	b103      	cbz	r3, 800cdc4 <_fstat_r+0x1c>
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}
 800cdc6:	bf00      	nop
 800cdc8:	2000e720 	.word	0x2000e720

0800cdcc <_isatty_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d06      	ldr	r5, [pc, #24]	; (800cde8 <_isatty_r+0x1c>)
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	602b      	str	r3, [r5, #0]
 800cdd8:	f7f4 fd2d 	bl	8001836 <_isatty>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d102      	bne.n	800cde6 <_isatty_r+0x1a>
 800cde0:	682b      	ldr	r3, [r5, #0]
 800cde2:	b103      	cbz	r3, 800cde6 <_isatty_r+0x1a>
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	2000e720 	.word	0x2000e720

0800cdec <_sbrk_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	4d06      	ldr	r5, [pc, #24]	; (800ce08 <_sbrk_r+0x1c>)
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4604      	mov	r4, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	602b      	str	r3, [r5, #0]
 800cdf8:	f7f4 fd36 	bl	8001868 <_sbrk>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	d102      	bne.n	800ce06 <_sbrk_r+0x1a>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	b103      	cbz	r3, 800ce06 <_sbrk_r+0x1a>
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	2000e720 	.word	0x2000e720

0800ce0c <__assert_func>:
 800ce0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce0e:	4614      	mov	r4, r2
 800ce10:	461a      	mov	r2, r3
 800ce12:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <__assert_func+0x2c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4605      	mov	r5, r0
 800ce18:	68d8      	ldr	r0, [r3, #12]
 800ce1a:	b14c      	cbz	r4, 800ce30 <__assert_func+0x24>
 800ce1c:	4b07      	ldr	r3, [pc, #28]	; (800ce3c <__assert_func+0x30>)
 800ce1e:	9100      	str	r1, [sp, #0]
 800ce20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce24:	4906      	ldr	r1, [pc, #24]	; (800ce40 <__assert_func+0x34>)
 800ce26:	462b      	mov	r3, r5
 800ce28:	f000 f872 	bl	800cf10 <fiprintf>
 800ce2c:	f000 f882 	bl	800cf34 <abort>
 800ce30:	4b04      	ldr	r3, [pc, #16]	; (800ce44 <__assert_func+0x38>)
 800ce32:	461c      	mov	r4, r3
 800ce34:	e7f3      	b.n	800ce1e <__assert_func+0x12>
 800ce36:	bf00      	nop
 800ce38:	200000f4 	.word	0x200000f4
 800ce3c:	0800d477 	.word	0x0800d477
 800ce40:	0800d484 	.word	0x0800d484
 800ce44:	0800d4b2 	.word	0x0800d4b2

0800ce48 <_calloc_r>:
 800ce48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce4a:	fba1 2402 	umull	r2, r4, r1, r2
 800ce4e:	b94c      	cbnz	r4, 800ce64 <_calloc_r+0x1c>
 800ce50:	4611      	mov	r1, r2
 800ce52:	9201      	str	r2, [sp, #4]
 800ce54:	f7fe ffda 	bl	800be0c <_malloc_r>
 800ce58:	9a01      	ldr	r2, [sp, #4]
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	b930      	cbnz	r0, 800ce6c <_calloc_r+0x24>
 800ce5e:	4628      	mov	r0, r5
 800ce60:	b003      	add	sp, #12
 800ce62:	bd30      	pop	{r4, r5, pc}
 800ce64:	220c      	movs	r2, #12
 800ce66:	6002      	str	r2, [r0, #0]
 800ce68:	2500      	movs	r5, #0
 800ce6a:	e7f8      	b.n	800ce5e <_calloc_r+0x16>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f7fd ffdd 	bl	800ae2c <memset>
 800ce72:	e7f4      	b.n	800ce5e <_calloc_r+0x16>

0800ce74 <__ascii_mbtowc>:
 800ce74:	b082      	sub	sp, #8
 800ce76:	b901      	cbnz	r1, 800ce7a <__ascii_mbtowc+0x6>
 800ce78:	a901      	add	r1, sp, #4
 800ce7a:	b142      	cbz	r2, 800ce8e <__ascii_mbtowc+0x1a>
 800ce7c:	b14b      	cbz	r3, 800ce92 <__ascii_mbtowc+0x1e>
 800ce7e:	7813      	ldrb	r3, [r2, #0]
 800ce80:	600b      	str	r3, [r1, #0]
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	1e10      	subs	r0, r2, #0
 800ce86:	bf18      	it	ne
 800ce88:	2001      	movne	r0, #1
 800ce8a:	b002      	add	sp, #8
 800ce8c:	4770      	bx	lr
 800ce8e:	4610      	mov	r0, r2
 800ce90:	e7fb      	b.n	800ce8a <__ascii_mbtowc+0x16>
 800ce92:	f06f 0001 	mvn.w	r0, #1
 800ce96:	e7f8      	b.n	800ce8a <__ascii_mbtowc+0x16>

0800ce98 <_realloc_r>:
 800ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	4614      	mov	r4, r2
 800cea0:	460e      	mov	r6, r1
 800cea2:	b921      	cbnz	r1, 800ceae <_realloc_r+0x16>
 800cea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cea8:	4611      	mov	r1, r2
 800ceaa:	f7fe bfaf 	b.w	800be0c <_malloc_r>
 800ceae:	b92a      	cbnz	r2, 800cebc <_realloc_r+0x24>
 800ceb0:	f7fe ff38 	bl	800bd24 <_free_r>
 800ceb4:	4625      	mov	r5, r4
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	f000 f841 	bl	800cf42 <_malloc_usable_size_r>
 800cec0:	4284      	cmp	r4, r0
 800cec2:	4607      	mov	r7, r0
 800cec4:	d802      	bhi.n	800cecc <_realloc_r+0x34>
 800cec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ceca:	d812      	bhi.n	800cef2 <_realloc_r+0x5a>
 800cecc:	4621      	mov	r1, r4
 800cece:	4640      	mov	r0, r8
 800ced0:	f7fe ff9c 	bl	800be0c <_malloc_r>
 800ced4:	4605      	mov	r5, r0
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0ed      	beq.n	800ceb6 <_realloc_r+0x1e>
 800ceda:	42bc      	cmp	r4, r7
 800cedc:	4622      	mov	r2, r4
 800cede:	4631      	mov	r1, r6
 800cee0:	bf28      	it	cs
 800cee2:	463a      	movcs	r2, r7
 800cee4:	f7fe f894 	bl	800b010 <memcpy>
 800cee8:	4631      	mov	r1, r6
 800ceea:	4640      	mov	r0, r8
 800ceec:	f7fe ff1a 	bl	800bd24 <_free_r>
 800cef0:	e7e1      	b.n	800ceb6 <_realloc_r+0x1e>
 800cef2:	4635      	mov	r5, r6
 800cef4:	e7df      	b.n	800ceb6 <_realloc_r+0x1e>

0800cef6 <__ascii_wctomb>:
 800cef6:	b149      	cbz	r1, 800cf0c <__ascii_wctomb+0x16>
 800cef8:	2aff      	cmp	r2, #255	; 0xff
 800cefa:	bf85      	ittet	hi
 800cefc:	238a      	movhi	r3, #138	; 0x8a
 800cefe:	6003      	strhi	r3, [r0, #0]
 800cf00:	700a      	strbls	r2, [r1, #0]
 800cf02:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf06:	bf98      	it	ls
 800cf08:	2001      	movls	r0, #1
 800cf0a:	4770      	bx	lr
 800cf0c:	4608      	mov	r0, r1
 800cf0e:	4770      	bx	lr

0800cf10 <fiprintf>:
 800cf10:	b40e      	push	{r1, r2, r3}
 800cf12:	b503      	push	{r0, r1, lr}
 800cf14:	4601      	mov	r1, r0
 800cf16:	ab03      	add	r3, sp, #12
 800cf18:	4805      	ldr	r0, [pc, #20]	; (800cf30 <fiprintf+0x20>)
 800cf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf1e:	6800      	ldr	r0, [r0, #0]
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	f7ff fcfd 	bl	800c920 <_vfiprintf_r>
 800cf26:	b002      	add	sp, #8
 800cf28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf2c:	b003      	add	sp, #12
 800cf2e:	4770      	bx	lr
 800cf30:	200000f4 	.word	0x200000f4

0800cf34 <abort>:
 800cf34:	b508      	push	{r3, lr}
 800cf36:	2006      	movs	r0, #6
 800cf38:	f000 f834 	bl	800cfa4 <raise>
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	f7f4 fc37 	bl	80017b0 <_exit>

0800cf42 <_malloc_usable_size_r>:
 800cf42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf46:	1f18      	subs	r0, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfbc      	itt	lt
 800cf4c:	580b      	ldrlt	r3, [r1, r0]
 800cf4e:	18c0      	addlt	r0, r0, r3
 800cf50:	4770      	bx	lr

0800cf52 <_raise_r>:
 800cf52:	291f      	cmp	r1, #31
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	d904      	bls.n	800cf66 <_raise_r+0x14>
 800cf5c:	2316      	movs	r3, #22
 800cf5e:	6003      	str	r3, [r0, #0]
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	bd38      	pop	{r3, r4, r5, pc}
 800cf66:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cf68:	b112      	cbz	r2, 800cf70 <_raise_r+0x1e>
 800cf6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf6e:	b94b      	cbnz	r3, 800cf84 <_raise_r+0x32>
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 f831 	bl	800cfd8 <_getpid_r>
 800cf76:	462a      	mov	r2, r5
 800cf78:	4601      	mov	r1, r0
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf80:	f000 b818 	b.w	800cfb4 <_kill_r>
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d00a      	beq.n	800cf9e <_raise_r+0x4c>
 800cf88:	1c59      	adds	r1, r3, #1
 800cf8a:	d103      	bne.n	800cf94 <_raise_r+0x42>
 800cf8c:	2316      	movs	r3, #22
 800cf8e:	6003      	str	r3, [r0, #0]
 800cf90:	2001      	movs	r0, #1
 800cf92:	e7e7      	b.n	800cf64 <_raise_r+0x12>
 800cf94:	2400      	movs	r4, #0
 800cf96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	4798      	blx	r3
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e7e0      	b.n	800cf64 <_raise_r+0x12>
	...

0800cfa4 <raise>:
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <raise+0xc>)
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	f7ff bfd2 	b.w	800cf52 <_raise_r>
 800cfae:	bf00      	nop
 800cfb0:	200000f4 	.word	0x200000f4

0800cfb4 <_kill_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	; (800cfd4 <_kill_r+0x20>)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	f7f4 fbe5 	bl	8001790 <_kill>
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	d102      	bne.n	800cfd0 <_kill_r+0x1c>
 800cfca:	682b      	ldr	r3, [r5, #0]
 800cfcc:	b103      	cbz	r3, 800cfd0 <_kill_r+0x1c>
 800cfce:	6023      	str	r3, [r4, #0]
 800cfd0:	bd38      	pop	{r3, r4, r5, pc}
 800cfd2:	bf00      	nop
 800cfd4:	2000e720 	.word	0x2000e720

0800cfd8 <_getpid_r>:
 800cfd8:	f7f4 bbd2 	b.w	8001780 <_getpid>

0800cfdc <_init>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr

0800cfe8 <_fini>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	bf00      	nop
 800cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfee:	bc08      	pop	{r3}
 800cff0:	469e      	mov	lr, r3
 800cff2:	4770      	bx	lr
